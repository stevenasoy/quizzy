{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, withModifiers as _withModifiers, withKeys as _withKeys, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, createBlock as _createBlock, vModelRadio as _vModelRadio, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"upload-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"file-upload-section\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"error-section\"\n};\nconst _hoisted_5 = {\n  key: 1,\n  class: \"selected-files\"\n};\nconst _hoisted_6 = {\n  class: \"file-name\"\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = {\n  class: \"questions-section\"\n};\nconst _hoisted_9 = {\n  class: \"question-input\"\n};\nconst _hoisted_10 = {\n  class: \"difficulty-section\"\n};\nconst _hoisted_11 = {\n  class: \"difficulty-selector\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = {\n  key: 1\n};\nconst _hoisted_14 = {\n  class: \"predicted-score-container\"\n};\nconst _hoisted_15 = {\n  class: \"score-prediction\"\n};\nconst _hoisted_16 = {\n  class: \"predicted-value\"\n};\nconst _hoisted_17 = {\n  class: \"prediction-explanation\"\n};\nconst _hoisted_18 = {\n  key: 2\n};\nconst _hoisted_19 = {\n  key: 0\n};\nconst _hoisted_20 = {\n  class: \"quiz-progress\"\n};\nconst _hoisted_21 = {\n  class: \"progress-bar\"\n};\nconst _hoisted_22 = {\n  class: \"progress-text\"\n};\nconst _hoisted_23 = {\n  class: \"question-item\"\n};\nconst _hoisted_24 = {\n  key: 0,\n  class: \"options\"\n};\nconst _hoisted_25 = [\"onClick\", \"disabled\"];\nconst _hoisted_26 = {\n  key: 1,\n  class: \"options\"\n};\nconst _hoisted_27 = [\"onClick\", \"disabled\"];\nconst _hoisted_28 = {\n  key: 2,\n  class: \"feedback\"\n};\nconst _hoisted_29 = {\n  class: \"feedback-icon\"\n};\nconst _hoisted_30 = {\n  class: \"feedback-text\"\n};\nconst _hoisted_31 = {\n  class: \"feedback-explanation\"\n};\nconst _hoisted_32 = {\n  key: 4,\n  class: \"error-message\"\n};\nconst _hoisted_33 = {\n  key: 0,\n  class: \"quiz-container\"\n};\nconst _hoisted_34 = {\n  class: \"options\"\n};\nconst _hoisted_35 = [\"id\", \"name\", \"value\", \"onUpdate:modelValue\"];\nconst _hoisted_36 = [\"for\"];\nconst _hoisted_37 = {\n  key: 0,\n  class: \"feedback\"\n};\nconst _hoisted_38 = {\n  class: \"explanation\"\n};\nconst _hoisted_39 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[12] || (_cache[12] = _createElementVNode(\"h1\", null, \"QUIZZy\", -1 /* HOISTED */)), !$setup.showQuestions && !$setup.quizStarted && !$setup.quizFinished && $setup.predictedScore === null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Upload Files\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"upload-area\",\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleDrop, [\"prevent\"]),\n    onClick: $setup.triggerFileInput,\n    role: \"button\",\n    tabindex: \"0\",\n    onKeydown: _withKeys($setup.triggerFileInput, [\"enter\"])\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: $setup.handleFileSelect,\n    accept: \".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\",\n    ref: \"fileInput\",\n    class: \"file-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _cache[3] || (_cache[3] = _createStaticVNode(\"<div class=\\\"upload-prompt\\\" data-v-7ba5bd90><p data-v-7ba5bd90>Drag and drop files here or click to select</p><div class=\\\"supported-formats\\\" data-v-7ba5bd90><p data-v-7ba5bd90>Supported formats:</p><ul data-v-7ba5bd90><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìÑ</span> Documents (PDF, DOCX)</li><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìä</span> Presentations (PPTX)</li><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìù</span> Text files (TXT)</li></ul></div></div>\", 1))], 32 /* NEED_HYDRATION */), $setup.hasFileErrors ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode($setup[\"FileErrorDisplay\"], {\n    \"extraction-errors\": $setup.extractionErrors,\n    \"unsupported-files\": $setup.unsupportedFiles\n  }, null, 8 /* PROPS */, [\"extraction-errors\", \"unsupported-files\"])])) : _createCommentVNode(\"v-if\", true), $setup.selectedFiles.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Selected Files:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedFiles, (file, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"file-item\"\n    }, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString(file.name), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.removeFile(index),\n      class: \"remove-btn\",\n      title: \"Remove file\"\n    }, \"√ó\", 8 /* PROPS */, _hoisted_7)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_8, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Number of Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.questionCount = $event),\n    min: \"1\",\n    max: \"20\",\n    placeholder: \"Enter number of questions\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.questionCount]])])]), _createElementVNode(\"div\", _hoisted_10, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Question Difficulty\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedDifficulty = $event),\n    class: \"difficulty-dropdown\"\n  }, _cache[6] || (_cache[6] = [_createElementVNode(\"option\", {\n    value: \"easy\"\n  }, \"Easy\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"medium\"\n  }, \"Medium\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"hard\"\n  }, \"Hard\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.selectedDifficulty]])])]), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    disabled: !$setup.isFormValid || $setup.isLoading,\n    onClick: $setup.handleSubmit\n  }, _toDisplayString($setup.isLoading ? 'Generating Questions...' : 'Submit'), 9 /* TEXT, PROPS */, _hoisted_12)])) : _createCommentVNode(\"v-if\", true), $setup.predictedScore !== null && !$setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"Ready to Start!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"score-circle\", $setup.getPredictedScoreClass])\n  }, [_createElementVNode(\"span\", _hoisted_16, _toDisplayString($setup.predictedScore) + \"%\", 1 /* TEXT */), _cache[9] || (_cache[9] = _createElementVNode(\"span\", {\n    class: \"prediction-label\"\n  }, \"Predicted Score\", -1 /* HOISTED */))], 2 /* CLASS */)]), _createElementVNode(\"p\", _hoisted_17, \" Based on your study material and selected difficulty (\" + _toDisplayString($setup.selectedDifficulty) + \"), we predict you'll score around \" + _toDisplayString($setup.predictedScore) + \"%. \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"start-quiz-btn\",\n    onClick: $setup.startAdaptiveQuiz\n  }, \"Start Quiz\")])])) : _createCommentVNode(\"v-if\", true), $setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [$setup.getCurrentAdaptiveQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"div\", {\n    class: \"progress-fill\",\n    style: _normalizeStyle({\n      width: `${($setup.currentQuestionIndex + 1) * 100 / Number($setup.questionCount)}%`\n    })\n  }, null, 4 /* STYLE */)]), _createElementVNode(\"span\", _hoisted_22, \"Question \" + _toDisplayString($setup.currentQuestionIndex + 1) + \" of \" + _toDisplayString($setup.questionCount), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"h3\", null, _toDisplayString($setup.getCurrentAdaptiveQuestion.text), 1 /* TEXT */), $setup.getCurrentAdaptiveQuestion.type === 'multiple-choice' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getCurrentAdaptiveQuestion.options, (option, letter) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: letter,\n      class: _normalizeClass([\"option-btn\", {\n        'selected': $setup.currentAnswer === letter,\n        'correct': $setup.showFeedback && letter === $setup.getCurrentAdaptiveQuestion.correctAnswer && !$setup.isAnswerCorrect,\n        'incorrect': $setup.showFeedback && $setup.currentAnswer === letter && !$setup.isAnswerCorrect\n      }]),\n      onClick: $event => $setup.submitAdaptiveAnswer(letter),\n      disabled: $setup.showFeedback\n    }, _toDisplayString(letter) + \") \" + _toDisplayString(option), 11 /* TEXT, CLASS, PROPS */, _hoisted_25);\n  }), 128 /* KEYED_FRAGMENT */))])) : $setup.getCurrentAdaptiveQuestion.type === 'true-false' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_26, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(['True', 'False'], option => {\n    return _createElementVNode(\"button\", {\n      key: option.toLowerCase(),\n      class: _normalizeClass([\"option-btn\", {\n        'selected': $setup.currentAnswer === option.toLowerCase(),\n        'correct': $setup.showFeedback && option.toLowerCase() === $setup.getCurrentAdaptiveQuestion.correctAnswer && !$setup.isAnswerCorrect,\n        'incorrect': $setup.showFeedback && $setup.currentAnswer === option.toLowerCase() && !$setup.isAnswerCorrect\n      }]),\n      onClick: $event => $setup.submitAdaptiveAnswer(option.toLowerCase()),\n      disabled: $setup.showFeedback\n    }, _toDisplayString(option), 11 /* TEXT, CLASS, PROPS */, _hoisted_27);\n  }), 64 /* STABLE_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), $setup.showFeedback ? (_openBlock(), _createElementBlock(\"div\", _hoisted_28, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"feedback-header\", {\n      'correct': $setup.isAnswerCorrect,\n      'incorrect': !$setup.isAnswerCorrect\n    }])\n  }, [_createElementVNode(\"span\", _hoisted_29, _toDisplayString($setup.isAnswerCorrect ? '‚úì' : '‚úó'), 1 /* TEXT */), _createElementVNode(\"span\", _hoisted_30, _toDisplayString($setup.isAnswerCorrect ? 'Correct!' : 'Incorrect!'), 1 /* TEXT */)], 2 /* CLASS */), _createElementVNode(\"div\", _hoisted_31, [_cache[11] || (_cache[11] = _createElementVNode(\"h4\", null, \"Explanation:\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, _toDisplayString($setup.getCurrentAdaptiveQuestion.explanation), 1 /* TEXT */)]), _createElementVNode(\"button\", {\n    class: \"next-btn\",\n    onClick: $setup.moveToNext\n  }, _toDisplayString($setup.currentQuestionIndex + 1 >= Number($setup.questionCount) ? 'See Results' : 'Next Question'), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), $setup.quizFinished ? (_openBlock(), _createBlock($setup[\"QuizResults\"], {\n    key: 3,\n    questions: $setup.formatQuestionsForResults,\n    \"user-answers\": $setup.formatUserAnswersForResults,\n    score: $setup.correctAnswersCount,\n    \"predicted-score\": $setup.predictedScore,\n    onRestart: $setup.restartQuiz,\n    onGoBack: $setup.resetToMainScreen\n  }, null, 8 /* PROPS */, [\"questions\", \"user-answers\", \"score\", \"predicted-score\"])) : _createCommentVNode(\"v-if\", true), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_32, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $setup.quiz ? (_openBlock(), _createElementBlock(\"div\", _hoisted_33, [_cache[13] || (_cache[13] = _createElementVNode(\"h2\", null, \"Generated Quiz\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.quiz.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"question\"\n    }, [_createElementVNode(\"h3\", null, \"Question \" + _toDisplayString(index + 1) + \": \" + _toDisplayString(question.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_34, [question.type === 'multiple-choice' ? (_openBlock(true), _createElementBlock(_Fragment, {\n      key: 0\n    }, _renderList(question.options, (option, letter) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: letter,\n        class: \"option\"\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"radio\",\n        id: `q${index}-${letter}`,\n        name: `question${index}`,\n        value: letter,\n        \"onUpdate:modelValue\": $event => $setup.userAnswers[index] = $event\n      }, null, 8 /* PROPS */, _hoisted_35), [[_vModelRadio, $setup.userAnswers[index]]]), _createElementVNode(\"label\", {\n        for: `q${index}-${letter}`\n      }, _toDisplayString(letter) + \") \" + _toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_36)]);\n    }), 128 /* KEYED_FRAGMENT */)) : question.type === 'true-false' ? (_openBlock(), _createBlock($setup[\"TrueFalseQuestion\"], {\n      key: 1,\n      index: index,\n      \"correct-answer\": question.correctAnswer,\n      explanation: question.explanation,\n      \"show-feedback\": $setup.showAnswers && $setup.userAnswers[index],\n      \"onUpdate:answer\": $event => $setup.userAnswers[index] = $event\n    }, null, 8 /* PROPS */, [\"index\", \"correct-answer\", \"explanation\", \"show-feedback\", \"onUpdate:answer\"])) : _createCommentVNode(\"v-if\", true)]), $setup.showAnswers && $setup.userAnswers[index] ? (_openBlock(), _createElementBlock(\"div\", _hoisted_37, [_createElementVNode(\"p\", {\n      class: _normalizeClass({\n        'correct': $setup.userAnswers[index] === question.correctAnswer,\n        'incorrect': $setup.userAnswers[index] !== question.correctAnswer\n      })\n    }, _toDisplayString($setup.userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!'), 3 /* TEXT, CLASS */), _createElementVNode(\"p\", _hoisted_38, _toDisplayString(question.explanation), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: $setup.checkAnswers,\n    disabled: !$setup.allQuestionsAnswered\n  }, \"Check Answers\", 8 /* PROPS */, _hoisted_39)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$setup","showQuestions","quizStarted","quizFinished","predictedScore","_hoisted_3","onDragover","_cache","_withModifiers","onDrop","handleDrop","onClick","triggerFileInput","role","tabindex","onKeydown","_withKeys","type","onChange","handleFileSelect","accept","ref","_createStaticVNode","hasFileErrors","_hoisted_4","_createVNode","extractionErrors","unsupportedFiles","_createCommentVNode","selectedFiles","length","_hoisted_5","_Fragment","_renderList","file","index","_hoisted_6","_toDisplayString","name","$event","removeFile","title","_hoisted_7","_hoisted_8","_hoisted_9","questionCount","min","max","placeholder","_hoisted_10","_hoisted_11","selectedDifficulty","value","disabled","isFormValid","isLoading","handleSubmit","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_normalizeClass","getPredictedScoreClass","_hoisted_16","_hoisted_17","startAdaptiveQuiz","_hoisted_18","getCurrentAdaptiveQuestion","_hoisted_19","_hoisted_20","_hoisted_21","style","_normalizeStyle","width","currentQuestionIndex","Number","_hoisted_22","_hoisted_23","text","_hoisted_24","options","option","letter","currentAnswer","showFeedback","correctAnswer","isAnswerCorrect","submitAdaptiveAnswer","_hoisted_25","_hoisted_26","toLowerCase","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","explanation","moveToNext","_createBlock","questions","formatQuestionsForResults","formatUserAnswersForResults","score","correctAnswersCount","onRestart","restartQuiz","onGoBack","resetToMainScreen","error","_hoisted_32","quiz","_hoisted_33","question","_hoisted_34","id","userAnswers","_hoisted_35","for","_hoisted_36","showAnswers","_hoisted_37","_hoisted_38","checkAnswers","allQuestionsAnswered","_hoisted_39"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"upload-container\">\n      <h1>QUIZZy</h1>\n      \n      <div v-if=\"!showQuestions && !quizStarted && !quizFinished && predictedScore === null\" class=\"file-upload-section\">\n        <h2>Upload Files</h2>\n        <div class=\"upload-area\" \n          @dragover.prevent \n          @drop.prevent=\"handleDrop\"\n          @click=\"triggerFileInput\"\n          role=\"button\"\n          tabindex=\"0\"\n          @keydown.enter=\"triggerFileInput\"\n        >\n          <input \n            type=\"file\" \n            @change=\"handleFileSelect\" \n            accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\n            ref=\"fileInput\"\n            class=\"file-input\"\n          >\n          <div class=\"upload-prompt\">\n            <p>Drag and drop files here or click to select</p>\n            <div class=\"supported-formats\">\n              <p>Supported formats:</p>\n              <ul>\n                <li><span class=\"format-icon\">üìÑ</span> Documents (PDF, DOCX)</li>\n                <li><span class=\"format-icon\">üìä</span> Presentations (PPTX)</li>\n                <li><span class=\"format-icon\">üìù</span> Text files (TXT)</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        <div v-if=\"hasFileErrors\" class=\"error-section\">\n          <FileErrorDisplay\n            :extraction-errors=\"extractionErrors\"\n            :unsupported-files=\"unsupportedFiles\"\n          />\n        </div>\n\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n          <h3>Selected Files:</h3>\n          <ul>\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n              <span class=\"file-name\">{{ file.name }}</span>\n              <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">√ó</button>\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"questions-section\">\n          <h2>Number of Questions</h2>\n          <div class=\"question-input\">\n            <input\n              type=\"number\"\n              v-model=\"questionCount\"\n              min=\"1\"\n              max=\"20\"\n              placeholder=\"Enter number of questions\"\n            />\n          </div>\n        </div>\n\n        <div class=\"difficulty-section\">\n          <h2>Question Difficulty</h2>\n          <div class=\"difficulty-selector\">\n            <select v-model=\"selectedDifficulty\" class=\"difficulty-dropdown\">\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </div>\n        </div>\n\n        <button \n          class=\"submit-btn\" \n          :disabled=\"!isFormValid || isLoading\"\n          @click=\"handleSubmit\"\n        >\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n        </button>\n      </div>\n\n      <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n        <div class=\"predicted-score-container\">\n          <h2>Ready to Start!</h2>\n          <div class=\"score-prediction\">\n            <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n              <span class=\"predicted-value\">{{ predictedScore }}%</span>\n              <span class=\"prediction-label\">Predicted Score</span>\n            </div>\n          </div>\n          <p class=\"prediction-explanation\">\n            Based on your study material and selected difficulty ({{ selectedDifficulty }}), \n            we predict you'll score around {{ predictedScore }}%.\n          </p>\n          <button class=\"start-quiz-btn\" @click=\"startAdaptiveQuiz\">Start Quiz</button>\n        </div>\n      </div>\n\n      <div v-if=\"quizStarted && !quizFinished\">\n        <div v-if=\"getCurrentAdaptiveQuestion\">\n          <div class=\"quiz-progress\">\n            <div class=\"progress-bar\">\n              <div \n                class=\"progress-fill\"\n                :style=\"{ width: `${(currentQuestionIndex + 1) * 100 / Number(questionCount)}%` }\"\n              ></div>\n            </div>\n            <span class=\"progress-text\">Question {{ currentQuestionIndex + 1 }} of {{ questionCount }}</span>\n          </div>\n          \n          <div class=\"question-item\">\n            <h3>{{ getCurrentAdaptiveQuestion.text }}</h3>\n            <div v-if=\"getCurrentAdaptiveQuestion.type === 'multiple-choice'\" class=\"options\">\n              <button \n                v-for=\"(option, letter) in getCurrentAdaptiveQuestion.options\" \n                :key=\"letter\"\n                class=\"option-btn\"\n                :class=\"{ \n                  'selected': currentAnswer === letter,\n                  'correct': showFeedback && letter === getCurrentAdaptiveQuestion.correctAnswer && !isAnswerCorrect,\n                  'incorrect': showFeedback && currentAnswer === letter && !isAnswerCorrect\n                }\"\n                @click=\"submitAdaptiveAnswer(letter)\"\n                :disabled=\"showFeedback\"\n              >\n                {{ letter }}) {{ option }}\n              </button>\n            </div>\n            <div v-else-if=\"getCurrentAdaptiveQuestion.type === 'true-false'\" class=\"options\">\n              <button \n                v-for=\"option in ['True', 'False']\" \n                :key=\"option.toLowerCase()\"\n                class=\"option-btn\"\n                :class=\"{ \n                  'selected': currentAnswer === option.toLowerCase(),\n                  'correct': showFeedback && option.toLowerCase() === getCurrentAdaptiveQuestion.correctAnswer && !isAnswerCorrect,\n                  'incorrect': showFeedback && currentAnswer === option.toLowerCase() && !isAnswerCorrect\n                }\"\n                @click=\"submitAdaptiveAnswer(option.toLowerCase())\"\n                :disabled=\"showFeedback\"\n              >\n                {{ option }}\n              </button>\n            </div>\n\n            <div v-if=\"showFeedback\" class=\"feedback\">\n              <div class=\"feedback-header\" :class=\"{ 'correct': isAnswerCorrect, 'incorrect': !isAnswerCorrect }\">\n                <span class=\"feedback-icon\">{{ isAnswerCorrect ? '‚úì' : '‚úó' }}</span>\n                <span class=\"feedback-text\">{{ isAnswerCorrect ? 'Correct!' : 'Incorrect!' }}</span>\n              </div>\n              <div class=\"feedback-explanation\">\n                <h4>Explanation:</h4>\n                <p>{{ getCurrentAdaptiveQuestion.explanation }}</p>\n              </div>\n              <button class=\"next-btn\" @click=\"moveToNext\">\n                {{ currentQuestionIndex + 1 >= Number(questionCount) ? 'See Results' : 'Next Question' }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <QuizResults\n        v-if=\"quizFinished\"\n        :questions=\"formatQuestionsForResults\"\n        :user-answers=\"formatUserAnswersForResults\"\n        :score=\"correctAnswersCount\"\n        :predicted-score=\"predictedScore\"\n        @restart=\"restartQuiz\"\n        @go-back=\"resetToMainScreen\"\n      />\n\n      <div v-if=\"error\" class=\"error-message\">\n        {{ error }}\n      </div>\n    </div>\n\n    <template v-if=\"quiz\">\n      <div class=\"quiz-container\">\n        <h2>Generated Quiz</h2>\n        <template v-for=\"(question, index) in quiz.questions\" :key=\"index\">\n          <div class=\"question\">\n            <h3>Question {{ index + 1 }}: {{ question.text }}</h3>\n            <div class=\"options\">\n              <template v-if=\"question.type === 'multiple-choice'\">\n                <div v-for=\"(option, letter) in question.options\" :key=\"letter\" class=\"option\">\n                  <input\n                    type=\"radio\"\n                    :id=\"`q${index}-${letter}`\"\n                    :name=\"`question${index}`\"\n                    :value=\"letter\"\n                    v-model=\"userAnswers[index]\"\n                  />\n                  <label :for=\"`q${index}-${letter}`\">{{ letter }}) {{ option }}</label>\n                </div>\n              </template>\n              <template v-else-if=\"question.type === 'true-false'\">\n                <TrueFalseQuestion\n                  :index=\"index\"\n                  :correct-answer=\"question.correctAnswer\"\n                  :explanation=\"question.explanation\"\n                  :show-feedback=\"showAnswers && userAnswers[index]\"\n                  @update:answer=\"userAnswers[index] = $event\"\n                />\n              </template>\n            </div>\n            <div v-if=\"showAnswers && userAnswers[index]\" class=\"feedback\">\n              <p :class=\"{ 'correct': userAnswers[index] === question.correctAnswer, 'incorrect': userAnswers[index] !== question.correctAnswer }\">\n                {{ userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!' }}\n              </p>\n              <p class=\"explanation\">{{ question.explanation }}</p>\n            </div>\n          </div>\n        </template>\n        <button @click=\"checkAnswers\" :disabled=\"!allQuestionsAnswered\">Check Answers</button>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\n\nconst selectedFiles = ref([]);\nconst questionCount = ref('');\nconst fileInput = ref(null);\nconst generatedQuestions = ref([]);\nconst isLoading = ref(false);\nconst error = ref('');\nconst showQuestions = ref(false);\nconst quiz = ref(null);\nconst userAnswers = ref([]);\nconst showAnswers = ref(false);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\nconst selectedDifficulty = ref('medium');\n\n// Adaptive quiz state\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst currentQuestionIndex = ref(0);\nconst userResponses = ref([]); // {question, userAnswer, correct, difficulty}\nconst adaptiveQuestions = ref([]); // pool of questions for adaptive flow\nconst adaptiveDifficulty = ref('medium');\nconst actualScore = ref(null);\nconst quizSummary = ref('');\n\n// Add these new refs for answer handling\nconst currentAnswer = ref(null);\nconst quizFinished = ref(false);\n\n// Add new refs for feedback\nconst showFeedback = ref(false);\nconst isAnswerCorrect = ref(false);\n\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\n// Used in template for error display conditions\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\nconst readFileContent = async (file) => {\n  return new Promise((resolve) => {\n    if (\n      file.type === \"application/pdf\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n      file.type.startsWith('image/')\n    ) {\n      // PDF, PPTX, DOCX, or Image - send to backend for extraction\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Use the correct backend URL\n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n            resolve(\"[Could not extract file text]\");\n          }\n        })\n        .catch(() => {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: 'Server error while extracting text'\n          });\n          resolve(\"[Could not extract file text]\");\n        });\n    } else if (file.type === \"text/plain\") {\n      // Plain text\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = () => {\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: 'Error reading text file'\n        });\n        resolve(\"[Could not read file]\");\n      };\n      reader.readAsText(file);\n    } else {\n      resolve(`[${file.name} is not a supported file type.]`);\n    }\n  });\n};\n\nfunction predictScore(contentCoverage, difficultyLevel) {\n  // Example coefficients for linear regression\n  const a = 0.5;\n  const b = -10;\n  const c = 90;\n  return Math.max(0, Math.min(100, Math.round(a * contentCoverage + b * difficultyLevel + c)));\n}\n\nfunction getDifficultyLevelValue(diff) {\n  if (diff === 'easy') return 1;\n  if (diff === 'medium') return 2;\n  if (diff === 'hard') return 3;\n  return 2;\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction analyzeContentForCoverage(content) {\n  // For now, just return 100 (simulate full coverage)\n  // Later: implement keyword/topic extraction and compare to questions\n  return 100;\n}\n\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  generatedQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveQuestions.value = [];\n  actualScore.value = null;\n  quizSummary.value = '';\n\n  try {\n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    const combinedContent = fileContents.join('\\n\\n');\n    console.log('Extracted file content:', combinedContent);\n\n    // Request 3x more questions to ensure uniqueness\n    const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n    \n    const prompt = `Create a quiz with ${requestedQuestionCount} COMPLETELY UNIQUE and DIVERSE questions based on this text. Each question MUST cover a different concept or aspect. NO REPETITIVE or SIMILAR questions allowed.\n\nFormat requirements for each question:\n\nFor multiple choice questions:\n1. Question: [unique question text]\n2. Options (mark correct with *):\n   A) [option]\n   B) [option]\n   C) [option]\n   D) [option]\n3. Explanation: [detailed explanation]\n4. Difficulty: [easy|medium|hard]\n\nFor true/false questions:\n1. True/False: [unique question text]\n2. Options (mark correct with *):\n   True\n   False\n3. Explanation: [detailed explanation]\n4. Difficulty: [easy|medium|hard]\n\nIMPORTANT:\n- Each question MUST cover a different topic/concept\n- NO similar or overlapping questions\n- Distribute questions evenly across difficulties\n- Make questions engaging and thought-provoking\n- Ensure clear, unambiguous wording\n\nText to base questions on:\n${combinedContent}`;\n\n    const response = await axios.post(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n      {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.8,  // Increased for more variety\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 2048,\n        }\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    const quizText = response.data.candidates[0].content.parts[0].text;\n    const processedQuiz = processQuizResponse(quizText);\n    \n    // Improved question selection logic\n    const shuffledQuestions = [...processedQuiz.questions]\n      .sort(() => Math.random() - 0.5)\n      .filter((question, index, self) => \n        // Remove duplicate questions by comparing text similarity\n        index === self.findIndex((q) => \n          q.text.toLowerCase().replace(/[^\\w\\s]/g, '') === \n          question.text.toLowerCase().replace(/[^\\w\\s]/g, '')\n        )\n      );\n\n    const selectedQuestions = [];\n    const targetPerDifficulty = Math.ceil(Number(questionCount.value) / 3);\n    const difficultyCount = { easy: 0, medium: 0, hard: 0 };\n\n    // First pass: Get equal distribution across difficulties\n    for (const difficulty of ['easy', 'medium', 'hard']) {\n      const questionsOfDifficulty = shuffledQuestions.filter(q => \n        q.difficulty === difficulty && !selectedQuestions.includes(q)\n      );\n      \n      for (const question of questionsOfDifficulty) {\n        if (difficultyCount[difficulty] < targetPerDifficulty && \n            selectedQuestions.length < Number(questionCount.value)) {\n          selectedQuestions.push(question);\n          difficultyCount[difficulty]++;\n        }\n      }\n    }\n\n    // Second pass: Fill remaining slots if needed\n    while (selectedQuestions.length < Number(questionCount.value)) {\n      const remainingQuestion = shuffledQuestions.find(q => !selectedQuestions.includes(q));\n      if (remainingQuestion) {\n        selectedQuestions.push(remainingQuestion);\n      } else {\n        break;\n      }\n    }\n\n    adaptiveQuestions.value = selectedQuestions;\n\n    // Predict score using linear regression\n    const contentCoverage = analyzeContentForCoverage(combinedContent);\n    const diffValue = getDifficultyLevelValue(selectedDifficulty.value);\n    predictedScore.value = predictScore(contentCoverage, diffValue);\n\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startAdaptiveQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  currentAnswer.value = null;\n  showFeedback.value = false;\n  isAnswerCorrect.value = false;\n  adaptiveDifficulty.value = selectedDifficulty.value;\n};\n\nconst getCurrentAdaptiveQuestion = computed(() => {\n  // Get questions of current difficulty that haven't been answered yet\n  const unansweredQuestions = adaptiveQuestions.value.filter(q => \n    q.difficulty === adaptiveDifficulty.value && \n    !userResponses.value.find(r => r.text === q.text)\n  );\n\n  // If we have unanswered questions of current difficulty, use one of those\n  if (unansweredQuestions.length > 0) {\n    return unansweredQuestions[0];\n  }\n\n  // If no unanswered questions of current difficulty, get questions from other difficulties\n  const remainingQuestions = adaptiveQuestions.value.filter(q => \n    !userResponses.value.find(r => r.text === q.text)\n  );\n\n  if (remainingQuestions.length > 0) {\n    return remainingQuestions[0];\n  }\n\n  // If all questions have been used, return the current question (shouldn't happen with proper question count)\n  return adaptiveQuestions.value[currentQuestionIndex.value];\n});\n\nconst submitAdaptiveAnswer = (answer) => {\n  if (showFeedback.value) return;\n  \n  const question = getCurrentAdaptiveQuestion.value;\n  currentAnswer.value = answer;\n  \n  // Check if answer is correct\n  isAnswerCorrect.value = question.type === 'multiple-choice' \n    ? answer === question.correctAnswer\n    : answer === question.correctAnswer.toLowerCase();\n  \n  showFeedback.value = true;\n};\n\nconst moveToNext = () => {\n  // Store response\n  const question = getCurrentAdaptiveQuestion.value;\n  userResponses.value.push({\n    text: question.text,\n    userAnswer: currentAnswer.value,\n    correct: isAnswerCorrect.value,\n    difficulty: question.difficulty,\n    explanation: question.explanation\n  });\n\n  // Reset feedback state\n  showFeedback.value = false;\n  isAnswerCorrect.value = false;\n  \n  // Move to next question or finish\n  if (currentQuestionIndex.value + 1 >= Number(questionCount.value)) {\n    finishAdaptiveQuiz();\n  } else {\n    currentQuestionIndex.value++;\n    currentAnswer.value = null;\n  }\n};\n\nconst finishAdaptiveQuiz = () => {\n  quizStarted.value = false;\n  quizFinished.value = true;\n  \n  // Calculate score\n  const correctCount = userResponses.value.filter(r => r.correct).length;\n  actualScore.value = Math.round((correctCount / userResponses.value.length) * 100);\n  \n  // Generate summary\n  let strong = [], weak = [];\n  for (const diff of ['easy', 'medium', 'hard']) {\n    const total = userResponses.value.filter(r => r.difficulty === diff).length;\n    const correct = userResponses.value.filter(r => r.difficulty === diff && r.correct).length;\n    if (total > 0) {\n      if (correct / total >= 0.8) strong.push(diff);\n      else if (correct / total < 0.5) weak.push(diff);\n    }\n  }\n  let summary = '';\n  if (actualScore.value === 100) {\n    summary = \"Perfect score! You've mastered the material!\";\n  } else {\n    summary = `You did well on: ${strong.join(', ') || 'none'}\\nAreas to improve: ${weak.join(', ') || 'none'}`;\n  }\n  quizSummary.value = summary;\n};\n\nconst checkAnswers = () => {\n  showAnswers.value = true;\n};\n\nconst allQuestionsAnswered = computed(() => {\n  return userAnswers.value.length === quiz.value.questions.length;\n});\n\nconst processQuizResponse = (response) => {\n  const questions = [];\n  const lines = response.split('\\n');\n  let currentQuestion = null;\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n        type: 'multiple-choice',\n        options: {},\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n    } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n        type: 'true-false',\n        options: { 'true': 'True', 'false': 'False' },\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n    } else if (currentQuestion) {\n      const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n      if (optionMatch && currentQuestion.type === 'multiple-choice') {\n        const letter = optionMatch[1].toUpperCase();\n        let option = optionMatch[2].replace(/\\*$/, '').trim(); // Remove asterisk from end\n        if (option.includes('*')) {\n          currentQuestion.correctAnswer = letter;\n          option = option.replace('*', '').trim();\n        }\n        currentQuestion.options[letter] = option;\n      } else if (line.toLowerCase().startsWith('true') || line.toLowerCase().startsWith('false')) {\n        const answer = line.toLowerCase().replace(/\\*$/, '').trim();\n        if (line.includes('*')) {\n          currentQuestion.correctAnswer = answer;\n        }\n      } else if (line.startsWith('Explanation:')) {\n        currentQuestion.explanation = line.replace('Explanation:', '').trim();\n      } else if (line.startsWith('Difficulty:')) {\n        const diff = line.replace('Difficulty:', '').trim().toLowerCase();\n        if (['easy', 'medium', 'hard'].includes(diff)) {\n          currentQuestion.difficulty = diff;\n        }\n      }\n    }\n  }\n  if (currentQuestion) questions.push(currentQuestion);\n  return { questions };\n};\n\n// Update the formatQuestionsForResults computed property\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.slice(0, userResponses.value.length).map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    answer: q.type === 'multiple-choice' ? \n      `${q.correctAnswer}) ${q.options[q.correctAnswer]}` : \n      q.correctAnswer.charAt(0).toUpperCase() + q.correctAnswer.slice(1),\n    explanation: q.explanation,\n    userAnswer: userResponses.value[index].userAnswer,\n    isCorrect: userResponses.value[index].correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update restartQuiz function to only reset quiz state\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  currentAnswer.value = null;\n  showFeedback.value = false;\n  isAnswerCorrect.value = false;\n  // Keep the same questions and difficulty\n  adaptiveDifficulty.value = selectedDifficulty.value;\n};\n\n// Add back resetToMainScreen function\nconst resetToMainScreen = () => {\n  showQuestions.value = false;\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveQuestions.value = [];\n  actualScore.value = null;\n  quizSummary.value = '';\n  currentAnswer.value = null;\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.upload-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 90%;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.option {\n  margin-bottom: 0.5rem;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  padding: 1.5rem;\n  border-radius: 8px;\n  background-color: #fff;\n  box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n}\n\n.feedback-header {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  padding: 1rem;\n  border-radius: 6px;\n  margin-bottom: 1rem;\n}\n\n.feedback-header.correct {\n  background-color: #e8f5e9;\n}\n\n.feedback-header.incorrect {\n  background-color: #ffebee;\n}\n\n.feedback-icon {\n  font-size: 1.5rem;\n  font-weight: bold;\n}\n\n.feedback-text {\n  font-size: 1.2rem;\n  font-weight: bold;\n}\n\n.correct .feedback-icon,\n.correct .feedback-text {\n  color: #4CAF50;\n}\n\n.incorrect .feedback-icon,\n.incorrect .feedback-text {\n  color: #f44336;\n}\n\n.feedback-explanation {\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  margin: 1rem 0;\n}\n\n.feedback-explanation h4 {\n  color: #2196F3;\n  margin: 0 0 0.5rem 0;\n}\n\n.feedback-explanation p {\n  color: #666;\n  line-height: 1.5;\n  margin: 0;\n}\n\n.next-btn {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n}\n\n.next-btn:hover {\n  background-color: #45a049;\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #E3F2FD;\n  color: #333;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 1rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 1rem 0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}