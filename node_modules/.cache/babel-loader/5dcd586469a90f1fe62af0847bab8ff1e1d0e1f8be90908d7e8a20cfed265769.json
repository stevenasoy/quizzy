{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.flat-map.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unscopables.flat-map.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.flat-map.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport QuizHistoryDetails from './components/QuizHistoryDetails.vue';\nimport AccountButton from './components/AccountButton.vue';\nimport StudyStats from './components/StudyStats.vue';\nimport { calculatePredictedScore, calculateScore, processQuizResponse, isSimilarQuestion } from './algorithms';\nimport SpacedReviewSession from './components/SpacedReviewSession.vue';\nimport { getDueQuestions } from './algorithms/spaced-repetition';\nimport { useStore } from 'vuex';\nexport default {\n  __name: 'App',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var store = useStore();\n\n    // File handling state\n    var selectedFiles = ref([]);\n    var fileInput = ref(null);\n    var unsupportedFiles = ref([]);\n    var extractionErrors = ref([]);\n\n    // Quiz state\n    var questionCount = ref('');\n    var isLoading = ref(false);\n    var error = ref('');\n    var predictedScore = ref(null);\n    var quizStarted = ref(false);\n    var quizFinished = ref(false);\n    var adaptiveQuestions = ref([]);\n    var userResponses = ref([]);\n    var extractedContent = ref('');\n    var selectedQuiz = ref(null);\n\n    // Add quiz history state\n    var quizHistory = ref([]);\n\n    // Add isRetaking flag to track retakes\n    var isRetaking = ref(false);\n    var retakeIndex = ref(-1);\n\n    // Stats view state\n    var showStats = ref(false);\n\n    // Spaced Review Session state\n    var showReviewSession = ref(false);\n\n    // Load quiz history from localStorage on mount\n    onMounted(function () {\n      var savedHistory = localStorage.getItem('quizHistory');\n      if (savedHistory) {\n        quizHistory.value = JSON.parse(savedHistory);\n      }\n    });\n\n    // Computed properties\n    var isFormValid = computed(function () {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    var hasFileErrors = computed(function () {\n      return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n    });\n    var getPredictedScoreClass = computed(function () {\n      if (predictedScore.value >= 80) return 'high';\n      if (predictedScore.value >= 60) return 'medium';\n      return 'low';\n    });\n\n    // Get all questions from all quizzes\n    var allQuestions = computed(function () {\n      return store.state.quizzes.flatMap(function (quiz) {\n        return quiz.questions.map(function (q) {\n          return _objectSpread(_objectSpread({}, q), {}, {\n            quizId: quiz.id,\n            quizTitle: quiz.title\n          });\n        });\n      });\n    });\n\n    // Calculate number of due questions\n    var dueCount = computed(function () {\n      return getDueQuestions(allQuestions.value).length;\n    });\n\n    // File handling methods\n    var triggerFileInput = function triggerFileInput() {\n      fileInput.value.click();\n    };\n    var handleFileSelect = function handleFileSelect(event) {\n      var files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    var handleDrop = function handleDrop(event) {\n      var files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    var addFiles = function addFiles(files) {\n      var validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n      var validFiles = [];\n      var invalidFiles = [];\n      files.forEach(function (file) {\n        if (validTypes.includes(file.type)) {\n          validFiles.push(file);\n        } else {\n          invalidFiles.push(file);\n        }\n      });\n      selectedFiles.value = [].concat(_toConsumableArray(selectedFiles.value), validFiles);\n      unsupportedFiles.value = [].concat(_toConsumableArray(unsupportedFiles.value), invalidFiles);\n    };\n    var removeFile = function removeFile(index) {\n      selectedFiles.value.splice(index, 1);\n    };\n\n    // Quiz handling methods\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var fileContents, validContents, requestedQuestionCount, questions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (isFormValid.value) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              isLoading.value = true;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n              quizStarted.value = false;\n              userResponses.value = [];\n              extractedContent.value = '';\n              extractionErrors.value = [];\n              _context.prev = 10;\n              console.log('Processing files:', selectedFiles.value.map(function (f) {\n                return {\n                  name: f.name,\n                  type: f.type\n                };\n              }));\n              _context.next = 14;\n              return Promise.all(selectedFiles.value.map(function (file) {\n                return readFileContent(file);\n              }));\n            case 14:\n              fileContents = _context.sent;\n              validContents = fileContents.filter(function (content) {\n                return content && content.trim().length > 0;\n              });\n              console.log('Number of files with valid content:', validContents.length);\n              if (!(validContents.length === 0)) {\n                _context.next = 19;\n                break;\n              }\n              throw new Error('No valid content could be extracted from the selected files.');\n            case 19:\n              extractedContent.value = validContents.join('\\n\\n');\n              console.log('Total content length:', extractedContent.value.length);\n              if (!(extractedContent.value.trim().length < 50)) {\n                _context.next = 23;\n                break;\n              }\n              throw new Error('The extracted content is too short to generate meaningful questions.');\n            case 23:\n              requestedQuestionCount = Number(questionCount.value);\n              console.log('Requesting questions:', requestedQuestionCount);\n              _context.next = 27;\n              return generateQuestions(extractedContent.value, requestedQuestionCount);\n            case 27:\n              questions = _context.sent;\n              if (!(!questions || questions.length === 0)) {\n                _context.next = 30;\n                break;\n              }\n              throw new Error('No valid questions could be generated.');\n            case 30:\n              console.log('Generated questions:', questions.length);\n              adaptiveQuestions.value = questions;\n              predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n              _context.next = 41;\n              break;\n            case 35:\n              _context.prev = 35;\n              _context.t0 = _context[\"catch\"](10);\n              console.error('Error in handleSubmit:', _context.t0);\n              error.value = _context.t0.message || 'An unexpected error occurred while generating questions.';\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n            case 41:\n              _context.prev = 41;\n              isLoading.value = false;\n              return _context.finish(41);\n            case 44:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[10, 35, 41, 44]]);\n      }));\n      return function handleSubmit() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var startQuiz = function startQuiz() {\n      quizStarted.value = true;\n      quizFinished.value = false;\n    };\n    var handleQuizComplete = function handleQuizComplete(responses) {\n      userResponses.value = responses;\n      // Update the adaptiveQuestions with user answers\n      adaptiveQuestions.value = adaptiveQuestions.value.map(function (question, index) {\n        var _responses$index, _responses$index2;\n        return _objectSpread(_objectSpread({}, question), {}, {\n          userAnswer: (_responses$index = responses[index]) === null || _responses$index === void 0 ? void 0 : _responses$index.userAnswer,\n          isCorrect: (_responses$index2 = responses[index]) === null || _responses$index2 === void 0 ? void 0 : _responses$index2.correct\n        });\n      });\n      quizFinished.value = true;\n      saveQuizResults();\n    };\n    var restartQuiz = function restartQuiz() {\n      quizStarted.value = true;\n      quizFinished.value = false;\n      userResponses.value = [];\n    };\n    var resetToMainScreen = function resetToMainScreen() {\n      selectedFiles.value = [];\n      unsupportedFiles.value = [];\n      extractionErrors.value = [];\n      questionCount.value = '';\n      error.value = '';\n      isLoading.value = false;\n      predictedScore.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n\n    // Helper functions\n    function readFileContent(_x) {\n      return _readFileContent.apply(this, arguments);\n    }\n    function _readFileContent() {\n      _readFileContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(file) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", new Promise(function (resolve) {\n                try {\n                  console.log('File type:', file.type);\n                  console.log('File name:', file.name);\n                  var formData = new FormData();\n                  formData.append('file', file);\n                  var backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n                  fetch(\"\".concat(backendUrl, \"/extract-file\"), {\n                    method: 'POST',\n                    body: formData\n                  }).then(function (res) {\n                    return res.json();\n                  }).then(function (data) {\n                    if (data.text) {\n                      resolve(data.text);\n                    } else {\n                      extractionErrors.value.push({\n                        fileName: file.name,\n                        message: data.error || 'Failed to extract text from file'\n                      });\n                      resolve('');\n                    }\n                  })[\"catch\"](function (error) {\n                    console.error('Error processing file:', error);\n                    extractionErrors.value.push({\n                      fileName: file.name,\n                      message: \"Error processing file: \".concat(error.message)\n                    });\n                    resolve('');\n                  });\n                } catch (error) {\n                  console.error('Error preparing file:', error);\n                  extractionErrors.value.push({\n                    fileName: file.name,\n                    message: \"Error preparing file: \".concat(error.message)\n                  });\n                  resolve('');\n                }\n              }));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return _readFileContent.apply(this, arguments);\n    }\n    function generateQuestions(_x2, _x3) {\n      return _generateQuestions.apply(this, arguments);\n    } // Results formatting\n    function _generateQuestions() {\n      _generateQuestions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(content, count) {\n        var maxRetries, retryCount, allQuestions, _response$data, remainingCount, strategy, prompt, response, responseText, newQuestions, uniqueNewQuestions, _error$response, _error$response2;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              maxRetries = 3;\n              retryCount = 0;\n              allQuestions = [];\n            case 3:\n              if (!(retryCount < maxRetries && allQuestions.length < count)) {\n                _context4.next = 54;\n                break;\n              }\n              _context4.prev = 4;\n              remainingCount = count - allQuestions.length;\n              strategy = retryCount % 3;\n              prompt = \"Generate exactly \".concat(remainingCount, \" questions. DO NOT use markdown formatting or asterisks for emphasis.\\nFOLLOW THIS EXACT FORMAT WITH NO DEVIATIONS:\\n\\nFor Multiple Choice Questions:\\nQuestion: What is the question text?\\nA) First option\\nB) Second option\\nC) Third option\\nD) Fourth option\\nAnswer: A* (or B*, C*, D* - add asterisk to correct answer)\\nDifficulty: easy (or medium or hard)\\n\\nFor True/False Questions:\\nTrue/False: What is the question text?\\nAnswer: True* (or False* - add asterisk to correct answer)\\nDifficulty: easy (or medium or hard)\\n\\nREQUIREMENTS:\\n1. Use the exact format shown above\\n2. Do not add any extra formatting or text\\n3. Do not use markdown\\n4. Do not use bold or italics\\n5. Each question must end with a difficulty level\\n6. Questions must be based on this content:\\n\\n\").concat(content, \"\\n\\nSTRATEGY: \");\n              _context4.t0 = strategy;\n              _context4.next = _context4.t0 === 0 ? 11 : _context4.t0 === 1 ? 13 : _context4.t0 === 2 ? 15 : 17;\n              break;\n            case 11:\n              prompt += 'Create a mix of multiple-choice and true/false questions that directly test understanding of the content.';\n              return _context4.abrupt(\"break\", 17);\n            case 13:\n              prompt += 'Create questions that focus on what is NOT mentioned or opposite relationships in the content.';\n              return _context4.abrupt(\"break\", 17);\n            case 15:\n              prompt += 'Create questions that test application and inference of the concepts mentioned in the content.';\n              return _context4.abrupt(\"break\", 17);\n            case 17:\n              _context4.next = 19;\n              return axios.post(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\".concat(process.env.VUE_APP_GEMINI_API_KEY), {\n                contents: [{\n                  parts: [{\n                    text: prompt\n                  }]\n                }],\n                generationConfig: {\n                  temperature: 0.7 + retryCount * 0.1,\n                  topK: 40,\n                  topP: 0.95,\n                  maxOutputTokens: 2048\n                }\n              }, {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n            case 19:\n              response = _context4.sent;\n              if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data = _response$data.candidates) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && (_response$data = _response$data.content) !== null && _response$data !== void 0 && (_response$data = _response$data.parts) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && _response$data.text) {\n                _context4.next = 22;\n                break;\n              }\n              throw new Error('Invalid response format from Gemini API');\n            case 22:\n              responseText = response.data.candidates[0].content.parts[0].text.replace(/\\*\\*/g, '') // Remove markdown bold\n              .replace(/\\*/g, '*') // Normalize asterisks\n              .replace(/[\"\"]/g, '\"'); // Normalize quotes\n              console.log('Generated response:', responseText);\n              newQuestions = processQuizResponse(responseText, content).questions;\n              if (!(newQuestions.length === 0)) {\n                _context4.next = 30;\n                break;\n              }\n              console.error('No valid questions parsed from response');\n              _context4.next = 29;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 29:\n              return _context4.abrupt(\"continue\", 3);\n            case 30:\n              uniqueNewQuestions = newQuestions.filter(function (newQ) {\n                return !allQuestions.some(function (existingQ) {\n                  return isSimilarQuestion(newQ, existingQ);\n                });\n              });\n              allQuestions = [].concat(_toConsumableArray(allQuestions), _toConsumableArray(uniqueNewQuestions));\n              if (!(allQuestions.length >= count)) {\n                _context4.next = 34;\n                break;\n              }\n              return _context4.abrupt(\"return\", allQuestions.slice(0, count));\n            case 34:\n              retryCount++;\n              _context4.next = 52;\n              break;\n            case 37:\n              _context4.prev = 37;\n              _context4.t1 = _context4[\"catch\"](4);\n              console.error(\"Attempt \".concat(retryCount + 1, \" failed:\"), _context4.t1);\n              retryCount++;\n              if (!(((_error$response = _context4.t1.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 429)) {\n                _context4.next = 46;\n                break;\n              }\n              _context4.next = 44;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 2000 * retryCount);\n              });\n            case 44:\n              _context4.next = 52;\n              break;\n            case 46:\n              if (!(retryCount === maxRetries)) {\n                _context4.next = 50;\n                break;\n              }\n              throw new Error(\"Failed to generate enough unique questions after \".concat(maxRetries, \" attempts. \").concat(((_error$response2 = _context4.t1.response) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.data) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.error) === null || _error$response2 === void 0 ? void 0 : _error$response2.message) || _context4.t1.message));\n            case 50:\n              _context4.next = 52;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 52:\n              _context4.next = 3;\n              break;\n            case 54:\n              if (!(allQuestions.length < count)) {\n                _context4.next = 56;\n                break;\n              }\n              throw new Error(\"Could only generate \".concat(allQuestions.length, \" unique questions out of \").concat(count, \" requested. Please try with different content or reduce the number of questions.\"));\n            case 56:\n              return _context4.abrupt(\"return\", allQuestions);\n            case 57:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 37]]);\n      }));\n      return _generateQuestions.apply(this, arguments);\n    }\n    var formatQuestionsForResults = computed(function () {\n      return adaptiveQuestions.value.map(function (q, index) {\n        var _userResponses$value$, _userResponses$value$2;\n        return {\n          text: q.text,\n          type: q.type,\n          options: q.options,\n          userAnswer: (_userResponses$value$ = userResponses.value[index]) === null || _userResponses$value$ === void 0 ? void 0 : _userResponses$value$.userAnswer,\n          correctAnswer: q.correctAnswer,\n          explanation: q.explanation,\n          isCorrect: (_userResponses$value$2 = userResponses.value[index]) === null || _userResponses$value$2 === void 0 ? void 0 : _userResponses$value$2.correct\n        };\n      });\n    });\n    var formatUserAnswersForResults = computed(function () {\n      return userResponses.value.map(function (r) {\n        return r.userAnswer;\n      });\n    });\n    var correctAnswersCount = computed(function () {\n      return userResponses.value.filter(function (r) {\n        return r.correct;\n      }).length;\n    });\n\n    // Update the calculateScore function\n    var score = computed(function () {\n      return calculateScore(userResponses.value);\n    });\n\n    // Update the saveQuizResults function to remove timing data\n    var saveQuizResults = function saveQuizResults() {\n      var _selectedFiles$value$;\n      var quizResult = {\n        fileName: ((_selectedFiles$value$ = selectedFiles.value[0]) === null || _selectedFiles$value$ === void 0 ? void 0 : _selectedFiles$value$.name) || 'Untitled Quiz',\n        questionCount: Number(questionCount.value),\n        predictedScore: predictedScore.value,\n        actualScore: score.value,\n        date: new Date(),\n        fileContent: extractedContent.value,\n        questions: adaptiveQuestions.value.map(function (q, index) {\n          var _userResponses$value$3, _userResponses$value$4;\n          return {\n            text: q.text,\n            type: q.type,\n            options: q.options,\n            userAnswer: (_userResponses$value$3 = userResponses.value[index]) === null || _userResponses$value$3 === void 0 ? void 0 : _userResponses$value$3.userAnswer,\n            correctAnswer: q.correctAnswer,\n            isCorrect: (_userResponses$value$4 = userResponses.value[index]) === null || _userResponses$value$4 === void 0 ? void 0 : _userResponses$value$4.correct,\n            explanation: q.explanation,\n            difficulty: q.difficulty\n          };\n        })\n      };\n      if (isRetaking.value && retakeIndex.value !== -1) {\n        quizHistory.value[retakeIndex.value] = _objectSpread(_objectSpread({}, quizHistory.value[retakeIndex.value]), {}, {\n          actualScore: quizResult.actualScore,\n          date: quizResult.date,\n          questions: quizResult.questions\n        });\n      } else {\n        quizHistory.value.unshift(quizResult);\n      }\n      localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Update the handleRetakeQuiz function to set retake flags\n    var handleRetakeQuiz = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(quizToRetake) {\n        var file, requestedQuestionCount, questions;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // Find the index of the quiz being retaken\n              retakeIndex.value = quizHistory.value.findIndex(function (quiz) {\n                return quiz.fileName === quizToRetake.fileName && quiz.questionCount === quizToRetake.questionCount && quiz.fileContent === quizToRetake.fileContent;\n              });\n              if (!(retakeIndex.value === -1)) {\n                _context2.next = 4;\n                break;\n              }\n              console.error('Could not find original quiz to retake');\n              return _context2.abrupt(\"return\");\n            case 4:\n              isRetaking.value = true;\n\n              // Reset quiz state\n              quizStarted.value = false;\n              quizFinished.value = false;\n              predictedScore.value = null;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              userResponses.value = [];\n              selectedQuiz.value = null; // Reset selected quiz\n\n              // Set the question count from the previous quiz\n              questionCount.value = quizToRetake.questionCount.toString();\n\n              // Create a dummy file with the same name\n              file = new File([''], quizToRetake.fileName, {\n                type: 'text/plain'\n              }); // Set the selected file and content\n              selectedFiles.value = [file];\n              extractedContent.value = quizToRetake.fileContent;\n\n              // Generate new quiz using the stored content\n              _context2.prev = 16;\n              isLoading.value = true;\n              requestedQuestionCount = Number(questionCount.value);\n              _context2.next = 21;\n              return generateQuestions(extractedContent.value, requestedQuestionCount);\n            case 21:\n              questions = _context2.sent;\n              if (!(!questions || questions.length === 0)) {\n                _context2.next = 24;\n                break;\n              }\n              throw new Error('No valid questions could be generated.');\n            case 24:\n              adaptiveQuestions.value = questions;\n              predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n\n              // After generating questions, start the quiz\n              quizStarted.value = true;\n              _context2.next = 34;\n              break;\n            case 29:\n              _context2.prev = 29;\n              _context2.t0 = _context2[\"catch\"](16);\n              error.value = \"Error generating questions: \".concat(_context2.t0.message);\n              // Reset retake flags on error\n              isRetaking.value = false;\n              retakeIndex.value = -1;\n            case 34:\n              _context2.prev = 34;\n              isLoading.value = false;\n              return _context2.finish(34);\n            case 37:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[16, 29, 34, 37]]);\n      }));\n      return function handleRetakeQuiz(_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // Update handleCreateQuiz to reset retake flags\n    var handleCreateQuiz = function handleCreateQuiz() {\n      showStats.value = false;\n      selectedQuiz.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      predictedScore.value = null;\n      selectedFiles.value = [];\n      questionCount.value = '';\n      error.value = '';\n      extractedContent.value = '';\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Add the clearHistory function\n    var clearHistory = function clearHistory() {\n      if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n        quizHistory.value = [];\n        localStorage.removeItem('quizHistory');\n      }\n    };\n\n    // Add function to handle quiz selection\n    var handleQuizSelect = function handleQuizSelect(quiz) {\n      if (showStats.value) {\n        showStats.value = false;\n        // Add small delay to ensure smooth transition\n        setTimeout(function () {\n          selectedQuiz.value = quiz;\n        }, 100);\n      } else {\n        selectedQuiz.value = quiz;\n      }\n    };\n\n    // Add new method to handle create quiz from stats view\n    var handleCreateQuizFromStats = function handleCreateQuizFromStats() {\n      showStats.value = false;\n      handleCreateQuiz();\n    };\n\n    // Handle questions update from spaced review session\n    var handleQuestionsUpdate = function handleQuestionsUpdate(updatedQuestions) {\n      store.commit('updateQuestions', updatedQuestions);\n    };\n    var __returned__ = {\n      store: store,\n      selectedFiles: selectedFiles,\n      fileInput: fileInput,\n      unsupportedFiles: unsupportedFiles,\n      extractionErrors: extractionErrors,\n      questionCount: questionCount,\n      isLoading: isLoading,\n      error: error,\n      predictedScore: predictedScore,\n      quizStarted: quizStarted,\n      quizFinished: quizFinished,\n      adaptiveQuestions: adaptiveQuestions,\n      userResponses: userResponses,\n      extractedContent: extractedContent,\n      selectedQuiz: selectedQuiz,\n      quizHistory: quizHistory,\n      isRetaking: isRetaking,\n      retakeIndex: retakeIndex,\n      showStats: showStats,\n      showReviewSession: showReviewSession,\n      isFormValid: isFormValid,\n      hasFileErrors: hasFileErrors,\n      getPredictedScoreClass: getPredictedScoreClass,\n      allQuestions: allQuestions,\n      dueCount: dueCount,\n      triggerFileInput: triggerFileInput,\n      handleFileSelect: handleFileSelect,\n      handleDrop: handleDrop,\n      addFiles: addFiles,\n      removeFile: removeFile,\n      handleSubmit: handleSubmit,\n      startQuiz: startQuiz,\n      handleQuizComplete: handleQuizComplete,\n      restartQuiz: restartQuiz,\n      resetToMainScreen: resetToMainScreen,\n      readFileContent: readFileContent,\n      generateQuestions: generateQuestions,\n      formatQuestionsForResults: formatQuestionsForResults,\n      formatUserAnswersForResults: formatUserAnswersForResults,\n      correctAnswersCount: correctAnswersCount,\n      score: score,\n      saveQuizResults: saveQuizResults,\n      handleRetakeQuiz: handleRetakeQuiz,\n      handleCreateQuiz: handleCreateQuiz,\n      clearHistory: clearHistory,\n      handleQuizSelect: handleQuizSelect,\n      handleCreateQuizFromStats: handleCreateQuizFromStats,\n      handleQuestionsUpdate: handleQuestionsUpdate,\n      ref: ref,\n      computed: computed,\n      onMounted: onMounted,\n      get axios() {\n        return axios;\n      },\n      FileErrorDisplay: FileErrorDisplay,\n      QuizResults: QuizResults,\n      FlashcardQuiz: FlashcardQuiz,\n      Sidebar: Sidebar,\n      QuizHistoryDetails: QuizHistoryDetails,\n      AccountButton: AccountButton,\n      StudyStats: StudyStats,\n      get calculatePredictedScore() {\n        return calculatePredictedScore;\n      },\n      get calculateScore() {\n        return calculateScore;\n      },\n      get processQuizResponse() {\n        return processQuizResponse;\n      },\n      get isSimilarQuestion() {\n        return isSimilarQuestion;\n      },\n      SpacedReviewSession: SpacedReviewSession,\n      get getDueQuestions() {\n        return getDueQuestions;\n      },\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","axios","FileErrorDisplay","QuizResults","FlashcardQuiz","Sidebar","QuizHistoryDetails","AccountButton","StudyStats","calculatePredictedScore","calculateScore","processQuizResponse","isSimilarQuestion","SpacedReviewSession","getDueQuestions","useStore","store","selectedFiles","fileInput","unsupportedFiles","extractionErrors","questionCount","isLoading","error","predictedScore","quizStarted","quizFinished","adaptiveQuestions","userResponses","extractedContent","selectedQuiz","quizHistory","isRetaking","retakeIndex","showStats","showReviewSession","savedHistory","localStorage","getItem","value","JSON","parse","isFormValid","length","hasFileErrors","getPredictedScoreClass","allQuestions","state","quizzes","flatMap","quiz","questions","map","q","_objectSpread","quizId","id","quizTitle","title","dueCount","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validTypes","validFiles","invalidFiles","forEach","file","includes","type","push","concat","_toConsumableArray","removeFile","index","splice","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fileContents","validContents","requestedQuestionCount","wrap","_callee$","_context","prev","next","abrupt","console","log","f","name","Promise","all","readFileContent","sent","filter","content","trim","Error","join","Number","generateQuestions","t0","message","finish","stop","apply","arguments","startQuiz","handleQuizComplete","responses","question","_responses$index","_responses$index2","userAnswer","isCorrect","correct","saveQuizResults","restartQuiz","resetToMainScreen","_x","_readFileContent","_callee3","_callee3$","_context3","resolve","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","data","text","fileName","_x2","_x3","_generateQuestions","_callee4","count","maxRetries","retryCount","_response$data","remainingCount","strategy","prompt","response","responseText","newQuestions","uniqueNewQuestions","_error$response","_error$response2","_callee4$","_context4","post","VUE_APP_GEMINI_API_KEY","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","candidates","replace","setTimeout","newQ","some","existingQ","slice","t1","status","formatQuestionsForResults","_userResponses$value$","_userResponses$value$2","options","correctAnswer","explanation","formatUserAnswersForResults","r","correctAnswersCount","score","_selectedFiles$value$","quizResult","actualScore","date","Date","fileContent","_userResponses$value$3","_userResponses$value$4","difficulty","unshift","setItem","stringify","handleRetakeQuiz","_ref3","_callee2","quizToRetake","_callee2$","_context2","findIndex","toString","File","_x4","handleCreateQuiz","clearHistory","confirm","removeItem","handleQuizSelect","handleCreateQuizFromStats","handleQuestionsUpdate","updatedQuestions","commit"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <AccountButton />\n    <Sidebar \n      :quiz-history=\"quizHistory\" \n      @create-quiz=\"handleCreateQuiz\"\n      @retake-quiz=\"handleRetakeQuiz\"\n      @clear-history=\"clearHistory\"\n      @select-quiz=\"handleQuizSelect\"\n      @view-stats=\"showStats = true\"\n    />\n    <div class=\"main-content\">\n      <div v-if=\"showStats\" class=\"stats-view\">\n        <div class=\"stats-header-actions\">\n          <button class=\"back-btn\" @click=\"showStats = false\">\n            ← Back to Quiz\n          </button>\n          <button class=\"create-quiz-btn\" @click=\"handleCreateQuizFromStats\">\n            + Create New Quiz\n          </button>\n        </div>\n        <StudyStats :quiz-history=\"quizHistory\" />\n      </div>\n      \n      <div v-else class=\"upload-container\">\n        <h1>QUIZZy</h1>\n        \n        <div v-if=\"selectedQuiz\" class=\"quiz-details-container\">\n          <QuizHistoryDetails\n            :quiz=\"selectedQuiz\"\n            @retake-quiz=\"handleRetakeQuiz\"\n            @close=\"selectedQuiz = null\"\n          />\n        </div>\n\n        <div v-else-if=\"!quizStarted && !quizFinished\" class=\"file-upload-section\">\n          <h2>Upload Files</h2>\n          <div class=\"upload-area\" \n            @dragover.prevent \n            @drop.prevent=\"handleDrop\"\n            @click=\"triggerFileInput\"\n            role=\"button\"\n            tabindex=\"0\"\n            @keydown.enter=\"triggerFileInput\"\n          >\n            <input \n              type=\"file\" \n              @change=\"handleFileSelect\" \n              accept=\".pdf,.docx,.pptx,.txt\"\n              ref=\"fileInput\"\n              class=\"file-input\"\n            >\n            <div class=\"upload-prompt\">\n              <p>Drag and drop files here or click to select</p>\n              <div class=\"supported-formats\">\n                <p>Supported formats:</p>\n                <ul>\n                  <li><span class=\"format-icon\">📄</span> Documents (PDF, DOCX)</li>\n                  <li><span class=\"format-icon\">📊</span> Presentations (PPTX)</li>\n                  <li><span class=\"format-icon\">📝</span> Text files (TXT)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"hasFileErrors\" class=\"error-section\">\n            <FileErrorDisplay\n              :extraction-errors=\"extractionErrors\"\n              :unsupported-files=\"unsupportedFiles\"\n            />\n          </div>\n\n          <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n            <h3>Selected Files:</h3>\n            <ul>\n              <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n                <span class=\"file-name\">{{ file.name }}</span>\n                <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">×</button>\n              </li>\n            </ul>\n          </div>\n\n          <div class=\"questions-section\">\n            <h2>Number of Questions</h2>\n            <div class=\"question-input\">\n              <input\n                type=\"number\"\n                v-model=\"questionCount\"\n                min=\"1\"\n                max=\"20\"\n                placeholder=\"Enter number of questions\"\n              />\n            </div>\n          </div>\n\n          <button \n            class=\"submit-btn\" \n            :disabled=\"!isFormValid || isLoading\"\n            @click=\"handleSubmit\"\n          >\n            {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n          </button>\n        </div>\n\n        <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n          <div class=\"predicted-score-container\">\n            <h2>Ready to Start!</h2>\n            <div class=\"score-prediction\">\n              <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n                <span class=\"predicted-value\">{{ predictedScore }}%</span>\n                <span class=\"prediction-label\">Predicted Score</span>\n              </div>\n            </div>\n            <p class=\"prediction-explanation\">\n              Based on your study material, we predict you'll score around {{ predictedScore }}%.\n            </p>\n            <button class=\"start-quiz-btn\" @click=\"startQuiz\">Start Quiz</button>\n          </div>\n        </div>\n\n        <FlashcardQuiz\n          v-if=\"quizStarted && !quizFinished\"\n          :questions=\"adaptiveQuestions\"\n          :total-questions=\"Number(questionCount)\"\n          @quiz-completed=\"handleQuizComplete\"\n        />\n\n        <QuizResults\n          v-if=\"quizFinished\"\n          :questions=\"formatQuestionsForResults\"\n          :user-answers=\"formatUserAnswersForResults\"\n          :score=\"correctAnswersCount\"\n          :predicted-score=\"predictedScore\"\n          @restart=\"restartQuiz\"\n          @go-back=\"resetToMainScreen\"\n        />\n\n        <div v-if=\"error\" class=\"error-message\">\n          {{ error }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading Overlay -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <div class=\"loading-content\">\n        <div class=\"typewriter\">Generating quiz</div>\n        <div class=\"dots\">\n          <span>.</span>\n          <span>.</span>\n          <span>.</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Spaced Review Session Modal -->\n    <div v-if=\"showReviewSession\" class=\"modal-overlay\">\n      <div class=\"modal-content\">\n        <SpacedReviewSession\n          :questions=\"allQuestions\"\n          @close=\"showReviewSession = false\"\n          @update-questions=\"handleQuestionsUpdate\"\n        />\n      </div>\n    </div>\n\n    <nav class=\"main-nav\">\n      <router-link to=\"/\" class=\"nav-link\">Dashboard</router-link>\n      <router-link to=\"/quizzes\" class=\"nav-link\">Quizzes</router-link>\n      <router-link to=\"/create\" class=\"nav-link\">Create Quiz</router-link>\n      <div v-if=\"dueCount > 0\" class=\"review-button\" @click=\"showReviewSession = true\">\n        {{ dueCount }} Due for Review\n      </div>\n    </nav>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport QuizHistoryDetails from './components/QuizHistoryDetails.vue';\nimport AccountButton from './components/AccountButton.vue';\nimport StudyStats from './components/StudyStats.vue';\nimport { \n  calculatePredictedScore,\n  calculateScore,\n  processQuizResponse,\n  isSimilarQuestion\n} from './algorithms';\nimport SpacedReviewSession from './components/SpacedReviewSession.vue';\nimport { getDueQuestions } from './algorithms/spaced-repetition';\nimport { useStore } from 'vuex';\n\nconst store = useStore();\n\n// File handling state\nconst selectedFiles = ref([]);\nconst fileInput = ref(null);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\n\n// Quiz state\nconst questionCount = ref('');\nconst isLoading = ref(false);\nconst error = ref('');\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst quizFinished = ref(false);\nconst adaptiveQuestions = ref([]);\nconst userResponses = ref([]);\nconst extractedContent = ref('');\nconst selectedQuiz = ref(null);\n\n// Add quiz history state\nconst quizHistory = ref([]);\n\n// Add isRetaking flag to track retakes\nconst isRetaking = ref(false);\nconst retakeIndex = ref(-1);\n\n// Stats view state\nconst showStats = ref(false);\n\n// Spaced Review Session state\nconst showReviewSession = ref(false);\n\n// Load quiz history from localStorage on mount\nonMounted(() => {\n  const savedHistory = localStorage.getItem('quizHistory');\n  if (savedHistory) {\n    quizHistory.value = JSON.parse(savedHistory);\n  }\n});\n\n// Computed properties\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n\n// Get all questions from all quizzes\nconst allQuestions = computed(() => {\n  return store.state.quizzes.flatMap(quiz => \n    quiz.questions.map(q => ({\n      ...q,\n      quizId: quiz.id,\n      quizTitle: quiz.title\n    }))\n  );\n});\n\n// Calculate number of due questions\nconst dueCount = computed(() => {\n  return getDueQuestions(allQuestions.value).length;\n});\n\n// File handling methods\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\n// Quiz handling methods\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  userResponses.value = [];\n  extractedContent.value = '';\n  extractionErrors.value = [];\n\n  try {\n    console.log('Processing files:', selectedFiles.value.map(f => ({ name: f.name, type: f.type })));\n    \n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    const validContents = fileContents.filter(content => content && content.trim().length > 0);\n    console.log('Number of files with valid content:', validContents.length);\n    \n    if (validContents.length === 0) {\n      throw new Error('No valid content could be extracted from the selected files.');\n    }\n\n    extractedContent.value = validContents.join('\\n\\n');\n    console.log('Total content length:', extractedContent.value.length);\n    \n    if (extractedContent.value.trim().length < 50) {\n      throw new Error('The extracted content is too short to generate meaningful questions.');\n    }\n\n    const requestedQuestionCount = Number(questionCount.value);\n    console.log('Requesting questions:', requestedQuestionCount);\n    \n    const questions = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    \n    if (!questions || questions.length === 0) {\n      throw new Error('No valid questions could be generated.');\n    }\n\n    console.log('Generated questions:', questions.length);\n    adaptiveQuestions.value = questions;\n    predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n\n  } catch (err) {\n    console.error('Error in handleSubmit:', err);\n    error.value = err.message || 'An unexpected error occurred while generating questions.';\n    adaptiveQuestions.value = [];\n    predictedScore.value = null;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n};\n\nconst handleQuizComplete = (responses) => {\n  userResponses.value = responses;\n  // Update the adaptiveQuestions with user answers\n  adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => ({\n    ...question,\n    userAnswer: responses[index]?.userAnswer,\n    isCorrect: responses[index]?.correct\n  }));\n  quizFinished.value = true;\n  saveQuizResults();\n};\n\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  userResponses.value = [];\n};\n\nconst resetToMainScreen = () => {\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\n// Helper functions\nasync function readFileContent(file) {\n  return new Promise((resolve) => {\n    try {\n      console.log('File type:', file.type);\n      console.log('File name:', file.name);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n          resolve('');\n          }\n        })\n      .catch(error => {\n        console.error('Error processing file:', error);\n          extractionErrors.value.push({\n            fileName: file.name,\n          message: `Error processing file: ${error.message}`\n        });\n        resolve('');\n      });\n    } catch (error) {\n      console.error('Error preparing file:', error);\n        extractionErrors.value.push({\n          fileName: file.name,\n        message: `Error preparing file: ${error.message}`\n      });\n      resolve('');\n    }\n  });\n}\n\nasync function generateQuestions(content, count) {\n  const maxRetries = 3;\n  let retryCount = 0;\n  let allQuestions = [];\n\n  while (retryCount < maxRetries && allQuestions.length < count) {\n    try {\n      const remainingCount = count - allQuestions.length;\n      const strategy = retryCount % 3;\n      let prompt = `Generate exactly ${remainingCount} questions. DO NOT use markdown formatting or asterisks for emphasis.\nFOLLOW THIS EXACT FORMAT WITH NO DEVIATIONS:\n\nFor Multiple Choice Questions:\nQuestion: What is the question text?\nA) First option\nB) Second option\nC) Third option\nD) Fourth option\nAnswer: A* (or B*, C*, D* - add asterisk to correct answer)\nDifficulty: easy (or medium or hard)\n\nFor True/False Questions:\nTrue/False: What is the question text?\nAnswer: True* (or False* - add asterisk to correct answer)\nDifficulty: easy (or medium or hard)\n\nREQUIREMENTS:\n1. Use the exact format shown above\n2. Do not add any extra formatting or text\n3. Do not use markdown\n4. Do not use bold or italics\n5. Each question must end with a difficulty level\n6. Questions must be based on this content:\n\n${content}\n\nSTRATEGY: `;\n\n      switch (strategy) {\n        case 0:\n          prompt += 'Create a mix of multiple-choice and true/false questions that directly test understanding of the content.';\n          break;\n        case 1:\n          prompt += 'Create questions that focus on what is NOT mentioned or opposite relationships in the content.';\n          break;\n        case 2:\n          prompt += 'Create questions that test application and inference of the concepts mentioned in the content.';\n          break;\n      }\n\n  const response = await axios.post(\n    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n    {\n      contents: [{\n        parts: [{\n          text: prompt\n        }]\n      }],\n      generationConfig: {\n            temperature: 0.7 + (retryCount * 0.1),\n        topK: 40,\n        topP: 0.95,\n        maxOutputTokens: 2048,\n      }\n    },\n    {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n\n      if (!response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {\n        throw new Error('Invalid response format from Gemini API');\n      }\n\n      const responseText = response.data.candidates[0].content.parts[0].text\n        .replace(/\\*\\*/g, '') // Remove markdown bold\n        .replace(/\\*/g, '*')  // Normalize asterisks\n        .replace(/[\"\"]/g, '\"'); // Normalize quotes\n\n      console.log('Generated response:', responseText);\n\n      const newQuestions = processQuizResponse(responseText, content).questions;\n      \n      if (newQuestions.length === 0) {\n        console.error('No valid questions parsed from response');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        continue;\n      }\n\n      const uniqueNewQuestions = newQuestions.filter(newQ => \n        !allQuestions.some(existingQ => isSimilarQuestion(newQ, existingQ))\n      );\n\n      allQuestions = [...allQuestions, ...uniqueNewQuestions];\n      \n      if (allQuestions.length >= count) {\n        return allQuestions.slice(0, count);\n      }\n\n      retryCount++;\n\n    } catch (error) {\n      console.error(`Attempt ${retryCount + 1} failed:`, error);\n      retryCount++;\n      \n      if (error.response?.status === 429) {\n        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n      } else if (retryCount === maxRetries) {\n        throw new Error(`Failed to generate enough unique questions after ${maxRetries} attempts. ${error.response?.data?.error?.message || error.message}`);\n  } else {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  if (allQuestions.length < count) {\n    throw new Error(`Could only generate ${allQuestions.length} unique questions out of ${count} requested. Please try with different content or reduce the number of questions.`);\n  }\n\n  return allQuestions;\n}\n\n// Results formatting\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    options: q.options,\n    userAnswer: userResponses.value[index]?.userAnswer,\n    correctAnswer: q.correctAnswer,\n    explanation: q.explanation,\n    isCorrect: userResponses.value[index]?.correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update the calculateScore function\nconst score = computed(() => {\n  return calculateScore(userResponses.value);\n});\n\n// Update the saveQuizResults function to remove timing data\nconst saveQuizResults = () => {\n  const quizResult = {\n    fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n    questionCount: Number(questionCount.value),\n    predictedScore: predictedScore.value,\n    actualScore: score.value,\n    date: new Date(),\n    fileContent: extractedContent.value,\n    questions: adaptiveQuestions.value.map((q, index) => ({\n      text: q.text,\n      type: q.type,\n      options: q.options,\n      userAnswer: userResponses.value[index]?.userAnswer,\n      correctAnswer: q.correctAnswer,\n      isCorrect: userResponses.value[index]?.correct,\n      explanation: q.explanation,\n      difficulty: q.difficulty\n    }))\n  };\n  \n  if (isRetaking.value && retakeIndex.value !== -1) {\n    quizHistory.value[retakeIndex.value] = {\n      ...quizHistory.value[retakeIndex.value],\n      actualScore: quizResult.actualScore,\n      date: quizResult.date,\n      questions: quizResult.questions\n    };\n  } else {\n    quizHistory.value.unshift(quizResult);\n  }\n  \n  localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n  \n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Update the handleRetakeQuiz function to set retake flags\nconst handleRetakeQuiz = async (quizToRetake) => {\n  // Find the index of the quiz being retaken\n  retakeIndex.value = quizHistory.value.findIndex(quiz => \n    quiz.fileName === quizToRetake.fileName && \n    quiz.questionCount === quizToRetake.questionCount &&\n    quiz.fileContent === quizToRetake.fileContent\n  );\n  \n  if (retakeIndex.value === -1) {\n    console.error('Could not find original quiz to retake');\n    return;\n  }\n  \n  isRetaking.value = true;\n  \n  // Reset quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  selectedQuiz.value = null;  // Reset selected quiz\n  \n  // Set the question count from the previous quiz\n  questionCount.value = quizToRetake.questionCount.toString();\n  \n  // Create a dummy file with the same name\n  const file = new File([''], quizToRetake.fileName, {\n    type: 'text/plain'\n  });\n  \n  // Set the selected file and content\n  selectedFiles.value = [file];\n  extractedContent.value = quizToRetake.fileContent;\n  \n  // Generate new quiz using the stored content\n  try {\n    isLoading.value = true;\n    const requestedQuestionCount = Number(questionCount.value);\n    \n    const questions = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    if (!questions || questions.length === 0) {\n      throw new Error('No valid questions could be generated.');\n    }\n    \n    adaptiveQuestions.value = questions;\n    predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n    \n    // After generating questions, start the quiz\n    quizStarted.value = true;\n  } catch (err) {\n    error.value = `Error generating questions: ${err.message}`;\n    // Reset retake flags on error\n    isRetaking.value = false;\n    retakeIndex.value = -1;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Update handleCreateQuiz to reset retake flags\nconst handleCreateQuiz = () => {\n  showStats.value = false;\n  selectedQuiz.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  selectedFiles.value = [];\n  questionCount.value = '';\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Add the clearHistory function\nconst clearHistory = () => {\n  if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n    quizHistory.value = [];\n    localStorage.removeItem('quizHistory');\n  }\n};\n\n// Add function to handle quiz selection\nconst handleQuizSelect = (quiz) => {\n  if (showStats.value) {\n    showStats.value = false;\n    // Add small delay to ensure smooth transition\n    setTimeout(() => {\n      selectedQuiz.value = quiz;\n    }, 100);\n  } else {\n    selectedQuiz.value = quiz;\n  }\n};\n\n// Add new method to handle create quiz from stats view\nconst handleCreateQuizFromStats = () => {\n  showStats.value = false;\n  handleCreateQuiz();\n};\n\n// Handle questions update from spaced review session\nconst handleQuestionsUpdate = (updatedQuestions) => {\n  store.commit('updateQuestions', updatedQuestions);\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px; /* Same as sidebar width */\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: #f5f5f5;\n  overflow-y: auto;\n}\n\n.upload-container {\n  width: 90%;\n  max-width: 800px;\n  margin: 0 auto;\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.85);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(2px);\n}\n\n.loading-content {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 2rem;\n  color: #333;\n  font-weight: 500;\n}\n\n.typewriter {\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(14) infinite;\n  border-right: 3px solid #4CAF50;\n}\n\n.dots {\n  display: flex;\n}\n\n.dots span {\n  opacity: 0;\n  animation: dot 1.5s infinite;\n  animation-fill-mode: both;\n}\n\n.dots span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.dots span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0%, 90%, 100% {\n    width: 0;\n  }\n  30%, 60% {\n    width: 14ch;\n  }\n}\n\n@keyframes dot {\n  0%, 100% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n\n.quiz-details-container {\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n  position: relative;\n}\n\n.review-reminder {\n  margin-bottom: 2rem;\n  text-align: center;\n}\n\n.review-btn {\n  background: #2196F3;\n  color: white;\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1.1rem;\n  transition: background-color 0.2s;\n}\n\n.review-btn:hover {\n  background: #1976D2;\n}\n\n.stats-view {\n  width: 90%;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.back-btn {\n  margin-bottom: 1rem;\n  padding: 0.5rem 1rem;\n  background: none;\n  border: none;\n  color: #666;\n  cursor: pointer;\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  transition: color 0.2s;\n}\n\n.back-btn:hover {\n  color: #2196F3;\n}\n\n.stats-header-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.create-quiz-btn {\n  padding: 0.5rem 1.5rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  transition: all 0.2s;\n}\n\n.create-quiz-btn:hover {\n  background-color: #45a049;\n  transform: translateY(-1px);\n}\n\n.review-button {\n  background: #2196F3;\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: background 0.2s;\n}\n\n.review-button:hover {\n  background: #1976D2;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background: white;\n  border-radius: 12px;\n  width: 100%;\n  max-width: 900px;\n  max-height: 90vh;\n  overflow-y: auto;\n}\n\n.main-nav {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.nav-link {\n  text-decoration: none;\n  color: #333;\n  padding: 0.5rem 1rem;\n  transition: color 0.2s;\n}\n\n.nav-link:hover {\n  color: #2196F3;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}