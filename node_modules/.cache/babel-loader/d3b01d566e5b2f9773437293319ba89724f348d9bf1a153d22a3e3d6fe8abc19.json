{"ast":null,"code":"import { ref, computed } from 'vue';\nimport axios from 'axios';\nimport QuestionsDisplay from './components/QuestionsDisplay.vue';\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedFiles = ref([]);\n    const questionCount = ref('');\n    const fileInput = ref(null);\n    const generatedQuestions = ref([]);\n    const isLoading = ref(false);\n    const error = ref('');\n    const showQuestions = ref(false);\n    const isFormValid = computed(() => {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    const handleFileSelect = event => {\n      const files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    const handleDrop = event => {\n      const files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    const addFiles = files => {\n      const validFiles = files.filter(file => {\n        const validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf'];\n        return validTypes.includes(file.type);\n      });\n      selectedFiles.value = [...selectedFiles.value, ...validFiles];\n    };\n    const removeFile = index => {\n      selectedFiles.value.splice(index, 1);\n    };\n    const readFileContent = file => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result);\n        reader.onerror = e => reject(e);\n        reader.readAsText(file);\n      });\n    };\n    const handleSubmit = async () => {\n      if (!isFormValid.value) return;\n      isLoading.value = true;\n      error.value = '';\n      generatedQuestions.value = [];\n      try {\n        // Read all file contents\n        const fileContents = await Promise.all(selectedFiles.value.map(file => readFileContent(file)));\n\n        // Combine all file contents\n        const combinedContent = fileContents.join('\\n\\n');\n\n        // Prepare the prompt for Gemini\n        const prompt = `Based on the following content, generate ${questionCount.value} relevant questions. \n    The questions should test understanding of the key concepts and details in the content.\n    Format each question on a new line starting with a number and period (e.g., \"1. What is...\")\n    Content: ${combinedContent}`;\n\n        // Call Gemini API\n        const response = await axios.post('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent', {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024\n          }\n        }, {\n          headers: {\n            'Content-Type': 'application/json',\n            'x-goog-api-key': process.env.VUE_APP_GEMINI_API_KEY\n          }\n        });\n\n        // Extract questions from the response\n        const generatedText = response.data.candidates[0].content.parts[0].text;\n        const questions = generatedText.split('\\n').filter(line => line.trim().length > 0 && (line.startsWith('1.') || line.startsWith('2.') || line.startsWith('3.') || line.startsWith('4.') || line.startsWith('5.'))).map(q => q.replace(/^\\d+\\.\\s*/, '').trim());\n        generatedQuestions.value = questions;\n        showQuestions.value = true;\n      } catch (err) {\n        error.value = 'Error generating questions. Please try again.';\n        console.error('Error:', err);\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const handleAnswersSubmit = answers => {\n      console.log('Submitted answers:', answers);\n      // Here you can handle the submitted answers, e.g., send them to a server\n      alert('Answers submitted successfully!');\n    };\n    const __returned__ = {\n      selectedFiles,\n      questionCount,\n      fileInput,\n      generatedQuestions,\n      isLoading,\n      error,\n      showQuestions,\n      isFormValid,\n      handleFileSelect,\n      handleDrop,\n      addFiles,\n      removeFile,\n      readFileContent,\n      handleSubmit,\n      handleAnswersSubmit,\n      ref,\n      computed,\n      get axios() {\n        return axios;\n      },\n      QuestionsDisplay\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","axios","QuestionsDisplay","selectedFiles","questionCount","fileInput","generatedQuestions","isLoading","error","showQuestions","isFormValid","value","length","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validFiles","filter","file","validTypes","includes","type","removeFile","index","splice","readFileContent","Promise","resolve","reject","reader","FileReader","onload","e","result","onerror","readAsText","handleSubmit","fileContents","all","map","combinedContent","join","prompt","response","post","contents","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","headers","process","env","VUE_APP_GEMINI_API_KEY","generatedText","data","candidates","content","questions","split","line","trim","startsWith","q","replace","err","console","handleAnswersSubmit","answers","log","alert"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"upload-container\">\r\n      <h1>File Upload and Questions</h1>\r\n      \r\n      <div v-if=\"!showQuestions\" class=\"file-upload-section\">\r\n        <h2>Upload Files</h2>\r\n        <div class=\"upload-area\" @dragover.prevent @drop.prevent=\"handleDrop\">\r\n          <input\r\n            type=\"file\"\r\n            multiple\r\n            accept=\".doc,.docx,.ppt,.pptx,.txt,.pdf\"\r\n            @change=\"handleFileSelect\"\r\n            ref=\"fileInput\"\r\n            class=\"file-input\"\r\n          />\r\n          <div class=\"upload-prompt\">\r\n            <p>Drag and drop files here or click to select</p>\r\n            <p>Supported formats: DOC, DOCX, PPT, PPTX, TXT, PDF</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\r\n          <h3>Selected Files:</h3>\r\n          <ul>\r\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\">\r\n              {{ file.name }}\r\n              <button @click=\"removeFile(index)\" class=\"remove-btn\">Ã—</button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"questions-section\">\r\n          <h2>Number of Questions</h2>\r\n          <div class=\"question-input\">\r\n            <input\r\n              type=\"number\"\r\n              v-model=\"questionCount\"\r\n              min=\"1\"\r\n              max=\"20\"\r\n              placeholder=\"Enter number of questions\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          class=\"submit-btn\" \r\n          :disabled=\"!isFormValid || isLoading\"\r\n          @click=\"handleSubmit\"\r\n        >\r\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\r\n        </button>\r\n      </div>\r\n\r\n      <QuestionsDisplay\r\n        v-else\r\n        :questions=\"generatedQuestions\"\r\n        @submit-answers=\"handleAnswersSubmit\"\r\n      />\r\n\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        {{ error }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport axios from 'axios';\r\nimport QuestionsDisplay from './components/QuestionsDisplay.vue';\r\n\r\nconst selectedFiles = ref([]);\r\nconst questionCount = ref('');\r\nconst fileInput = ref(null);\r\nconst generatedQuestions = ref([]);\r\nconst isLoading = ref(false);\r\nconst error = ref('');\r\nconst showQuestions = ref(false);\r\n\r\nconst isFormValid = computed(() => {\r\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\r\n});\r\n\r\nconst handleFileSelect = (event) => {\r\n  const files = Array.from(event.target.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst handleDrop = (event) => {\r\n  const files = Array.from(event.dataTransfer.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst addFiles = (files) => {\r\n  const validFiles = files.filter(file => {\r\n    const validTypes = [\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      'application/vnd.ms-powerpoint',\r\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n      'text/plain',\r\n      'application/pdf'\r\n    ];\r\n    return validTypes.includes(file.type);\r\n  });\r\n  \r\n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\r\n};\r\n\r\nconst removeFile = (index) => {\r\n  selectedFiles.value.splice(index, 1);\r\n};\r\n\r\nconst readFileContent = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => resolve(e.target.result);\r\n    reader.onerror = (e) => reject(e);\r\n    reader.readAsText(file);\r\n  });\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  if (!isFormValid.value) return;\r\n\r\n  isLoading.value = true;\r\n  error.value = '';\r\n  generatedQuestions.value = [];\r\n\r\n  try {\r\n    // Read all file contents\r\n    const fileContents = await Promise.all(\r\n      selectedFiles.value.map(file => readFileContent(file))\r\n    );\r\n\r\n    // Combine all file contents\r\n    const combinedContent = fileContents.join('\\n\\n');\r\n\r\n    // Prepare the prompt for Gemini\r\n    const prompt = `Based on the following content, generate ${questionCount.value} relevant questions. \r\n    The questions should test understanding of the key concepts and details in the content.\r\n    Format each question on a new line starting with a number and period (e.g., \"1. What is...\")\r\n    Content: ${combinedContent}`;\r\n\r\n    // Call Gemini API\r\n    const response = await axios.post(\r\n      'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-goog-api-key': process.env.VUE_APP_GEMINI_API_KEY\r\n        }\r\n      }\r\n    );\r\n\r\n    // Extract questions from the response\r\n    const generatedText = response.data.candidates[0].content.parts[0].text;\r\n    const questions = generatedText.split('\\n')\r\n      .filter(line => line.trim().length > 0 && (line.startsWith('1.') || line.startsWith('2.') || line.startsWith('3.') || line.startsWith('4.') || line.startsWith('5.')))\r\n      .map(q => q.replace(/^\\d+\\.\\s*/, '').trim());\r\n\r\n    generatedQuestions.value = questions;\r\n    showQuestions.value = true;\r\n  } catch (err) {\r\n    error.value = 'Error generating questions. Please try again.';\r\n    console.error('Error:', err);\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n\r\nconst handleAnswersSubmit = (answers) => {\r\n  console.log('Submitted answers:', answers);\r\n  // Here you can handle the submitted answers, e.g., send them to a server\r\n  alert('Answers submitted successfully!');\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.upload-container {\r\n  background-color: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  width: 90%;\r\n  max-width: 600px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\nh2 {\r\n  color: #444;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-area {\r\n  border: 2px dashed #ccc;\r\n  border-radius: 4px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: border-color 0.3s;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-area:hover {\r\n  border-color: #666;\r\n}\r\n\r\n.file-input {\r\n  display: none;\r\n}\r\n\r\n.upload-prompt {\r\n  color: #666;\r\n}\r\n\r\n.selected-files {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.selected-files ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.selected-files li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.remove-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.questions-section {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.question-input input {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.submit-btn {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.submit-btn:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.questions-list {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.question-item {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.error-message {\r\n  color: #ff4444;\r\n  margin-top: 1rem;\r\n  text-align: center;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}