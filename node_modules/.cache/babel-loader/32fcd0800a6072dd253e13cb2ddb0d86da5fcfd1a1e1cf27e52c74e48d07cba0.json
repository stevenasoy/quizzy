{"ast":null,"code":"import { createElementVNode as _createElementVNode, withModifiers as _withModifiers, withKeys as _withKeys, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, createBlock as _createBlock, vModelRadio as _vModelRadio, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"upload-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"file-upload-section\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"selected-files\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"questions-section\"\n};\nconst _hoisted_7 = {\n  class: \"question-input\"\n};\nconst _hoisted_8 = [\"disabled\"];\nconst _hoisted_9 = {\n  key: 2,\n  class: \"error-message\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"quiz-container\"\n};\nconst _hoisted_11 = {\n  class: \"options\"\n};\nconst _hoisted_12 = [\"id\", \"name\", \"value\", \"onUpdate:modelValue\"];\nconst _hoisted_13 = [\"for\"];\nconst _hoisted_14 = {\n  key: 1,\n  class: \"option\"\n};\nconst _hoisted_15 = [\"id\", \"name\", \"onUpdate:modelValue\"];\nconst _hoisted_16 = [\"for\"];\nconst _hoisted_17 = [\"id\", \"name\", \"onUpdate:modelValue\"];\nconst _hoisted_18 = [\"for\"];\nconst _hoisted_19 = {\n  key: 0,\n  class: \"feedback\"\n};\nconst _hoisted_20 = {\n  class: \"explanation\"\n};\nconst _hoisted_21 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[6] || (_cache[6] = _createElementVNode(\"h1\", null, \"QUIZZy\", -1 /* HOISTED */)), !$setup.showQuestions ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Upload Files\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"upload-area\",\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleDrop, [\"prevent\"]),\n    onClick: $setup.triggerFileInput,\n    role: \"button\",\n    tabindex: \"0\",\n    onKeydown: _withKeys($setup.triggerFileInput, [\"enter\"])\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: $setup.handleFileSelect,\n    accept: \".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\",\n    ref: \"fileInput\",\n    class: \"file-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _cache[2] || (_cache[2] = _createElementVNode(\"div\", {\n    class: \"upload-prompt\"\n  }, [_createElementVNode(\"p\", null, \"Drag and drop files here or click to select\"), _createElementVNode(\"p\", null, \"Supported formats: PDF, DOCX, PPTX, TXT\")], -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), $setup.selectedFiles.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Selected Files:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedFiles, (file, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createTextVNode(_toDisplayString(file.name) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.removeFile(index),\n      class: \"remove-btn\"\n    }, \"Ã—\", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_6, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", null, \"Number of Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_7, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.questionCount = $event),\n    min: \"1\",\n    max: \"20\",\n    placeholder: \"Enter number of questions\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.questionCount]])])]), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    disabled: !$setup.isFormValid || $setup.isLoading,\n    onClick: $setup.handleSubmit\n  }, _toDisplayString($setup.isLoading ? 'Generating Questions...' : 'Submit'), 9 /* TEXT, PROPS */, _hoisted_8)])) : (_openBlock(), _createBlock($setup[\"FlashcardQuiz\"], {\n    key: 1,\n    questions: $setup.flashcardQuestions,\n    onGoBack: $setup.resetToMainScreen\n  }, null, 8 /* PROPS */, [\"questions\"])), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $setup.quiz ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Generated Quiz\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.quiz.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"question\"\n    }, [_createElementVNode(\"h3\", null, \"Question \" + _toDisplayString(index + 1) + \": \" + _toDisplayString(question.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_11, [question.type === 'multiple-choice' ? (_openBlock(true), _createElementBlock(_Fragment, {\n      key: 0\n    }, _renderList(question.options, (option, letter) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: letter,\n        class: \"option\"\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"radio\",\n        id: `q${index}-${letter}`,\n        name: `question${index}`,\n        value: letter,\n        \"onUpdate:modelValue\": $event => $setup.userAnswers[index] = $event\n      }, null, 8 /* PROPS */, _hoisted_12), [[_vModelRadio, $setup.userAnswers[index]]]), _createElementVNode(\"label\", {\n        for: `q${index}-${letter}`\n      }, _toDisplayString(letter) + \") \" + _toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_13)]);\n    }), 128 /* KEYED_FRAGMENT */)) : question.type === 'true-false' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"radio\",\n      id: `q${index}-true`,\n      name: `question${index}`,\n      value: \"true\",\n      \"onUpdate:modelValue\": $event => $setup.userAnswers[index] = $event\n    }, null, 8 /* PROPS */, _hoisted_15), [[_vModelRadio, $setup.userAnswers[index]]]), _createElementVNode(\"label\", {\n      for: `q${index}-true`\n    }, \"True\", 8 /* PROPS */, _hoisted_16), _withDirectives(_createElementVNode(\"input\", {\n      type: \"radio\",\n      id: `q${index}-false`,\n      name: `question${index}`,\n      value: \"false\",\n      \"onUpdate:modelValue\": $event => $setup.userAnswers[index] = $event\n    }, null, 8 /* PROPS */, _hoisted_17), [[_vModelRadio, $setup.userAnswers[index]]]), _createElementVNode(\"label\", {\n      for: `q${index}-false`\n    }, \"False\", 8 /* PROPS */, _hoisted_18)])) : _createCommentVNode(\"v-if\", true)]), $setup.showAnswers && $setup.userAnswers[index] ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [_createElementVNode(\"p\", {\n      class: _normalizeClass({\n        'correct': $setup.userAnswers[index] === question.correctAnswer,\n        'incorrect': $setup.userAnswers[index] !== question.correctAnswer\n      })\n    }, _toDisplayString($setup.userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!'), 3 /* TEXT, CLASS */), _createElementVNode(\"p\", _hoisted_20, _toDisplayString(question.explanation), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: $setup.checkAnswers,\n    disabled: !$setup.allQuestionsAnswered\n  }, \"Check Answers\", 8 /* PROPS */, _hoisted_21)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$setup","showQuestions","_hoisted_3","onDragover","_cache","_withModifiers","onDrop","handleDrop","onClick","triggerFileInput","role","tabindex","onKeydown","_withKeys","type","onChange","handleFileSelect","accept","ref","selectedFiles","length","_hoisted_4","_Fragment","_renderList","file","index","_createTextVNode","_toDisplayString","name","$event","removeFile","_hoisted_5","_createCommentVNode","_hoisted_6","_hoisted_7","questionCount","min","max","placeholder","disabled","isFormValid","isLoading","handleSubmit","_hoisted_8","_createBlock","questions","flashcardQuestions","onGoBack","resetToMainScreen","error","_hoisted_9","quiz","_hoisted_10","question","text","_hoisted_11","options","option","letter","id","value","userAnswers","_hoisted_12","for","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","showAnswers","_hoisted_19","_normalizeClass","correctAnswer","_hoisted_20","explanation","checkAnswers","allQuestionsAnswered","_hoisted_21"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"upload-container\">\r\n      <h1>QUIZZy</h1>\r\n      \r\n      <div v-if=\"!showQuestions\" class=\"file-upload-section\">\r\n        <h2>Upload Files</h2>\r\n        <div class=\"upload-area\" \r\n          @dragover.prevent \r\n          @drop.prevent=\"handleDrop\"\r\n          @click=\"triggerFileInput\"\r\n          role=\"button\"\r\n          tabindex=\"0\"\r\n          @keydown.enter=\"triggerFileInput\"\r\n        >\r\n          <input \r\n            type=\"file\" \r\n            @change=\"handleFileSelect\" \r\n            accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\r\n            ref=\"fileInput\"\r\n            class=\"file-input\"\r\n          >\r\n          <div class=\"upload-prompt\">\r\n            <p>Drag and drop files here or click to select</p>\r\n            <p>Supported formats: PDF, DOCX, PPTX, TXT</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\r\n          <h3>Selected Files:</h3>\r\n          <ul>\r\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\">\r\n              {{ file.name }}\r\n              <button @click=\"removeFile(index)\" class=\"remove-btn\">Ã—</button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"questions-section\">\r\n          <h2>Number of Questions</h2>\r\n          <div class=\"question-input\">\r\n            <input\r\n              type=\"number\"\r\n              v-model=\"questionCount\"\r\n              min=\"1\"\r\n              max=\"20\"\r\n              placeholder=\"Enter number of questions\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          class=\"submit-btn\" \r\n          :disabled=\"!isFormValid || isLoading\"\r\n          @click=\"handleSubmit\"\r\n        >\r\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\r\n        </button>\r\n      </div>\r\n\r\n      <FlashcardQuiz\r\n        v-else\r\n        :questions=\"flashcardQuestions\"\r\n        @go-back=\"resetToMainScreen\"\r\n      />\r\n\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        {{ error }}\r\n      </div>\r\n    </div>\r\n\r\n    <template v-if=\"quiz\">\r\n      <div class=\"quiz-container\">\r\n        <h2>Generated Quiz</h2>\r\n        <template v-for=\"(question, index) in quiz.questions\" :key=\"index\">\r\n          <div class=\"question\">\r\n            <h3>Question {{ index + 1 }}: {{ question.text }}</h3>\r\n            <div class=\"options\">\r\n              <template v-if=\"question.type === 'multiple-choice'\">\r\n                <div v-for=\"(option, letter) in question.options\" :key=\"letter\" class=\"option\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    :id=\"`q${index}-${letter}`\"\r\n                    :name=\"`question${index}`\"\r\n                    :value=\"letter\"\r\n                    v-model=\"userAnswers[index]\"\r\n                  />\r\n                  <label :for=\"`q${index}-${letter}`\">{{ letter }}) {{ option }}</label>\r\n                </div>\r\n              </template>\r\n              <template v-else-if=\"question.type === 'true-false'\">\r\n                <div class=\"option\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    :id=\"`q${index}-true`\"\r\n                    :name=\"`question${index}`\"\r\n                    value=\"true\"\r\n                    v-model=\"userAnswers[index]\"\r\n                  />\r\n                  <label :for=\"`q${index}-true`\">True</label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    :id=\"`q${index}-false`\"\r\n                    :name=\"`question${index}`\"\r\n                    value=\"false\"\r\n                    v-model=\"userAnswers[index]\"\r\n                  />\r\n                  <label :for=\"`q${index}-false`\">False</label>\r\n                </div>\r\n              </template>\r\n            </div>\r\n            <div v-if=\"showAnswers && userAnswers[index]\" class=\"feedback\">\r\n              <p :class=\"{ 'correct': userAnswers[index] === question.correctAnswer, 'incorrect': userAnswers[index] !== question.correctAnswer }\">\r\n                {{ userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!' }}\r\n              </p>\r\n              <p class=\"explanation\">{{ question.explanation }}</p>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <button @click=\"checkAnswers\" :disabled=\"!allQuestionsAnswered\">Check Answers</button>\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport axios from 'axios';\r\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\r\n\r\nconst selectedFiles = ref([]);\r\nconst questionCount = ref('');\r\nconst fileInput = ref(null);\r\nconst generatedQuestions = ref([]);\r\nconst isLoading = ref(false);\r\nconst error = ref('');\r\nconst showQuestions = ref(false);\r\nconst flashcardQuestions = ref([]);\r\nconst quiz = ref(null);\r\nconst userAnswers = ref([]);\r\nconst showAnswers = ref(false);\r\n\r\nconst isFormValid = computed(() => {\r\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\r\n});\r\n\r\nconst triggerFileInput = () => {\r\n  fileInput.value.click();\r\n};\r\n\r\nconst handleFileSelect = (event) => {\r\n  const files = Array.from(event.target.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst handleDrop = (event) => {\r\n  const files = Array.from(event.dataTransfer.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst addFiles = (files) => {\r\n  const validFiles = files.filter(file => {\r\n    const validTypes = [\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      'application/vnd.ms-powerpoint',\r\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n      'text/plain',\r\n      'application/pdf',\r\n      'image/png',\r\n      'image/jpeg',\r\n      'image/jpg',\r\n      'image/tiff',\r\n      'image/bmp'\r\n    ];\r\n    return validTypes.includes(file.type);\r\n  });\r\n  \r\n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\r\n};\r\n\r\nconst removeFile = (index) => {\r\n  selectedFiles.value.splice(index, 1);\r\n};\r\n\r\nconst readFileContent = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (\r\n      file.type === \"application/pdf\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\r\n      file.type.startsWith('image/')\r\n    ) {\r\n      // PDF, PPTX, DOCX, or Image - send to backend for extraction\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      // Use the correct backend URL\r\n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\r\n      fetch(`${backendUrl}/extract-file`, {\r\n        method: 'POST',\r\n        body: formData\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.text) resolve(data.text);\r\n          else resolve(\"[Could not extract file text]\");\r\n        })\r\n        .catch(() => resolve(\"[Could not extract file text]\"));\r\n    } else if (file.type === \"text/plain\") {\r\n      // Plain text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    } else {\r\n      resolve(`[${file.name} is not a supported file type.]`);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  if (!isFormValid.value) return;\r\n\r\n  isLoading.value = true;\r\n  error.value = '';\r\n  generatedQuestions.value = [];\r\n  flashcardQuestions.value = [];\r\n\r\n  try {\r\n    // Read all file contents\r\n    const fileContents = await Promise.all(\r\n      selectedFiles.value.map(file => readFileContent(file))\r\n    );\r\n\r\n    // Combine all file contents\r\n    const combinedContent = fileContents.join('\\n\\n');\r\n    console.log('Extracted file content sent to Gemini:', combinedContent);\r\n\r\n    // Prepare the prompt for Gemini\r\n    const prompt = `Create a quiz with 5 questions based on this text. Include both multiple choice and true/false questions. For each question:\r\n1. If it's multiple choice:\r\n   - Provide 4 options (A, B, C, D)\r\n   - Mark the correct answer with an asterisk (*)\r\n2. If it's true/false:\r\n   - Provide two options: True and False\r\n   - Mark the correct answer with an asterisk (*)\r\n3. Include a brief explanation for each answer\r\n\r\nText: ${combinedContent}`;\r\n\r\n    console.log('Sending request to Gemini API...');\r\n    console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\r\n\r\n    // Call Gemini API\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log('API Response:', response.data);\r\n\r\n    // Process the response and update quiz\r\n    const quizText = response.data.candidates[0].content.parts[0].text;\r\n    quiz.value = processQuizResponse(quizText);\r\n    userAnswers.value = new Array(quiz.value.questions.length).fill('');\r\n    showAnswers.value = false;\r\n  } catch (err) {\r\n    console.error('Detailed Error:', err.response ? err.response.data : err);\r\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n\r\nfunction parseFlashcardQuestions(text) {\r\n  // Split by 'Question:' and parse each block\r\n  const blocks = text.split(/\\n?Question:/).map(b => b.trim()).filter(Boolean);\r\n  const questions = blocks.map(block => {\r\n    const lines = block.split('\\n').map(l => l.trim());\r\n    const textLine = lines[0];\r\n    const options = ['A', 'B', 'C', 'D'].map(letter => {\r\n      const optLine = lines.find(l => l.startsWith(letter + ')'));\r\n      return { letter, text: optLine ? optLine.slice(3).trim() : '' };\r\n    });\r\n    const answerLine = lines.find(l => l.startsWith('Answer:'));\r\n    const answer = answerLine ? answerLine.replace('Answer:', '').trim() : '';\r\n    return {\r\n      text: textLine,\r\n      options,\r\n      answer\r\n    };\r\n  }).filter(q => q.text && q.options.every(o => o.text) && q.answer);\r\n  return questions;\r\n}\r\n\r\nfunction resetToMainScreen() {\r\n  showQuestions.value = false;\r\n  flashcardQuestions.value = [];\r\n  generatedQuestions.value = [];\r\n  selectedFiles.value = [];\r\n  questionCount.value = '';\r\n}\r\n\r\nconst checkAnswers = () => {\r\n  showAnswers.value = true;\r\n  // Implement the logic to check answers and update quiz.questions\r\n};\r\n\r\nconst allQuestionsAnswered = computed(() => {\r\n  return userAnswers.value.length === quiz.value.questions.length;\r\n});\r\n\r\nconst processQuizResponse = (response) => {\r\n  const questions = [];\r\n  const lines = response.split('\\n');\r\n  let currentQuestion = null;\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i].trim();\r\n    if (!line) continue;\r\n\r\n    if (line.startsWith('Question:')) {\r\n      if (currentQuestion) {\r\n        questions.push(currentQuestion);\r\n      }\r\n      currentQuestion = {\r\n        text: line.replace('Question:', '').trim(),\r\n        type: 'multiple-choice',\r\n        options: {},\r\n        correctAnswer: '',\r\n        explanation: ''\r\n      };\r\n    } else if (line.startsWith('True/False:')) {\r\n      if (currentQuestion) {\r\n        questions.push(currentQuestion);\r\n      }\r\n      currentQuestion = {\r\n        text: line.replace('True/False:', '').trim(),\r\n        type: 'true-false',\r\n        options: {\r\n          true: 'True',\r\n          false: 'False'\r\n        },\r\n        correctAnswer: '',\r\n        explanation: ''\r\n      };\r\n    } else if (currentQuestion) {\r\n      if (line.match(/^[A-D]\\)/)) {\r\n        const option = line.substring(2).trim();\r\n        const letter = line[0];\r\n        currentQuestion.options[letter] = option;\r\n        if (option.includes('*')) {\r\n          currentQuestion.correctAnswer = letter;\r\n          currentQuestion.options[letter] = option.replace('*', '').trim();\r\n        }\r\n      } else if (line.startsWith('True*') || line.startsWith('False*')) {\r\n        currentQuestion.correctAnswer = line.toLowerCase().includes('true*') ? 'true' : 'false';\r\n      } else if (line.startsWith('Explanation:')) {\r\n        currentQuestion.explanation = line.replace('Explanation:', '').trim();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (currentQuestion) {\r\n    questions.push(currentQuestion);\r\n  }\r\n\r\n  return { questions };\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #f5f5f5;\r\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\r\n}\r\n\r\n.upload-container {\r\n  background-color: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  width: 90%;\r\n  max-width: 600px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\nh2 {\r\n  color: #444;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.file-upload-section {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.upload-area {\r\n  border: 2px dashed #ccc;\r\n  border-radius: 8px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  margin-bottom: 1rem;\r\n  outline: none;\r\n}\r\n\r\n.upload-area:hover {\r\n  border-color: #666;\r\n  background-color: #f8f8f8;\r\n}\r\n\r\n.upload-area:focus {\r\n  border-color: #4CAF50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.file-input {\r\n  display: none;\r\n}\r\n\r\n.upload-prompt {\r\n  color: #666;\r\n}\r\n\r\n.upload-prompt p {\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.selected-files {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.selected-files ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.selected-files li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.remove-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.questions-section {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.question-input input {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.submit-btn {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.submit-btn:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.questions-list {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.question-item {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.error-message {\r\n  color: #ff4444;\r\n  margin-top: 1rem;\r\n  text-align: center;\r\n}\r\n\r\n.quiz-container {\r\n  margin-top: 2rem;\r\n  padding: 2rem;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.question {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.options {\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.option {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.feedback {\r\n  margin-top: 0.5rem;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.incorrect {\r\n  color: #ff4444;\r\n}\r\n\r\n.explanation {\r\n  margin-top: 0.5rem;\r\n  margin-left: 1rem;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\nbutton:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}