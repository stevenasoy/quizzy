{"ast":null,"code":"import { ref, computed } from 'vue';\nimport axios from 'axios';\nimport QuestionsDisplay from './components/QuestionsDisplay.vue';\nimport mammoth from \"mammoth\";\nimport * as pdfjsLib from \"pdfjs-dist\";\nimport JSZip from \"jszip\";\nimport pptxParser from \"pptx-parser\";\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedFiles = ref([]);\n    const questionCount = ref('');\n    const fileInput = ref(null);\n    const generatedQuestions = ref([]);\n    const isLoading = ref(false);\n    const error = ref('');\n    const showQuestions = ref(false);\n    const isFormValid = computed(() => {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    const handleFileSelect = event => {\n      const files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    const handleDrop = event => {\n      const files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    const addFiles = files => {\n      const validFiles = files.filter(file => {\n        const validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf'];\n        return validTypes.includes(file.type);\n      });\n      selectedFiles.value = [...selectedFiles.value, ...validFiles];\n    };\n    const removeFile = index => {\n      selectedFiles.value.splice(index, 1);\n    };\n    const readFileContent = file => {\n      return new Promise((resolve, reject) => {\n        if (file.type === \"text/plain\") {\n          // Plain text\n          const reader = new FileReader();\n          reader.onload = e => resolve(e.target.result);\n          reader.onerror = e => reject(e);\n          reader.readAsText(file);\n        } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n          // DOCX\n          const reader = new FileReader();\n          reader.onload = async e => {\n            try {\n              const arrayBuffer = e.target.result;\n              const result = await mammoth.extractRawText({\n                arrayBuffer\n              });\n              resolve(result.value);\n            } catch (err) {\n              resolve(\"[Could not extract DOCX text]\");\n            }\n          };\n          reader.onerror = e => reject(e);\n          reader.readAsArrayBuffer(file);\n        } else if (file.type === \"application/pdf\") {\n          // PDF\n          const reader = new FileReader();\n          reader.onload = async e => {\n            try {\n              const typedArray = new Uint8Array(e.target.result);\n              const pdf = await pdfjsLib.getDocument({\n                data: typedArray\n              }).promise;\n              let text = \"\";\n              for (let i = 1; i <= pdf.numPages; i++) {\n                const page = await pdf.getPage(i);\n                const content = await page.getTextContent();\n                text += content.items.map(item => item.str).join(\" \") + \"\\n\";\n              }\n              resolve(text);\n            } catch (err) {\n              resolve(\"[Could not extract PDF text]\");\n            }\n          };\n          reader.onerror = e => reject(e);\n          reader.readAsArrayBuffer(file);\n        } else if (file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\") {\n          // PPTX\n          const reader = new FileReader();\n          reader.onload = async e => {\n            try {\n              const zip = await JSZip.loadAsync(e.target.result);\n              pptxParser(zip).then(slides => {\n                const text = slides.map(slide => slide.texts ? slide.texts.map(t => t.text).join(\" \") : \"\").join(\"\\n\");\n                resolve(text);\n              }).catch(() => resolve(\"[Could not extract PPTX text]\"));\n            } catch (err) {\n              resolve(\"[Could not extract PPTX text]\");\n            }\n          };\n          reader.onerror = e => reject(e);\n          reader.readAsArrayBuffer(file);\n        } else {\n          resolve(`[${file.name} is not a supported file type.]`);\n        }\n      });\n    };\n    const handleSubmit = async () => {\n      if (!isFormValid.value) return;\n      isLoading.value = true;\n      error.value = '';\n      generatedQuestions.value = [];\n      try {\n        // Read all file contents\n        const fileContents = await Promise.all(selectedFiles.value.map(file => readFileContent(file)));\n\n        // Combine all file contents\n        const combinedContent = fileContents.join('\\n\\n');\n\n        // Prepare the prompt for Gemini\n        const prompt = `Based on the following content, generate ${questionCount.value} relevant questions. \n    The questions should test understanding of the key concepts and details in the content.\n    Format each question on a new line starting with a number and period (e.g., \"1. What is...\")\n    Content: ${combinedContent}`;\n        console.log('Sending request to Gemini API...');\n        console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\n\n        // Call Gemini API\n        const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`, {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024\n          }\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('API Response:', response.data);\n\n        // Extract questions from the response\n        const generatedText = response.data.candidates[0].content.parts[0].text;\n        const questions = generatedText.split('\\n').filter(line => line.trim().length > 0 && (line.startsWith('1.') || line.startsWith('2.') || line.startsWith('3.') || line.startsWith('4.') || line.startsWith('5.'))).map(q => q.replace(/^\\d+\\.\\s*/, '').trim());\n        generatedQuestions.value = questions;\n        showQuestions.value = true;\n      } catch (err) {\n        console.error('Detailed Error:', err.response ? err.response.data : err);\n        error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const handleAnswersSubmit = answers => {\n      console.log('Submitted answers:', answers);\n      // Here you can handle the submitted answers, e.g., send them to a server\n      alert('Answers submitted successfully!');\n    };\n    const __returned__ = {\n      selectedFiles,\n      questionCount,\n      fileInput,\n      generatedQuestions,\n      isLoading,\n      error,\n      showQuestions,\n      isFormValid,\n      handleFileSelect,\n      handleDrop,\n      addFiles,\n      removeFile,\n      readFileContent,\n      handleSubmit,\n      handleAnswersSubmit,\n      ref,\n      computed,\n      get axios() {\n        return axios;\n      },\n      QuestionsDisplay,\n      get mammoth() {\n        return mammoth;\n      },\n      get pdfjsLib() {\n        return pdfjsLib;\n      },\n      get JSZip() {\n        return JSZip;\n      },\n      get pptxParser() {\n        return pptxParser;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","axios","QuestionsDisplay","mammoth","pdfjsLib","JSZip","pptxParser","selectedFiles","questionCount","fileInput","generatedQuestions","isLoading","error","showQuestions","isFormValid","value","length","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validFiles","filter","file","validTypes","includes","type","removeFile","index","splice","readFileContent","Promise","resolve","reject","reader","FileReader","onload","e","result","onerror","readAsText","arrayBuffer","extractRawText","err","readAsArrayBuffer","typedArray","Uint8Array","pdf","getDocument","data","promise","text","i","numPages","page","getPage","content","getTextContent","items","map","item","str","join","zip","loadAsync","then","slides","slide","texts","t","catch","name","handleSubmit","fileContents","all","combinedContent","prompt","console","log","process","env","VUE_APP_GEMINI_API_KEY","response","post","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","generatedText","candidates","questions","split","line","trim","startsWith","q","replace","message","handleAnswersSubmit","answers","alert"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"upload-container\">\r\n      <h1>File Upload and Questions</h1>\r\n      \r\n      <div v-if=\"!showQuestions\" class=\"file-upload-section\">\r\n        <h2>Upload Files</h2>\r\n        <div class=\"upload-area\" @dragover.prevent @drop.prevent=\"handleDrop\">\r\n          <input\r\n            type=\"file\"\r\n            multiple\r\n            accept=\".doc,.docx,.ppt,.pptx,.txt,.pdf\"\r\n            @change=\"handleFileSelect\"\r\n            ref=\"fileInput\"\r\n            class=\"file-input\"\r\n          />\r\n          <div class=\"upload-prompt\">\r\n            <p>Drag and drop files here or click to select</p>\r\n            <p>Supported formats: DOC, DOCX, PPT, PPTX, TXT, PDF</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\r\n          <h3>Selected Files:</h3>\r\n          <ul>\r\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\">\r\n              {{ file.name }}\r\n              <button @click=\"removeFile(index)\" class=\"remove-btn\">×</button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"questions-section\">\r\n          <h2>Number of Questions</h2>\r\n          <div class=\"question-input\">\r\n            <input\r\n              type=\"number\"\r\n              v-model=\"questionCount\"\r\n              min=\"1\"\r\n              max=\"20\"\r\n              placeholder=\"Enter number of questions\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          class=\"submit-btn\" \r\n          :disabled=\"!isFormValid || isLoading\"\r\n          @click=\"handleSubmit\"\r\n        >\r\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\r\n        </button>\r\n      </div>\r\n\r\n      <QuestionsDisplay\r\n        v-else\r\n        :questions=\"generatedQuestions\"\r\n        @submit-answers=\"handleAnswersSubmit\"\r\n      />\r\n\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        {{ error }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport axios from 'axios';\r\nimport QuestionsDisplay from './components/QuestionsDisplay.vue';\r\nimport mammoth from \"mammoth\";\r\nimport * as pdfjsLib from \"pdfjs-dist\";\r\nimport JSZip from \"jszip\";\r\nimport pptxParser from \"pptx-parser\";\r\n\r\nconst selectedFiles = ref([]);\r\nconst questionCount = ref('');\r\nconst fileInput = ref(null);\r\nconst generatedQuestions = ref([]);\r\nconst isLoading = ref(false);\r\nconst error = ref('');\r\nconst showQuestions = ref(false);\r\n\r\nconst isFormValid = computed(() => {\r\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\r\n});\r\n\r\nconst handleFileSelect = (event) => {\r\n  const files = Array.from(event.target.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst handleDrop = (event) => {\r\n  const files = Array.from(event.dataTransfer.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst addFiles = (files) => {\r\n  const validFiles = files.filter(file => {\r\n    const validTypes = [\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      'application/vnd.ms-powerpoint',\r\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n      'text/plain',\r\n      'application/pdf'\r\n    ];\r\n    return validTypes.includes(file.type);\r\n  });\r\n  \r\n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\r\n};\r\n\r\nconst removeFile = (index) => {\r\n  selectedFiles.value.splice(index, 1);\r\n};\r\n\r\nconst readFileContent = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (file.type === \"text/plain\") {\r\n      // Plain text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    } else if (\r\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n    ) {\r\n      // DOCX\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        try {\r\n          const arrayBuffer = e.target.result;\r\n          const result = await mammoth.extractRawText({ arrayBuffer });\r\n          resolve(result.value);\r\n        } catch (err) {\r\n          resolve(\"[Could not extract DOCX text]\");\r\n        }\r\n      };\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsArrayBuffer(file);\r\n    } else if (file.type === \"application/pdf\") {\r\n      // PDF\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        try {\r\n          const typedArray = new Uint8Array(e.target.result);\r\n          const pdf = await pdfjsLib.getDocument({ data: typedArray }).promise;\r\n          let text = \"\";\r\n          for (let i = 1; i <= pdf.numPages; i++) {\r\n            const page = await pdf.getPage(i);\r\n            const content = await page.getTextContent();\r\n            text += content.items.map((item) => item.str).join(\" \") + \"\\n\";\r\n          }\r\n          resolve(text);\r\n        } catch (err) {\r\n          resolve(\"[Could not extract PDF text]\");\r\n        }\r\n      };\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsArrayBuffer(file);\r\n    } else if (\r\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\r\n    ) {\r\n      // PPTX\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        try {\r\n          const zip = await JSZip.loadAsync(e.target.result);\r\n          pptxParser(zip)\r\n            .then((slides) => {\r\n              const text = slides\r\n                .map((slide) =>\r\n                  slide.texts ? slide.texts.map((t) => t.text).join(\" \") : \"\"\r\n                )\r\n                .join(\"\\n\");\r\n              resolve(text);\r\n            })\r\n            .catch(() => resolve(\"[Could not extract PPTX text]\"));\r\n        } catch (err) {\r\n          resolve(\"[Could not extract PPTX text]\");\r\n        }\r\n      };\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsArrayBuffer(file);\r\n    } else {\r\n      resolve(`[${file.name} is not a supported file type.]`);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  if (!isFormValid.value) return;\r\n\r\n  isLoading.value = true;\r\n  error.value = '';\r\n  generatedQuestions.value = [];\r\n\r\n  try {\r\n    // Read all file contents\r\n    const fileContents = await Promise.all(\r\n      selectedFiles.value.map(file => readFileContent(file))\r\n    );\r\n\r\n    // Combine all file contents\r\n    const combinedContent = fileContents.join('\\n\\n');\r\n\r\n    // Prepare the prompt for Gemini\r\n    const prompt = `Based on the following content, generate ${questionCount.value} relevant questions. \r\n    The questions should test understanding of the key concepts and details in the content.\r\n    Format each question on a new line starting with a number and period (e.g., \"1. What is...\")\r\n    Content: ${combinedContent}`;\r\n\r\n    console.log('Sending request to Gemini API...');\r\n    console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\r\n\r\n    // Call Gemini API\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log('API Response:', response.data);\r\n\r\n    // Extract questions from the response\r\n    const generatedText = response.data.candidates[0].content.parts[0].text;\r\n    const questions = generatedText.split('\\n')\r\n      .filter(line => line.trim().length > 0 && (line.startsWith('1.') || line.startsWith('2.') || line.startsWith('3.') || line.startsWith('4.') || line.startsWith('5.')))\r\n      .map(q => q.replace(/^\\d+\\.\\s*/, '').trim());\r\n\r\n    generatedQuestions.value = questions;\r\n    showQuestions.value = true;\r\n  } catch (err) {\r\n    console.error('Detailed Error:', err.response ? err.response.data : err);\r\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n\r\nconst handleAnswersSubmit = (answers) => {\r\n  console.log('Submitted answers:', answers);\r\n  // Here you can handle the submitted answers, e.g., send them to a server\r\n  alert('Answers submitted successfully!');\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.upload-container {\r\n  background-color: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  width: 90%;\r\n  max-width: 600px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\nh2 {\r\n  color: #444;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-area {\r\n  border: 2px dashed #ccc;\r\n  border-radius: 4px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: border-color 0.3s;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-area:hover {\r\n  border-color: #666;\r\n}\r\n\r\n.file-input {\r\n  display: none;\r\n}\r\n\r\n.upload-prompt {\r\n  color: #666;\r\n}\r\n\r\n.selected-files {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.selected-files ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.selected-files li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.remove-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.questions-section {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.question-input input {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.submit-btn {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.submit-btn:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.questions-list {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.question-item {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.error-message {\r\n  color: #ff4444;\r\n  margin-top: 1rem;\r\n  text-align: center;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}