{"ast":null,"code":"import { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\n\n// File handling state\n\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedFiles = ref([]);\n    const fileInput = ref(null);\n    const unsupportedFiles = ref([]);\n    const extractionErrors = ref([]);\n\n    // Quiz state\n    const questionCount = ref('');\n    const isLoading = ref(false);\n    const error = ref('');\n    const predictedScore = ref(null);\n    const quizStarted = ref(false);\n    const quizFinished = ref(false);\n    const adaptiveQuestions = ref([]);\n    const userResponses = ref([]);\n    const extractedContent = ref('');\n\n    // Add quiz history state\n    const quizHistory = ref([]);\n\n    // Add isRetaking flag to track retakes\n    const isRetaking = ref(false);\n    const retakeIndex = ref(-1);\n\n    // Load quiz history from localStorage on mount\n    onMounted(() => {\n      const savedHistory = localStorage.getItem('quizHistory');\n      if (savedHistory) {\n        quizHistory.value = JSON.parse(savedHistory);\n      }\n    });\n\n    // Computed properties\n    const isFormValid = computed(() => {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    const hasFileErrors = computed(() => {\n      return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n    });\n    const getPredictedScoreClass = computed(() => {\n      if (predictedScore.value >= 80) return 'high';\n      if (predictedScore.value >= 60) return 'medium';\n      return 'low';\n    });\n\n    // File handling methods\n    const triggerFileInput = () => {\n      fileInput.value.click();\n    };\n    const handleFileSelect = event => {\n      const files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    const handleDrop = event => {\n      const files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    const addFiles = files => {\n      const validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n      const validFiles = [];\n      const invalidFiles = [];\n      files.forEach(file => {\n        if (validTypes.includes(file.type)) {\n          validFiles.push(file);\n        } else {\n          invalidFiles.push(file);\n        }\n      });\n      selectedFiles.value = [...selectedFiles.value, ...validFiles];\n      unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n    };\n    const removeFile = index => {\n      selectedFiles.value.splice(index, 1);\n    };\n\n    // Quiz handling methods\n    const handleSubmit = async () => {\n      if (!isFormValid.value) return;\n      isLoading.value = true;\n      error.value = '';\n      adaptiveQuestions.value = [];\n      predictedScore.value = null;\n      quizStarted.value = false;\n      userResponses.value = [];\n      extractedContent.value = '';\n      try {\n        const fileContents = await Promise.all(selectedFiles.value.map(file => readFileContent(file)));\n        extractedContent.value = fileContents.join('\\n\\n');\n        const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n        const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n        const processedQuiz = processQuizResponse(response, extractedContent.value);\n        adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n        predictedScore.value = calculatePredictedScore();\n      } catch (err) {\n        error.value = `Error generating questions: ${err.response?.data?.error?.message || err.message}`;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const startQuiz = () => {\n      quizStarted.value = true;\n      quizFinished.value = false;\n    };\n    const handleQuizComplete = responses => {\n      userResponses.value = responses;\n      // Update the adaptiveQuestions with user answers\n      adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => ({\n        ...question,\n        userAnswer: responses[index].userAnswer,\n        isCorrect: responses[index].correct\n      }));\n      quizFinished.value = true;\n      saveQuizResults();\n    };\n    const restartQuiz = () => {\n      quizStarted.value = true;\n      quizFinished.value = false;\n      userResponses.value = [];\n    };\n    const resetToMainScreen = () => {\n      selectedFiles.value = [];\n      unsupportedFiles.value = [];\n      extractionErrors.value = [];\n      questionCount.value = '';\n      error.value = '';\n      isLoading.value = false;\n      predictedScore.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n\n    // Helper functions\n    async function readFileContent(file) {\n      return new Promise(resolve => {\n        if (file.type === \"application/pdf\" || file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" || file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type.startsWith('image/')) {\n          const formData = new FormData();\n          formData.append('file', file);\n          const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n          fetch(`${backendUrl}/extract-file`, {\n            method: 'POST',\n            body: formData\n          }).then(res => res.json()).then(data => {\n            if (data.text) {\n              resolve(data.text);\n            } else {\n              extractionErrors.value.push({\n                fileName: file.name,\n                message: data.error || 'Failed to extract text from file'\n              });\n              resolve(\"[Could not extract file text]\");\n            }\n          }).catch(() => {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: 'Server error while extracting text'\n            });\n            resolve(\"[Could not extract file text]\");\n          });\n        } else if (file.type === \"text/plain\") {\n          const reader = new FileReader();\n          reader.onload = e => resolve(e.target.result);\n          reader.onerror = () => {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: 'Error reading text file'\n            });\n            resolve(\"[Could not read file]\");\n          };\n          reader.readAsText(file);\n        } else {\n          resolve(`[${file.name} is not a supported file type.]`);\n        }\n      });\n    }\n    async function generateQuestions(content, count) {\n      const prompt = `Create a quiz with ${count} COMPLETELY UNIQUE and DIVERSE questions based on this text. Each question MUST cover a different concept or aspect. NO REPETITIVE or SIMILAR questions allowed.\n\nCRITICAL REQUIREMENTS:\n1. Each explanation MUST be a direct quote or paraphrased content from the original text\n2. Explanations should reference specific parts of the text that justify the correct answer\n3. Do NOT make up explanations - they must be based on the actual content provided\n4. If a concept isn't clearly explained in the text, don't create a question about it\n5. Automatically determine appropriate difficulty (easy/medium/hard) based on:\n   - Easy: Basic facts, definitions, or simple concepts\n   - Medium: Understanding relationships between concepts\n   - Hard: Analysis, evaluation, or complex relationships\n\nFormat requirements for each question:\n\nFor multiple choice questions:\n1. Question: [unique question text]\n2. Options (mark correct with *):\n   A) [option]\n   B) [option]\n   C) [option]\n   D) [option]\n3. Explanation: [quote or paraphrase relevant text that explains the correct answer]\n4. Difficulty: [AI determines: easy|medium|hard]\n\nFor true/false questions:\n1. True/False: [unique question text]\n2. Answer: [Write ONLY \"True*\" if true is correct, or \"False*\" if false is correct]\n3. Explanation: [quote or paraphrase relevant text that explains why the statement is true or false]\n4. Difficulty: [AI determines: easy|medium|hard]\n\nIMPORTANT:\n- Each question MUST cover a different topic/concept\n- NO similar or overlapping questions\n- Make questions engaging and thought-provoking\n- Ensure clear, unambiguous wording\n- ALL explanations must come from the provided text\n- For true/false questions, ALWAYS mark the correct answer with an asterisk (*)\n- Distribute difficulties naturally based on content complexity\n\nText to base questions on:\n${content}`;\n      const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`, {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 2048\n        }\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.candidates[0].content.parts[0].text;\n    }\n    function processQuizResponse(response, content) {\n      const questions = [];\n      const lines = response.split('\\n');\n      let currentQuestion = null;\n      let collectingOptions = false;\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n        if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n          if (currentQuestion) {\n            findExplanationFromContent(currentQuestion, content);\n            questions.push(currentQuestion);\n          }\n          currentQuestion = {\n            text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n            type: 'multiple-choice',\n            options: {},\n            correctAnswer: '',\n            explanation: '',\n            difficulty: 'medium'\n          };\n          collectingOptions = true;\n        } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n          if (currentQuestion) {\n            findExplanationFromContent(currentQuestion, content);\n            questions.push(currentQuestion);\n          }\n          currentQuestion = {\n            text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n            type: 'true-false',\n            options: {\n              'true': 'True',\n              'false': 'False'\n            },\n            correctAnswer: '',\n            explanation: '',\n            difficulty: 'medium'\n          };\n          collectingOptions = true;\n        } else if (currentQuestion && collectingOptions) {\n          if (currentQuestion.type === 'multiple-choice') {\n            const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n            if (optionMatch) {\n              const letter = optionMatch[1].toUpperCase();\n              let option = optionMatch[2].trim();\n\n              // Check for asterisk at start or end of option\n              if (option.startsWith('*') || option.endsWith('*')) {\n                currentQuestion.correctAnswer = letter;\n                option = option.replace(/^\\*|\\*$/g, '').trim();\n              }\n              currentQuestion.options[letter] = option;\n            } else if (line.toLowerCase().startsWith('explanation:')) {\n              collectingOptions = false;\n            }\n          } else if (currentQuestion.type === 'true-false') {\n            // Look for the Answer: line specifically\n            if (line.toLowerCase().startsWith('answer:')) {\n              const answer = line.substring(7).trim().toLowerCase();\n              if (answer.includes('true*') || answer.includes('*true')) {\n                currentQuestion.correctAnswer = 'true';\n              } else if (answer.includes('false*') || answer.includes('*false')) {\n                currentQuestion.correctAnswer = 'false';\n              }\n            } else if (line.toLowerCase().startsWith('explanation:')) {\n              collectingOptions = false;\n            }\n          }\n        }\n      }\n      if (currentQuestion) {\n        findExplanationFromContent(currentQuestion, content);\n        questions.push(currentQuestion);\n      }\n\n      // Validate and fix questions\n      const validQuestions = questions.filter(q => {\n        if (q.type === 'multiple-choice') {\n          // Must have at least 2 options and a correct answer\n          const hasEnoughOptions = Object.keys(q.options).length >= 2;\n          if (!hasEnoughOptions || !q.correctAnswer) {\n            console.warn('Invalid multiple choice question:', q);\n            return false;\n          }\n          return true;\n        } else if (q.type === 'true-false') {\n          // For true/false questions, try to infer the answer from the explanation if not explicitly set\n          if (!q.correctAnswer && q.explanation) {\n            const lowerExplanation = q.explanation.toLowerCase();\n            if (lowerExplanation.includes('this statement is true')) {\n              q.correctAnswer = 'true';\n            } else if (lowerExplanation.includes('this statement is false')) {\n              q.correctAnswer = 'false';\n            }\n          }\n\n          // If still no answer, warn and default to false (since defaulting to true might be misleading)\n          if (!q.correctAnswer) {\n            console.warn('True/False question missing correct answer, inferring from context:', q);\n            // Look for negative indicators in the question\n            const questionLower = q.text.toLowerCase();\n            const hasNegativeIndicators = ['only', 'solely', 'never', 'always', 'all', 'none'].some(word => questionLower.includes(word));\n            q.correctAnswer = hasNegativeIndicators ? 'false' : 'true';\n          }\n          return true;\n        }\n        return false;\n      });\n      if (validQuestions.length === 0) {\n        throw new Error('No valid questions could be generated from the content.');\n      }\n      return {\n        questions: validQuestions\n      };\n    }\n    function findExplanationFromContent(question, content) {\n      // Split content into paragraphs\n      const paragraphs = content.split(/\\n\\s*\\n/);\n\n      // Create search terms from the question and answer\n      const searchTerms = [...question.text.toLowerCase().replace(/[.,?!]/g, '').split(' '), ...(question.type === 'multiple-choice' && question.options[question.correctAnswer] ? question.options[question.correctAnswer].toLowerCase().split(' ') : [])].filter(word => word.length > 3);\n\n      // Find relevant paragraphs with scoring\n      const relevantParagraphs = paragraphs.map(paragraph => {\n        const normalizedParagraph = paragraph.toLowerCase();\n        let score = 0;\n\n        // Score exact phrase matches higher\n        if (normalizedParagraph.includes(question.text.toLowerCase())) {\n          score += 15;\n        }\n\n        // Score keyword matches\n        searchTerms.forEach(term => {\n          if (normalizedParagraph.includes(term)) {\n            score += 2;\n          }\n        });\n        return {\n          text: paragraph.trim(),\n          score\n        };\n      }).filter(p => p.score > 0).sort((a, b) => b.score - a.score).slice(0, 1); // Get most relevant paragraph\n\n      if (relevantParagraphs.length > 0) {\n        question.explanation = relevantParagraphs[0].text;\n      } else {\n        // Basic fallback explanations\n        if (question.type === 'true-false') {\n          const isTrue = question.correctAnswer === 'true';\n          question.explanation = `This statement is ${isTrue ? 'true' : 'false'} based on the provided content.`;\n        } else {\n          const correctOption = question.options[question.correctAnswer];\n          question.explanation = `The correct answer is \"${correctOption}\" according to the material.`;\n        }\n      }\n    }\n    function selectQuestions(questions) {\n      const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5).filter((question, index, self) => index === self.findIndex(q => q.text.toLowerCase().replace(/[^\\w\\s]/g, '') === question.text.toLowerCase().replace(/[^\\w\\s]/g, '')));\n      const selectedQuestions = [];\n      const targetPerDifficulty = Math.ceil(Number(questionCount.value) / 3);\n      const difficultyCount = {\n        easy: 0,\n        medium: 0,\n        hard: 0\n      };\n      for (const difficulty of ['easy', 'medium', 'hard']) {\n        const questionsOfDifficulty = shuffledQuestions.filter(q => q.difficulty === difficulty && !selectedQuestions.includes(q));\n        for (const question of questionsOfDifficulty) {\n          if (difficultyCount[difficulty] < targetPerDifficulty && selectedQuestions.length < Number(questionCount.value)) {\n            selectedQuestions.push(question);\n            difficultyCount[difficulty]++;\n          }\n        }\n      }\n      while (selectedQuestions.length < Number(questionCount.value)) {\n        const remainingQuestion = shuffledQuestions.find(q => !selectedQuestions.includes(q));\n        if (remainingQuestion) {\n          selectedQuestions.push(remainingQuestion);\n        } else {\n          break;\n        }\n      }\n      return selectedQuestions;\n    }\n    function calculatePredictedScore() {\n      const contentCoverage = analyzeContentForCoverage();\n      const contentComplexity = analyzeContentComplexity();\n      const questionDiversity = analyzeQuestionDiversity();\n\n      // Weight factors\n      const coverageWeight = 0.4;\n      const complexityWeight = 0.3;\n      const diversityWeight = 0.3;\n\n      // Calculate weighted score\n      const predictedScore = contentCoverage * coverageWeight + contentComplexity * complexityWeight + questionDiversity * diversityWeight;\n      return Math.max(0, Math.min(100, Math.round(predictedScore)));\n    }\n    function analyzeContentForCoverage() {\n      // Analyze how well the content matches with generated questions\n      const totalContent = extractedContent.value.length;\n      if (totalContent === 0) return 0;\n\n      // Calculate coverage based on content length and number of questions\n      const averageContentPerQuestion = 500; // baseline characters per question\n      const expectedQuestions = Math.ceil(totalContent / averageContentPerQuestion);\n      const actualQuestions = Number(questionCount.value);\n      const coverage = Math.min(actualQuestions / expectedQuestions, 1) * 100;\n      return coverage;\n    }\n    function analyzeContentComplexity() {\n      const content = extractedContent.value.toLowerCase();\n\n      // Define complexity indicators\n      const complexityIndicators = ['analyze', 'compare', 'contrast', 'evaluate', 'explain', 'describe', 'discuss', 'examine', 'interpret', 'justify', 'therefore', 'however', 'although', 'furthermore', 'consequently'];\n\n      // Count complexity indicators\n      let complexityScore = 0;\n      complexityIndicators.forEach(indicator => {\n        const regex = new RegExp(indicator, 'g');\n        const matches = content.match(regex);\n        if (matches) {\n          complexityScore += matches.length;\n        }\n      });\n\n      // Normalize score to 0-100 range\n      const normalizedScore = Math.min(complexityScore * 5, 100);\n      return normalizedScore;\n    }\n    function analyzeQuestionDiversity() {\n      if (!adaptiveQuestions.value.length) return 0;\n\n      // Count different types of questions\n      const types = new Set(adaptiveQuestions.value.map(q => q.type));\n      const typesDiversity = types.size / 2 * 50; // 2 is max types (multiple-choice and true-false)\n\n      // Analyze question text similarity to ensure diverse topics\n      const questionTexts = adaptiveQuestions.value.map(q => q.text.toLowerCase());\n      let uniqueTopics = 0;\n      const processedKeywords = new Set();\n      questionTexts.forEach(text => {\n        const keywords = text.split(' ').filter(word => word.length > 4) // Consider only significant words\n        .map(word => word.replace(/[^a-z]/g, '')); // Clean up words\n\n        keywords.forEach(keyword => {\n          if (!processedKeywords.has(keyword)) {\n            uniqueTopics++;\n            processedKeywords.add(keyword);\n          }\n        });\n      });\n      const topicsDiversity = Math.min(uniqueTopics / questionTexts.length * 50, 50);\n      return typesDiversity + topicsDiversity;\n    }\n\n    // Results formatting\n    const formatQuestionsForResults = computed(() => {\n      return adaptiveQuestions.value.map((q, index) => ({\n        text: q.text,\n        type: q.type,\n        options: q.options,\n        userAnswer: userResponses.value[index]?.userAnswer,\n        correctAnswer: q.correctAnswer,\n        explanation: q.explanation,\n        isCorrect: userResponses.value[index]?.correct\n      }));\n    });\n    const formatUserAnswersForResults = computed(() => {\n      return userResponses.value.map(r => r.userAnswer);\n    });\n    const correctAnswersCount = computed(() => {\n      return userResponses.value.filter(r => r.correct).length;\n    });\n\n    // Update the calculateScore function\n    const calculateScore = () => {\n      if (!userResponses.value.length) return 0;\n      const correctAnswers = userResponses.value.filter(r => r.correct).length;\n      return Math.round(correctAnswers / userResponses.value.length * 100);\n    };\n\n    // Update the saveQuizResults function to handle retakes\n    const saveQuizResults = () => {\n      const quizResult = {\n        fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n        questionCount: Number(questionCount.value),\n        predictedScore: predictedScore.value,\n        actualScore: calculateScore(),\n        date: new Date(),\n        fileContent: extractedContent.value\n      };\n      if (isRetaking.value && retakeIndex.value !== -1) {\n        // Update existing record\n        quizHistory.value[retakeIndex.value] = {\n          ...quizHistory.value[retakeIndex.value],\n          actualScore: quizResult.actualScore,\n          date: quizResult.date\n        };\n      } else {\n        // Add new record\n        quizHistory.value.unshift(quizResult);\n      }\n      localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n\n      // Reset retake flags\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Update the handleRetakeQuiz function to set retake flags\n    const handleRetakeQuiz = async quizToRetake => {\n      // Find the index of the quiz being retaken\n      retakeIndex.value = quizHistory.value.findIndex(quiz => quiz.fileName === quizToRetake.fileName && quiz.questionCount === quizToRetake.questionCount && quiz.fileContent === quizToRetake.fileContent);\n      if (retakeIndex.value === -1) {\n        console.error('Could not find original quiz to retake');\n        return;\n      }\n      isRetaking.value = true;\n\n      // Reset quiz state\n      quizStarted.value = false;\n      quizFinished.value = false;\n      predictedScore.value = null;\n      error.value = '';\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n\n      // Set the question count from the previous quiz\n      questionCount.value = quizToRetake.questionCount.toString();\n\n      // Create a dummy file with the same name\n      const file = new File([''], quizToRetake.fileName, {\n        type: 'text/plain'\n      });\n\n      // Set the selected file and content\n      selectedFiles.value = [file];\n      extractedContent.value = quizToRetake.fileContent;\n\n      // Generate new quiz using the stored content\n      try {\n        isLoading.value = true;\n        const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n        const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n        const processedQuiz = processQuizResponse(response, extractedContent.value);\n        adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n        predictedScore.value = calculatePredictedScore();\n      } catch (err) {\n        error.value = `Error generating questions: ${err.response?.data?.error?.message || err.message}`;\n        // Reset retake flags on error\n        isRetaking.value = false;\n        retakeIndex.value = -1;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Update handleCreateQuiz to reset retake flags\n    const handleCreateQuiz = () => {\n      // Reset the quiz state\n      quizStarted.value = false;\n      quizFinished.value = false;\n      predictedScore.value = null;\n      selectedFiles.value = [];\n      questionCount.value = '';\n      error.value = '';\n      extractedContent.value = '';\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Add the clearHistory function\n    const clearHistory = () => {\n      if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n        quizHistory.value = [];\n        localStorage.removeItem('quizHistory');\n      }\n    };\n    const __returned__ = {\n      selectedFiles,\n      fileInput,\n      unsupportedFiles,\n      extractionErrors,\n      questionCount,\n      isLoading,\n      error,\n      predictedScore,\n      quizStarted,\n      quizFinished,\n      adaptiveQuestions,\n      userResponses,\n      extractedContent,\n      quizHistory,\n      isRetaking,\n      retakeIndex,\n      isFormValid,\n      hasFileErrors,\n      getPredictedScoreClass,\n      triggerFileInput,\n      handleFileSelect,\n      handleDrop,\n      addFiles,\n      removeFile,\n      handleSubmit,\n      startQuiz,\n      handleQuizComplete,\n      restartQuiz,\n      resetToMainScreen,\n      readFileContent,\n      generateQuestions,\n      processQuizResponse,\n      findExplanationFromContent,\n      selectQuestions,\n      calculatePredictedScore,\n      analyzeContentForCoverage,\n      analyzeContentComplexity,\n      analyzeQuestionDiversity,\n      formatQuestionsForResults,\n      formatUserAnswersForResults,\n      correctAnswersCount,\n      calculateScore,\n      saveQuizResults,\n      handleRetakeQuiz,\n      handleCreateQuiz,\n      clearHistory,\n      ref,\n      computed,\n      onMounted,\n      get axios() {\n        return axios;\n      },\n      FileErrorDisplay,\n      QuizResults,\n      FlashcardQuiz,\n      Sidebar\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","axios","FileErrorDisplay","QuizResults","FlashcardQuiz","Sidebar","selectedFiles","fileInput","unsupportedFiles","extractionErrors","questionCount","isLoading","error","predictedScore","quizStarted","quizFinished","adaptiveQuestions","userResponses","extractedContent","quizHistory","isRetaking","retakeIndex","savedHistory","localStorage","getItem","value","JSON","parse","isFormValid","length","hasFileErrors","getPredictedScoreClass","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validTypes","validFiles","invalidFiles","forEach","file","includes","type","push","removeFile","index","splice","handleSubmit","fileContents","Promise","all","map","readFileContent","join","requestedQuestionCount","Math","min","Number","response","generateQuestions","processedQuiz","processQuizResponse","selectQuestions","questions","calculatePredictedScore","err","data","message","startQuiz","handleQuizComplete","responses","question","userAnswer","isCorrect","correct","saveQuizResults","restartQuiz","resetToMainScreen","resolve","startsWith","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","text","fileName","name","catch","reader","FileReader","onload","e","result","onerror","readAsText","content","count","prompt","post","VUE_APP_GEMINI_API_KEY","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","candidates","lines","split","currentQuestion","collectingOptions","i","line","trim","test","findExplanationFromContent","replace","options","correctAnswer","explanation","difficulty","optionMatch","match","letter","toUpperCase","option","endsWith","toLowerCase","answer","substring","validQuestions","filter","q","hasEnoughOptions","Object","keys","console","warn","lowerExplanation","questionLower","hasNegativeIndicators","some","word","Error","paragraphs","searchTerms","relevantParagraphs","paragraph","normalizedParagraph","score","term","p","sort","a","b","slice","isTrue","correctOption","shuffledQuestions","random","self","findIndex","selectedQuestions","targetPerDifficulty","ceil","difficultyCount","easy","medium","hard","questionsOfDifficulty","remainingQuestion","find","contentCoverage","analyzeContentForCoverage","contentComplexity","analyzeContentComplexity","questionDiversity","analyzeQuestionDiversity","coverageWeight","complexityWeight","diversityWeight","max","round","totalContent","averageContentPerQuestion","expectedQuestions","actualQuestions","coverage","complexityIndicators","complexityScore","indicator","regex","RegExp","matches","normalizedScore","types","Set","typesDiversity","size","questionTexts","uniqueTopics","processedKeywords","keywords","keyword","has","add","topicsDiversity","formatQuestionsForResults","formatUserAnswersForResults","r","correctAnswersCount","calculateScore","correctAnswers","quizResult","actualScore","date","Date","fileContent","unshift","setItem","stringify","handleRetakeQuiz","quizToRetake","quiz","toString","File","handleCreateQuiz","clearHistory","confirm","removeItem"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <Sidebar \n      :quiz-history=\"quizHistory\" \n      @create-quiz=\"handleCreateQuiz\"\n      @retake-quiz=\"handleRetakeQuiz\"\n      @clear-history=\"clearHistory\"\n    />\n    <div class=\"main-content\">\n      <div class=\"upload-container\">\n        <h1>QUIZZy</h1>\n        \n        <div v-if=\"!quizStarted && !quizFinished && predictedScore === null\" class=\"file-upload-section\">\n          <h2>Upload Files</h2>\n          <div class=\"upload-area\" \n            @dragover.prevent \n            @drop.prevent=\"handleDrop\"\n            @click=\"triggerFileInput\"\n            role=\"button\"\n            tabindex=\"0\"\n            @keydown.enter=\"triggerFileInput\"\n          >\n            <input \n              type=\"file\" \n              @change=\"handleFileSelect\" \n              accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\n              ref=\"fileInput\"\n              class=\"file-input\"\n            >\n            <div class=\"upload-prompt\">\n              <p>Drag and drop files here or click to select</p>\n              <div class=\"supported-formats\">\n                <p>Supported formats:</p>\n                <ul>\n                  <li><span class=\"format-icon\">📄</span> Documents (PDF, DOCX)</li>\n                  <li><span class=\"format-icon\">📊</span> Presentations (PPTX)</li>\n                  <li><span class=\"format-icon\">📝</span> Text files (TXT)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"hasFileErrors\" class=\"error-section\">\n            <FileErrorDisplay\n              :extraction-errors=\"extractionErrors\"\n              :unsupported-files=\"unsupportedFiles\"\n            />\n          </div>\n\n          <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n            <h3>Selected Files:</h3>\n            <ul>\n              <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n                <span class=\"file-name\">{{ file.name }}</span>\n                <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">×</button>\n              </li>\n            </ul>\n          </div>\n\n          <div class=\"questions-section\">\n            <h2>Number of Questions</h2>\n            <div class=\"question-input\">\n              <input\n                type=\"number\"\n                v-model=\"questionCount\"\n                min=\"1\"\n                max=\"20\"\n                placeholder=\"Enter number of questions\"\n              />\n            </div>\n          </div>\n\n          <button \n            class=\"submit-btn\" \n            :disabled=\"!isFormValid || isLoading\"\n            @click=\"handleSubmit\"\n          >\n            {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n          </button>\n        </div>\n\n        <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n          <div class=\"predicted-score-container\">\n            <h2>Ready to Start!</h2>\n            <div class=\"score-prediction\">\n              <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n                <span class=\"predicted-value\">{{ predictedScore }}%</span>\n                <span class=\"prediction-label\">Predicted Score</span>\n              </div>\n            </div>\n            <p class=\"prediction-explanation\">\n              Based on your study material, we predict you'll score around {{ predictedScore }}%.\n            </p>\n            <button class=\"start-quiz-btn\" @click=\"startQuiz\">Start Quiz</button>\n          </div>\n        </div>\n\n        <FlashcardQuiz\n          v-if=\"quizStarted && !quizFinished\"\n          :questions=\"adaptiveQuestions\"\n          :total-questions=\"Number(questionCount)\"\n          @quiz-completed=\"handleQuizComplete\"\n        />\n\n        <QuizResults\n          v-if=\"quizFinished\"\n          :questions=\"formatQuestionsForResults\"\n          :user-answers=\"formatUserAnswersForResults\"\n          :score=\"correctAnswersCount\"\n          :predicted-score=\"predictedScore\"\n          @restart=\"restartQuiz\"\n          @go-back=\"resetToMainScreen\"\n        />\n\n        <div v-if=\"error\" class=\"error-message\">\n          {{ error }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading Overlay -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <div class=\"loading-content\">\n        <div class=\"typewriter\">Generating quiz</div>\n        <div class=\"dots\">\n          <span>.</span>\n          <span>.</span>\n          <span>.</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\n\n// File handling state\nconst selectedFiles = ref([]);\nconst fileInput = ref(null);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\n\n// Quiz state\nconst questionCount = ref('');\nconst isLoading = ref(false);\nconst error = ref('');\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst quizFinished = ref(false);\nconst adaptiveQuestions = ref([]);\nconst userResponses = ref([]);\nconst extractedContent = ref('');\n\n// Add quiz history state\nconst quizHistory = ref([]);\n\n// Add isRetaking flag to track retakes\nconst isRetaking = ref(false);\nconst retakeIndex = ref(-1);\n\n// Load quiz history from localStorage on mount\nonMounted(() => {\n  const savedHistory = localStorage.getItem('quizHistory');\n  if (savedHistory) {\n    quizHistory.value = JSON.parse(savedHistory);\n  }\n});\n\n// Computed properties\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n\n// File handling methods\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\n// Quiz handling methods\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  userResponses.value = [];\n  extractedContent.value = '';\n\n  try {\n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    extractedContent.value = fileContents.join('\\n\\n');\n    const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n    \n    const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    const processedQuiz = processQuizResponse(response, extractedContent.value);\n    \n    adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n    predictedScore.value = calculatePredictedScore();\n\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response?.data?.error?.message || err.message}`;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n};\n\nconst handleQuizComplete = (responses) => {\n  userResponses.value = responses;\n  // Update the adaptiveQuestions with user answers\n  adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => ({\n    ...question,\n    userAnswer: responses[index].userAnswer,\n    isCorrect: responses[index].correct\n  }));\n  quizFinished.value = true;\n  saveQuizResults();\n};\n\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  userResponses.value = [];\n};\n\nconst resetToMainScreen = () => {\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\n// Helper functions\nasync function readFileContent(file) {\n  return new Promise((resolve) => {\n    if (\n      file.type === \"application/pdf\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n      file.type.startsWith('image/')\n    ) {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n            resolve(\"[Could not extract file text]\");\n          }\n        })\n        .catch(() => {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: 'Server error while extracting text'\n          });\n          resolve(\"[Could not extract file text]\");\n        });\n    } else if (file.type === \"text/plain\") {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = () => {\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: 'Error reading text file'\n        });\n        resolve(\"[Could not read file]\");\n      };\n      reader.readAsText(file);\n    } else {\n      resolve(`[${file.name} is not a supported file type.]`);\n    }\n  });\n}\n\nasync function generateQuestions(content, count) {\n  const prompt = `Create a quiz with ${count} COMPLETELY UNIQUE and DIVERSE questions based on this text. Each question MUST cover a different concept or aspect. NO REPETITIVE or SIMILAR questions allowed.\n\nCRITICAL REQUIREMENTS:\n1. Each explanation MUST be a direct quote or paraphrased content from the original text\n2. Explanations should reference specific parts of the text that justify the correct answer\n3. Do NOT make up explanations - they must be based on the actual content provided\n4. If a concept isn't clearly explained in the text, don't create a question about it\n5. Automatically determine appropriate difficulty (easy/medium/hard) based on:\n   - Easy: Basic facts, definitions, or simple concepts\n   - Medium: Understanding relationships between concepts\n   - Hard: Analysis, evaluation, or complex relationships\n\nFormat requirements for each question:\n\nFor multiple choice questions:\n1. Question: [unique question text]\n2. Options (mark correct with *):\n   A) [option]\n   B) [option]\n   C) [option]\n   D) [option]\n3. Explanation: [quote or paraphrase relevant text that explains the correct answer]\n4. Difficulty: [AI determines: easy|medium|hard]\n\nFor true/false questions:\n1. True/False: [unique question text]\n2. Answer: [Write ONLY \"True*\" if true is correct, or \"False*\" if false is correct]\n3. Explanation: [quote or paraphrase relevant text that explains why the statement is true or false]\n4. Difficulty: [AI determines: easy|medium|hard]\n\nIMPORTANT:\n- Each question MUST cover a different topic/concept\n- NO similar or overlapping questions\n- Make questions engaging and thought-provoking\n- Ensure clear, unambiguous wording\n- ALL explanations must come from the provided text\n- For true/false questions, ALWAYS mark the correct answer with an asterisk (*)\n- Distribute difficulties naturally based on content complexity\n\nText to base questions on:\n${content}`;\n\n  const response = await axios.post(\n    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n    {\n      contents: [{\n        parts: [{\n          text: prompt\n        }]\n      }],\n      generationConfig: {\n        temperature: 0.7,\n        topK: 40,\n        topP: 0.95,\n        maxOutputTokens: 2048,\n      }\n    },\n    {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n\n  return response.data.candidates[0].content.parts[0].text;\n}\n\nfunction processQuizResponse(response, content) {\n  const questions = [];\n  const lines = response.split('\\n');\n  let currentQuestion = null;\n  let collectingOptions = false;\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n      if (currentQuestion) {\n        findExplanationFromContent(currentQuestion, content);\n        questions.push(currentQuestion);\n      }\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n        type: 'multiple-choice',\n        options: {},\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n      collectingOptions = true;\n    } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n      if (currentQuestion) {\n        findExplanationFromContent(currentQuestion, content);\n        questions.push(currentQuestion);\n      }\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n        type: 'true-false',\n        options: { \n          'true': 'True',\n          'false': 'False'\n        },\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n      collectingOptions = true;\n    } else if (currentQuestion && collectingOptions) {\n      if (currentQuestion.type === 'multiple-choice') {\n        const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n        if (optionMatch) {\n          const letter = optionMatch[1].toUpperCase();\n          let option = optionMatch[2].trim();\n          \n          // Check for asterisk at start or end of option\n          if (option.startsWith('*') || option.endsWith('*')) {\n            currentQuestion.correctAnswer = letter;\n            option = option.replace(/^\\*|\\*$/g, '').trim();\n          }\n          currentQuestion.options[letter] = option;\n        } else if (line.toLowerCase().startsWith('explanation:')) {\n          collectingOptions = false;\n        }\n      } else if (currentQuestion.type === 'true-false') {\n        // Look for the Answer: line specifically\n        if (line.toLowerCase().startsWith('answer:')) {\n          const answer = line.substring(7).trim().toLowerCase();\n          if (answer.includes('true*') || answer.includes('*true')) {\n            currentQuestion.correctAnswer = 'true';\n          } else if (answer.includes('false*') || answer.includes('*false')) {\n            currentQuestion.correctAnswer = 'false';\n          }\n        } else if (line.toLowerCase().startsWith('explanation:')) {\n          collectingOptions = false;\n        }\n      }\n    }\n  }\n  \n  if (currentQuestion) {\n    findExplanationFromContent(currentQuestion, content);\n    questions.push(currentQuestion);\n  }\n\n  // Validate and fix questions\n  const validQuestions = questions.filter(q => {\n    if (q.type === 'multiple-choice') {\n      // Must have at least 2 options and a correct answer\n      const hasEnoughOptions = Object.keys(q.options).length >= 2;\n      if (!hasEnoughOptions || !q.correctAnswer) {\n        console.warn('Invalid multiple choice question:', q);\n        return false;\n      }\n      return true;\n    } else if (q.type === 'true-false') {\n      // For true/false questions, try to infer the answer from the explanation if not explicitly set\n      if (!q.correctAnswer && q.explanation) {\n        const lowerExplanation = q.explanation.toLowerCase();\n        if (lowerExplanation.includes('this statement is true')) {\n          q.correctAnswer = 'true';\n        } else if (lowerExplanation.includes('this statement is false')) {\n          q.correctAnswer = 'false';\n        }\n      }\n      \n      // If still no answer, warn and default to false (since defaulting to true might be misleading)\n      if (!q.correctAnswer) {\n        console.warn('True/False question missing correct answer, inferring from context:', q);\n        // Look for negative indicators in the question\n        const questionLower = q.text.toLowerCase();\n        const hasNegativeIndicators = ['only', 'solely', 'never', 'always', 'all', 'none'].some(word => \n          questionLower.includes(word)\n        );\n        q.correctAnswer = hasNegativeIndicators ? 'false' : 'true';\n      }\n      return true;\n    }\n    return false;\n  });\n\n  if (validQuestions.length === 0) {\n    throw new Error('No valid questions could be generated from the content.');\n  }\n  \n  return { questions: validQuestions };\n}\n\nfunction findExplanationFromContent(question, content) {\n  // Split content into paragraphs\n  const paragraphs = content.split(/\\n\\s*\\n/);\n  \n  // Create search terms from the question and answer\n  const searchTerms = [\n    ...question.text.toLowerCase().replace(/[.,?!]/g, '').split(' '),\n    ...(question.type === 'multiple-choice' && question.options[question.correctAnswer] \n      ? question.options[question.correctAnswer].toLowerCase().split(' ') \n      : [])\n  ].filter(word => word.length > 3);\n  \n  // Find relevant paragraphs with scoring\n  const relevantParagraphs = paragraphs.map(paragraph => {\n    const normalizedParagraph = paragraph.toLowerCase();\n    let score = 0;\n    \n    // Score exact phrase matches higher\n    if (normalizedParagraph.includes(question.text.toLowerCase())) {\n      score += 15;\n    }\n    \n    // Score keyword matches\n    searchTerms.forEach(term => {\n      if (normalizedParagraph.includes(term)) {\n        score += 2;\n      }\n    });\n\n    return {\n      text: paragraph.trim(),\n      score\n    };\n  }).filter(p => p.score > 0)\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 1); // Get most relevant paragraph\n\n  if (relevantParagraphs.length > 0) {\n    question.explanation = relevantParagraphs[0].text;\n  } else {\n    // Basic fallback explanations\n    if (question.type === 'true-false') {\n      const isTrue = question.correctAnswer === 'true';\n      question.explanation = `This statement is ${isTrue ? 'true' : 'false'} based on the provided content.`;\n    } else {\n      const correctOption = question.options[question.correctAnswer];\n      question.explanation = `The correct answer is \"${correctOption}\" according to the material.`;\n    }\n  }\n}\n\nfunction selectQuestions(questions) {\n  const shuffledQuestions = [...questions]\n    .sort(() => Math.random() - 0.5)\n    .filter((question, index, self) => \n      index === self.findIndex((q) => \n        q.text.toLowerCase().replace(/[^\\w\\s]/g, '') === \n        question.text.toLowerCase().replace(/[^\\w\\s]/g, '')\n      )\n    );\n\n  const selectedQuestions = [];\n  const targetPerDifficulty = Math.ceil(Number(questionCount.value) / 3);\n  const difficultyCount = { easy: 0, medium: 0, hard: 0 };\n\n  for (const difficulty of ['easy', 'medium', 'hard']) {\n    const questionsOfDifficulty = shuffledQuestions.filter(q => \n      q.difficulty === difficulty && !selectedQuestions.includes(q)\n    );\n    \n    for (const question of questionsOfDifficulty) {\n      if (difficultyCount[difficulty] < targetPerDifficulty && \n          selectedQuestions.length < Number(questionCount.value)) {\n        selectedQuestions.push(question);\n        difficultyCount[difficulty]++;\n      }\n    }\n  }\n\n  while (selectedQuestions.length < Number(questionCount.value)) {\n    const remainingQuestion = shuffledQuestions.find(q => !selectedQuestions.includes(q));\n    if (remainingQuestion) {\n      selectedQuestions.push(remainingQuestion);\n    } else {\n      break;\n    }\n  }\n\n  return selectedQuestions;\n}\n\nfunction calculatePredictedScore() {\n  const contentCoverage = analyzeContentForCoverage();\n  const contentComplexity = analyzeContentComplexity();\n  const questionDiversity = analyzeQuestionDiversity();\n  \n  // Weight factors\n  const coverageWeight = 0.4;\n  const complexityWeight = 0.3;\n  const diversityWeight = 0.3;\n  \n  // Calculate weighted score\n  const predictedScore = (\n    contentCoverage * coverageWeight +\n    contentComplexity * complexityWeight +\n    questionDiversity * diversityWeight\n  );\n  \n  return Math.max(0, Math.min(100, Math.round(predictedScore)));\n}\n\nfunction analyzeContentForCoverage() {\n  // Analyze how well the content matches with generated questions\n  const totalContent = extractedContent.value.length;\n  if (totalContent === 0) return 0;\n  \n  // Calculate coverage based on content length and number of questions\n  const averageContentPerQuestion = 500; // baseline characters per question\n  const expectedQuestions = Math.ceil(totalContent / averageContentPerQuestion);\n  const actualQuestions = Number(questionCount.value);\n  \n  const coverage = Math.min(actualQuestions / expectedQuestions, 1) * 100;\n  return coverage;\n}\n\nfunction analyzeContentComplexity() {\n  const content = extractedContent.value.toLowerCase();\n  \n  // Define complexity indicators\n  const complexityIndicators = [\n    'analyze', 'compare', 'contrast', 'evaluate', 'explain',\n    'describe', 'discuss', 'examine', 'interpret', 'justify',\n    'therefore', 'however', 'although', 'furthermore', 'consequently'\n  ];\n  \n  // Count complexity indicators\n  let complexityScore = 0;\n  complexityIndicators.forEach(indicator => {\n    const regex = new RegExp(indicator, 'g');\n    const matches = content.match(regex);\n    if (matches) {\n      complexityScore += matches.length;\n    }\n  });\n  \n  // Normalize score to 0-100 range\n  const normalizedScore = Math.min(complexityScore * 5, 100);\n  return normalizedScore;\n}\n\nfunction analyzeQuestionDiversity() {\n  if (!adaptiveQuestions.value.length) return 0;\n  \n  // Count different types of questions\n  const types = new Set(adaptiveQuestions.value.map(q => q.type));\n  const typesDiversity = (types.size / 2) * 50; // 2 is max types (multiple-choice and true-false)\n  \n  // Analyze question text similarity to ensure diverse topics\n  const questionTexts = adaptiveQuestions.value.map(q => q.text.toLowerCase());\n  let uniqueTopics = 0;\n  const processedKeywords = new Set();\n  \n  questionTexts.forEach(text => {\n    const keywords = text.split(' ')\n      .filter(word => word.length > 4) // Consider only significant words\n      .map(word => word.replace(/[^a-z]/g, '')); // Clean up words\n      \n    keywords.forEach(keyword => {\n      if (!processedKeywords.has(keyword)) {\n        uniqueTopics++;\n        processedKeywords.add(keyword);\n      }\n    });\n  });\n  \n  const topicsDiversity = Math.min(uniqueTopics / questionTexts.length * 50, 50);\n  \n  return typesDiversity + topicsDiversity;\n}\n\n// Results formatting\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    options: q.options,\n    userAnswer: userResponses.value[index]?.userAnswer,\n    correctAnswer: q.correctAnswer,\n    explanation: q.explanation,\n    isCorrect: userResponses.value[index]?.correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update the calculateScore function\nconst calculateScore = () => {\n  if (!userResponses.value.length) return 0;\n  const correctAnswers = userResponses.value.filter(r => r.correct).length;\n  return Math.round((correctAnswers / userResponses.value.length) * 100);\n};\n\n// Update the saveQuizResults function to handle retakes\nconst saveQuizResults = () => {\n  const quizResult = {\n    fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n    questionCount: Number(questionCount.value),\n    predictedScore: predictedScore.value,\n    actualScore: calculateScore(),\n    date: new Date(),\n    fileContent: extractedContent.value\n  };\n  \n  if (isRetaking.value && retakeIndex.value !== -1) {\n    // Update existing record\n    quizHistory.value[retakeIndex.value] = {\n      ...quizHistory.value[retakeIndex.value],\n      actualScore: quizResult.actualScore,\n      date: quizResult.date\n    };\n  } else {\n    // Add new record\n    quizHistory.value.unshift(quizResult);\n  }\n  \n  localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n  \n  // Reset retake flags\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Update the handleRetakeQuiz function to set retake flags\nconst handleRetakeQuiz = async (quizToRetake) => {\n  // Find the index of the quiz being retaken\n  retakeIndex.value = quizHistory.value.findIndex(quiz => \n    quiz.fileName === quizToRetake.fileName && \n    quiz.questionCount === quizToRetake.questionCount &&\n    quiz.fileContent === quizToRetake.fileContent\n  );\n  \n  if (retakeIndex.value === -1) {\n    console.error('Could not find original quiz to retake');\n    return;\n  }\n  \n  isRetaking.value = true;\n  \n  // Reset quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  \n  // Set the question count from the previous quiz\n  questionCount.value = quizToRetake.questionCount.toString();\n  \n  // Create a dummy file with the same name\n  const file = new File([''], quizToRetake.fileName, {\n    type: 'text/plain'\n  });\n  \n  // Set the selected file and content\n  selectedFiles.value = [file];\n  extractedContent.value = quizToRetake.fileContent;\n  \n  // Generate new quiz using the stored content\n  try {\n    isLoading.value = true;\n    const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n    \n    const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    const processedQuiz = processQuizResponse(response, extractedContent.value);\n    \n    adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n    predictedScore.value = calculatePredictedScore();\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response?.data?.error?.message || err.message}`;\n    // Reset retake flags on error\n    isRetaking.value = false;\n    retakeIndex.value = -1;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Update handleCreateQuiz to reset retake flags\nconst handleCreateQuiz = () => {\n  // Reset the quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  selectedFiles.value = [];\n  questionCount.value = '';\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Add the clearHistory function\nconst clearHistory = () => {\n  if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n    quizHistory.value = [];\n    localStorage.removeItem('quizHistory');\n  }\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px; /* Same as sidebar width */\n  padding: 2rem;\n  display: flex;\n  justify-content: center;\n}\n\n.upload-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 90%;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.85);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(2px);\n}\n\n.loading-content {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 2rem;\n  color: #333;\n  font-weight: 500;\n}\n\n.typewriter {\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(14) infinite;\n  border-right: 3px solid #4CAF50;\n}\n\n.dots {\n  display: flex;\n}\n\n.dots span {\n  opacity: 0;\n  animation: dot 1.5s infinite;\n  animation-fill-mode: both;\n}\n\n.dots span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.dots span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0%, 90%, 100% {\n    width: 0;\n  }\n  30%, 60% {\n    width: 14ch;\n  }\n}\n\n@keyframes dot {\n  0%, 100% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}