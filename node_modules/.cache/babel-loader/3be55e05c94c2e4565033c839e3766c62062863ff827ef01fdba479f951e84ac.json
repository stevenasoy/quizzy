{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.slice.js\";\n/**\r\n * Answer Formatting Module\r\n */\n\n/**\r\n * Formats answer based on question type\r\n * @param {Object} question - Question object\r\n * @param {any} answer - Answer to format\r\n * @returns {string} Formatted answer\r\n */\nexport function formatAnswer(question, answer) {\n  if (!answer && answer !== false) return 'Not answered';\n  if (question.type === 'multiple-choice') {\n    var optionText = question.options[answer];\n    return optionText ? \"\".concat(answer, \") \").concat(optionText) : answer;\n  } else if (question.type === 'true-false') {\n    // Handle both string and boolean values\n    var value = String(answer).toLowerCase();\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  }\n  return answer;\n}\n\n/**\r\n * Gets score classification\r\n * @param {number} score - Score percentage\r\n * @returns {string} Score classification\r\n */\nexport function getScoreClass(score) {\n  if (score >= 90) return 'excellent';\n  if (score >= 80) return 'good';\n  if (score >= 70) return 'average';\n  return 'needs-improvement';\n}\n\n/**\r\n * Gets predicted score classification\r\n * @param {number} score - Predicted score percentage\r\n * @returns {string} Classification\r\n */\nexport function getPredictedScoreClass(score) {\n  if (score >= 80) return 'high';\n  if (score >= 60) return 'medium';\n  return 'low';\n}\n\n/**\r\n * Gets performance classification based on actual vs predicted score\r\n * @param {number} actual - Actual score\r\n * @param {number} predicted - Predicted score\r\n * @returns {string} Performance classification\r\n */\nexport function getPerformanceClass(actual, predicted) {\n  if (actual > predicted + 5) return 'exceeded';\n  if (actual < predicted - 5) return 'below';\n  return 'met';\n}\n\n/**\r\n * Gets performance description text\r\n * @param {number} actual - Actual score\r\n * @param {number} predicted - Predicted score\r\n * @returns {string} Performance description\r\n */\nexport function getPerformanceText(actual, predicted) {\n  if (actual > predicted + 5) return 'Exceeded Expectations';\n  if (actual < predicted - 5) return 'Below Expectations';\n  return 'Met Expectations';\n}","map":{"version":3,"names":["formatAnswer","question","answer","type","optionText","options","concat","value","String","toLowerCase","charAt","toUpperCase","slice","getScoreClass","score","getPredictedScoreClass","getPerformanceClass","actual","predicted","getPerformanceText"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/answer-formatting/index.js"],"sourcesContent":["/**\r\n * Answer Formatting Module\r\n */\r\n\r\n/**\r\n * Formats answer based on question type\r\n * @param {Object} question - Question object\r\n * @param {any} answer - Answer to format\r\n * @returns {string} Formatted answer\r\n */\r\nexport function formatAnswer(question, answer) {\r\n  if (!answer && answer !== false) return 'Not answered';\r\n  \r\n  if (question.type === 'multiple-choice') {\r\n    const optionText = question.options[answer];\r\n    return optionText ? `${answer}) ${optionText}` : answer;\r\n  } else if (question.type === 'true-false') {\r\n    // Handle both string and boolean values\r\n    const value = String(answer).toLowerCase();\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n  }\r\n  return answer;\r\n}\r\n\r\n/**\r\n * Gets score classification\r\n * @param {number} score - Score percentage\r\n * @returns {string} Score classification\r\n */\r\nexport function getScoreClass(score) {\r\n  if (score >= 90) return 'excellent';\r\n  if (score >= 80) return 'good';\r\n  if (score >= 70) return 'average';\r\n  return 'needs-improvement';\r\n}\r\n\r\n/**\r\n * Gets predicted score classification\r\n * @param {number} score - Predicted score percentage\r\n * @returns {string} Classification\r\n */\r\nexport function getPredictedScoreClass(score) {\r\n  if (score >= 80) return 'high';\r\n  if (score >= 60) return 'medium';\r\n  return 'low';\r\n}\r\n\r\n/**\r\n * Gets performance classification based on actual vs predicted score\r\n * @param {number} actual - Actual score\r\n * @param {number} predicted - Predicted score\r\n * @returns {string} Performance classification\r\n */\r\nexport function getPerformanceClass(actual, predicted) {\r\n  if (actual > predicted + 5) return 'exceeded';\r\n  if (actual < predicted - 5) return 'below';\r\n  return 'met';\r\n}\r\n\r\n/**\r\n * Gets performance description text\r\n * @param {number} actual - Actual score\r\n * @param {number} predicted - Predicted score\r\n * @returns {string} Performance description\r\n */\r\nexport function getPerformanceText(actual, predicted) {\r\n  if (actual > predicted + 5) return 'Exceeded Expectations';\r\n  if (actual < predicted - 5) return 'Below Expectations';\r\n  return 'Met Expectations';\r\n} "],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAYA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EAC7C,IAAI,CAACA,MAAM,IAAIA,MAAM,KAAK,KAAK,EAAE,OAAO,cAAc;EAEtD,IAAID,QAAQ,CAACE,IAAI,KAAK,iBAAiB,EAAE;IACvC,IAAMC,UAAU,GAAGH,QAAQ,CAACI,OAAO,CAACH,MAAM,CAAC;IAC3C,OAAOE,UAAU,MAAAE,MAAA,CAAMJ,MAAM,QAAAI,MAAA,CAAKF,UAAU,IAAKF,MAAM;EACzD,CAAC,MAAM,IAAID,QAAQ,CAACE,IAAI,KAAK,YAAY,EAAE;IACzC;IACA,IAAMI,KAAK,GAAGC,MAAM,CAACN,MAAM,CAAC,CAACO,WAAW,CAAC,CAAC;IAC1C,OAAOF,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGJ,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC;EACvD;EACA,OAAOV,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,aAAaA,CAACC,KAAK,EAAE;EACnC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,WAAW;EACnC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,MAAM;EAC9B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;EACjC,OAAO,mBAAmB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACD,KAAK,EAAE;EAC5C,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,MAAM;EAC9B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,QAAQ;EAChC,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,mBAAmBA,CAACC,MAAM,EAAEC,SAAS,EAAE;EACrD,IAAID,MAAM,GAAGC,SAAS,GAAG,CAAC,EAAE,OAAO,UAAU;EAC7C,IAAID,MAAM,GAAGC,SAAS,GAAG,CAAC,EAAE,OAAO,OAAO;EAC1C,OAAO,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACF,MAAM,EAAEC,SAAS,EAAE;EACpD,IAAID,MAAM,GAAGC,SAAS,GAAG,CAAC,EAAE,OAAO,uBAAuB;EAC1D,IAAID,MAAM,GAAGC,SAAS,GAAG,CAAC,EAAE,OAAO,oBAAoB;EACvD,OAAO,kBAAkB;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}