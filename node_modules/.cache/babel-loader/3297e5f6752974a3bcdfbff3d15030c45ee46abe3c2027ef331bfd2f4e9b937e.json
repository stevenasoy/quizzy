{"ast":null,"code":"import _objectSpread from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\n\n// File handling state\n\nexport default {\n  __name: 'App',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var selectedFiles = ref([]);\n    var fileInput = ref(null);\n    var unsupportedFiles = ref([]);\n    var extractionErrors = ref([]);\n\n    // Quiz state\n    var questionCount = ref('');\n    var isLoading = ref(false);\n    var error = ref('');\n    var predictedScore = ref(null);\n    var quizStarted = ref(false);\n    var quizFinished = ref(false);\n    var adaptiveQuestions = ref([]);\n    var userResponses = ref([]);\n    var extractedContent = ref('');\n\n    // Add quiz history state\n    var quizHistory = ref([]);\n\n    // Add isRetaking flag to track retakes\n    var isRetaking = ref(false);\n    var retakeIndex = ref(-1);\n\n    // Load quiz history from localStorage on mount\n    onMounted(function () {\n      var savedHistory = localStorage.getItem('quizHistory');\n      if (savedHistory) {\n        quizHistory.value = JSON.parse(savedHistory);\n      }\n    });\n\n    // Computed properties\n    var isFormValid = computed(function () {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    var hasFileErrors = computed(function () {\n      return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n    });\n    var getPredictedScoreClass = computed(function () {\n      if (predictedScore.value >= 80) return 'high';\n      if (predictedScore.value >= 60) return 'medium';\n      return 'low';\n    });\n\n    // File handling methods\n    var triggerFileInput = function triggerFileInput() {\n      fileInput.value.click();\n    };\n    var handleFileSelect = function handleFileSelect(event) {\n      var files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    var handleDrop = function handleDrop(event) {\n      var files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    var addFiles = function addFiles(files) {\n      var validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n      var validFiles = [];\n      var invalidFiles = [];\n      files.forEach(function (file) {\n        if (validTypes.includes(file.type)) {\n          validFiles.push(file);\n        } else {\n          invalidFiles.push(file);\n        }\n      });\n      selectedFiles.value = [].concat(_toConsumableArray(selectedFiles.value), validFiles);\n      unsupportedFiles.value = [].concat(_toConsumableArray(unsupportedFiles.value), invalidFiles);\n    };\n    var removeFile = function removeFile(index) {\n      selectedFiles.value.splice(index, 1);\n    };\n\n    // Quiz handling methods\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var fileContents, validContents, requestedQuestionCount, questions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (isFormValid.value) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              isLoading.value = true;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n              quizStarted.value = false;\n              userResponses.value = [];\n              extractedContent.value = '';\n              extractionErrors.value = [];\n              _context.prev = 10;\n              console.log('Processing files:', selectedFiles.value.map(function (f) {\n                return {\n                  name: f.name,\n                  type: f.type\n                };\n              }));\n              _context.next = 14;\n              return Promise.all(selectedFiles.value.map(function (file) {\n                return readFileContent(file);\n              }));\n            case 14:\n              fileContents = _context.sent;\n              validContents = fileContents.filter(function (content) {\n                return content && content.trim().length > 0;\n              });\n              console.log('Number of files with valid content:', validContents.length);\n              if (!(validContents.length === 0)) {\n                _context.next = 19;\n                break;\n              }\n              throw new Error('No valid content could be extracted from the selected files.');\n            case 19:\n              extractedContent.value = validContents.join('\\n\\n');\n              console.log('Total content length:', extractedContent.value.length);\n              if (!(extractedContent.value.trim().length < 50)) {\n                _context.next = 23;\n                break;\n              }\n              throw new Error('The extracted content is too short to generate meaningful questions.');\n            case 23:\n              requestedQuestionCount = Number(questionCount.value);\n              console.log('Requesting questions:', requestedQuestionCount);\n              _context.next = 27;\n              return generateQuestions(extractedContent.value, requestedQuestionCount);\n            case 27:\n              questions = _context.sent;\n              if (!(!questions || questions.length === 0)) {\n                _context.next = 30;\n                break;\n              }\n              throw new Error('No valid questions could be generated.');\n            case 30:\n              console.log('Generated questions:', questions.length);\n              adaptiveQuestions.value = questions;\n              predictedScore.value = calculatePredictedScore();\n              _context.next = 41;\n              break;\n            case 35:\n              _context.prev = 35;\n              _context.t0 = _context[\"catch\"](10);\n              console.error('Error in handleSubmit:', _context.t0);\n              error.value = _context.t0.message || 'An unexpected error occurred while generating questions.';\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n            case 41:\n              _context.prev = 41;\n              isLoading.value = false;\n              return _context.finish(41);\n            case 44:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[10, 35, 41, 44]]);\n      }));\n      return function handleSubmit() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var startQuiz = function startQuiz() {\n      quizStarted.value = true;\n      quizFinished.value = false;\n    };\n    var handleQuizComplete = function handleQuizComplete(responses) {\n      userResponses.value = responses;\n      // Update the adaptiveQuestions with user answers\n      adaptiveQuestions.value = adaptiveQuestions.value.map(function (question, index) {\n        var _responses$index, _responses$index2;\n        return _objectSpread(_objectSpread({}, question), {}, {\n          userAnswer: (_responses$index = responses[index]) === null || _responses$index === void 0 ? void 0 : _responses$index.userAnswer,\n          isCorrect: (_responses$index2 = responses[index]) === null || _responses$index2 === void 0 ? void 0 : _responses$index2.correct\n        });\n      });\n      quizFinished.value = true;\n      saveQuizResults();\n    };\n    var restartQuiz = function restartQuiz() {\n      quizStarted.value = true;\n      quizFinished.value = false;\n      userResponses.value = [];\n    };\n    var resetToMainScreen = function resetToMainScreen() {\n      selectedFiles.value = [];\n      unsupportedFiles.value = [];\n      extractionErrors.value = [];\n      questionCount.value = '';\n      error.value = '';\n      isLoading.value = false;\n      predictedScore.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n\n    // Helper functions\n    function readFileContent(_x) {\n      return _readFileContent.apply(this, arguments);\n    }\n    function _readFileContent() {\n      _readFileContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(file) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", new Promise(function (resolve) {\n                try {\n                  console.log('File type:', file.type);\n                  console.log('File name:', file.name);\n                  var formData = new FormData();\n                  formData.append('file', file);\n                  var backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n                  fetch(\"\".concat(backendUrl, \"/extract-file\"), {\n                    method: 'POST',\n                    body: formData\n                  }).then(function (res) {\n                    return res.json();\n                  }).then(function (data) {\n                    if (data.text) {\n                      resolve(data.text);\n                    } else {\n                      extractionErrors.value.push({\n                        fileName: file.name,\n                        message: data.error || 'Failed to extract text from file'\n                      });\n                      resolve('');\n                    }\n                  })[\"catch\"](function (error) {\n                    console.error('Error processing file:', error);\n                    extractionErrors.value.push({\n                      fileName: file.name,\n                      message: \"Error processing file: \".concat(error.message)\n                    });\n                    resolve('');\n                  });\n                } catch (error) {\n                  console.error('Error preparing file:', error);\n                  extractionErrors.value.push({\n                    fileName: file.name,\n                    message: \"Error preparing file: \".concat(error.message)\n                  });\n                  resolve('');\n                }\n              }));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return _readFileContent.apply(this, arguments);\n    }\n    function generateQuestions(_x2, _x3) {\n      return _generateQuestions.apply(this, arguments);\n    } // Helper function to check if two questions are too similar\n    function _generateQuestions() {\n      _generateQuestions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(content, count) {\n        var maxRetries, retryCount, allQuestions, _response$data, remainingCount, strategy, prompt, response, newQuestions, uniqueNewQuestions, _error$response, _error$response2;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              maxRetries = 3;\n              retryCount = 0;\n              allQuestions = [];\n            case 3:\n              if (!(retryCount < maxRetries && allQuestions.length < count)) {\n                _context4.next = 50;\n                break;\n              }\n              _context4.prev = 4;\n              remainingCount = count - allQuestions.length;\n              strategy = retryCount % 3;\n              prompt = '';\n              _context4.t0 = strategy;\n              _context4.next = _context4.t0 === 0 ? 11 : _context4.t0 === 1 ? 13 : _context4.t0 === 2 ? 15 : 17;\n              break;\n            case 11:\n              prompt = \"Create exactly \".concat(remainingCount, \" unique questions based on this text. Mix multiple-choice and true/false questions.\\nUse this EXACT format - no variations allowed:\\n\\nFor multiple choice questions:\\nQuestion: [question text]\\nA) [option]\\nB) [option]\\nC) [option]\\nD) [option]\\nAnswer: [A/B/C/D] (add * after the correct answer letter)\\nDifficulty: [easy/medium/hard]\\n\\nFor true/false questions:\\nTrue/False: [question text]\\nAnswer: [True* or False*]\\nDifficulty: [easy/medium/hard]\\n\\nText to use:\\n\").concat(content);\n              return _context4.abrupt(\"break\", 17);\n            case 13:\n              prompt = \"Create exactly \".concat(remainingCount, \" unique questions using opposite concepts or negations.\\nUse the EXACT same format as above, focusing on:\\n- What is NOT mentioned in the text\\n- Opposite relationships\\n- Contrasting concepts\\n\\nText to use:\\n\").concat(content);\n              return _context4.abrupt(\"break\", 17);\n            case 15:\n              prompt = \"Create exactly \".concat(remainingCount, \" unique application questions.\\nUse the EXACT same format as above, focusing on:\\n- Applying concepts from the text\\n- \\\"What if\\\" scenarios\\n- Inferring from given information\\n\\nText to use:\\n\").concat(content);\n              return _context4.abrupt(\"break\", 17);\n            case 17:\n              _context4.next = 19;\n              return axios.post(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\".concat(process.env.VUE_APP_GEMINI_API_KEY), {\n                contents: [{\n                  parts: [{\n                    text: prompt\n                  }]\n                }],\n                generationConfig: {\n                  temperature: 0.7 + retryCount * 0.1,\n                  topK: 40,\n                  topP: 0.95,\n                  maxOutputTokens: 2048\n                }\n              }, {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n            case 19:\n              response = _context4.sent;\n              if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data = _response$data.candidates) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && (_response$data = _response$data.content) !== null && _response$data !== void 0 && (_response$data = _response$data.parts) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && _response$data.text) {\n                _context4.next = 22;\n                break;\n              }\n              throw new Error('Invalid response format from Gemini API');\n            case 22:\n              newQuestions = processQuizResponse(response.data.candidates[0].content.parts[0].text, content).questions; // Filter out similar questions\n              uniqueNewQuestions = newQuestions.filter(function (newQ) {\n                return !allQuestions.some(function (existingQ) {\n                  return isSimilarQuestion(newQ, existingQ);\n                });\n              });\n              allQuestions = [].concat(_toConsumableArray(allQuestions), _toConsumableArray(uniqueNewQuestions));\n              if (!(allQuestions.length >= count)) {\n                _context4.next = 27;\n                break;\n              }\n              return _context4.abrupt(\"return\", allQuestions.slice(0, count));\n            case 27:\n              retryCount++;\n              if (!(uniqueNewQuestions.length === 0)) {\n                _context4.next = 31;\n                break;\n              }\n              _context4.next = 31;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 31:\n              _context4.next = 48;\n              break;\n            case 33:\n              _context4.prev = 33;\n              _context4.t1 = _context4[\"catch\"](4);\n              console.error(\"Attempt \".concat(retryCount + 1, \" failed:\"), _context4.t1);\n              retryCount++;\n              if (!(((_error$response = _context4.t1.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 429)) {\n                _context4.next = 42;\n                break;\n              }\n              _context4.next = 40;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 2000 * retryCount);\n              });\n            case 40:\n              _context4.next = 48;\n              break;\n            case 42:\n              if (!(retryCount === maxRetries)) {\n                _context4.next = 46;\n                break;\n              }\n              throw new Error(\"Failed to generate enough unique questions after \".concat(maxRetries, \" attempts. \").concat(((_error$response2 = _context4.t1.response) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.data) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.error) === null || _error$response2 === void 0 ? void 0 : _error$response2.message) || _context4.t1.message));\n            case 46:\n              _context4.next = 48;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 48:\n              _context4.next = 3;\n              break;\n            case 50:\n              if (!(allQuestions.length < count)) {\n                _context4.next = 52;\n                break;\n              }\n              throw new Error(\"Could only generate \".concat(allQuestions.length, \" unique questions out of \").concat(count, \" requested. Please try with different content or reduce the number of questions.\"));\n            case 52:\n              return _context4.abrupt(\"return\", allQuestions);\n            case 53:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 33]]);\n      }));\n      return _generateQuestions.apply(this, arguments);\n    }\n    function isSimilarQuestion(q1, q2) {\n      // Convert both questions to lowercase and remove punctuation\n      var normalize = function normalize(text) {\n        return text.toLowerCase().replace(/[^\\w\\s]/g, '');\n      };\n      var q1Text = normalize(q1.text);\n      var q2Text = normalize(q2.text);\n\n      // If the questions are exactly the same, they're similar\n      if (q1Text === q2Text) return true;\n\n      // If they're different types (MC vs T/F), they're not similar\n      if (q1.type !== q2.type) return false;\n\n      // For multiple choice questions, check if the options are too similar\n      if (q1.type === 'multiple-choice' && q2.type === 'multiple-choice') {\n        var q1Options = Object.values(q1.options).map(normalize);\n        var q2Options = Object.values(q2.options).map(normalize);\n        var commonOptions = q1Options.filter(function (opt) {\n          return q2Options.includes(opt);\n        });\n        if (commonOptions.length >= 3) return true; // If 3 or more options are the same, consider them similar\n      }\n\n      // Check for word overlap ratio\n      var q1Words = new Set(q1Text.split(/\\s+/));\n      var q2Words = new Set(q2Text.split(/\\s+/));\n      var commonWords = new Set(_toConsumableArray(q1Words).filter(function (x) {\n        return q2Words.has(x);\n      }));\n      var overlapRatio = commonWords.size / Math.min(q1Words.size, q2Words.size);\n      return overlapRatio > 0.7; // If more than 70% of words overlap, consider them similar\n    }\n    function processQuizResponse(response, content) {\n      var questions = [];\n      var lines = response.split('\\n');\n      var currentQuestion = null;\n      var collectingOptions = false;\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i].trim();\n        if (!line) continue;\n\n        // Check for question start\n        if (line.match(/^(Question:|True\\/False:)/i)) {\n          if (currentQuestion) {\n            questions.push(currentQuestion);\n          }\n          var isMultipleChoice = line.startsWith('Question:');\n          currentQuestion = {\n            text: line.replace(/^(Question:|True\\/False:)/i, '').trim(),\n            type: isMultipleChoice ? 'multiple-choice' : 'true-false',\n            options: isMultipleChoice ? {} : {\n              'true': 'True',\n              'false': 'False'\n            },\n            correctAnswer: '',\n            explanation: '',\n            difficulty: 'medium'\n          };\n          collectingOptions = true;\n          continue;\n        }\n        if (!currentQuestion) continue;\n\n        // Handle options for multiple choice\n        if (currentQuestion.type === 'multiple-choice') {\n          var optionMatch = line.match(/^([A-D])[).]\\s*(.*)/i);\n          if (optionMatch) {\n            var letter = optionMatch[1].toUpperCase();\n            var option = optionMatch[2].trim();\n            if (option.includes('*')) {\n              currentQuestion.correctAnswer = letter;\n              option = option.replace(/\\*/g, '').trim();\n            }\n            currentQuestion.options[letter] = option;\n          }\n        }\n\n        // Handle true/false answer\n        if (currentQuestion.type === 'true-false' && line.toLowerCase().startsWith('answer:')) {\n          var answer = line.substring(7).trim().toLowerCase();\n          if (answer.includes('true*') || answer.includes('*true')) {\n            currentQuestion.correctAnswer = 'true';\n          } else if (answer.includes('false*') || answer.includes('*false')) {\n            currentQuestion.correctAnswer = 'false';\n          }\n        }\n\n        // Handle difficulty\n        if (line.toLowerCase().startsWith('difficulty:')) {\n          var difficulty = line.substring(11).trim().toLowerCase();\n          if (['easy', 'medium', 'hard'].includes(difficulty)) {\n            currentQuestion.difficulty = difficulty;\n          }\n        }\n      }\n\n      // Don't forget to add the last question\n      if (currentQuestion) {\n        questions.push(currentQuestion);\n      }\n\n      // Validate questions\n      var validQuestions = questions.filter(function (q) {\n        // Basic validation\n        if (!q.text || !q.type) return false;\n\n        // Validate multiple choice questions\n        if (q.type === 'multiple-choice') {\n          var hasEnoughOptions = Object.keys(q.options).length >= 2;\n          var hasCorrectAnswer = !!q.correctAnswer && !!q.options[q.correctAnswer];\n          return hasEnoughOptions && hasCorrectAnswer;\n        }\n\n        // Validate true/false questions\n        if (q.type === 'true-false') {\n          return q.correctAnswer === 'true' || q.correctAnswer === 'false';\n        }\n        return false;\n      });\n      if (validQuestions.length === 0) {\n        console.error('Raw response:', response);\n        console.error('Parsed questions:', questions);\n        throw new Error('No valid questions could be generated from the content.');\n      }\n\n      // Add explanations from content\n      validQuestions.forEach(function (q) {\n        return findExplanationFromContent(q, content);\n      });\n      return {\n        questions: validQuestions\n      };\n    }\n    function findExplanationFromContent(question, content) {\n      // Split content into paragraphs\n      var paragraphs = content.split(/\\n\\s*\\n/);\n\n      // Create search terms from the question and answer\n      var searchTerms = [].concat(_toConsumableArray(question.text.toLowerCase().replace(/[.,?!]/g, '').split(' ')), _toConsumableArray(question.type === 'multiple-choice' && question.options[question.correctAnswer] ? question.options[question.correctAnswer].toLowerCase().split(' ') : [])).filter(function (word) {\n        return word.length > 3;\n      });\n\n      // Find relevant paragraphs with scoring\n      var relevantParagraphs = paragraphs.map(function (paragraph) {\n        var normalizedParagraph = paragraph.toLowerCase();\n        var score = 0;\n\n        // Score exact phrase matches higher\n        if (normalizedParagraph.includes(question.text.toLowerCase())) {\n          score += 15;\n        }\n\n        // Score keyword matches\n        searchTerms.forEach(function (term) {\n          if (normalizedParagraph.includes(term)) {\n            score += 2;\n          }\n        });\n        return {\n          text: paragraph.trim(),\n          score: score\n        };\n      }).filter(function (p) {\n        return p.score > 0;\n      }).sort(function (a, b) {\n        return b.score - a.score;\n      }).slice(0, 1); // Get most relevant paragraph\n\n      if (relevantParagraphs.length > 0) {\n        question.explanation = relevantParagraphs[0].text;\n      } else {\n        // Basic fallback explanations\n        if (question.type === 'true-false') {\n          var isTrue = question.correctAnswer === 'true';\n          question.explanation = \"This statement is \".concat(isTrue ? 'true' : 'false', \" based on the provided content.\");\n        } else {\n          var correctOption = question.options[question.correctAnswer];\n          question.explanation = \"The correct answer is \\\"\".concat(correctOption, \"\\\" according to the material.\");\n        }\n      }\n    }\n    function selectQuestions(questions) {\n      // First, shuffle all questions\n      var shuffledQuestions = _toConsumableArray(questions).sort(function () {\n        return Math.random() - 0.5;\n      });\n\n      // Remove duplicates while preserving order\n      var uniqueQuestions = shuffledQuestions.filter(function (question, index, self) {\n        return index === self.findIndex(function (q) {\n          return q.text.toLowerCase().replace(/[^\\w\\s]/g, '') === question.text.toLowerCase().replace(/[^\\w\\s]/g, '');\n        });\n      });\n\n      // Return all unique questions if we don't have enough\n      if (uniqueQuestions.length <= Number(questionCount.value)) {\n        return uniqueQuestions;\n      }\n\n      // Select the requested number of questions while maintaining difficulty distribution\n      var targetPerDifficulty = Math.ceil(Number(questionCount.value) / 3);\n      var selectedQuestions = [];\n      var difficultyCount = {\n        easy: 0,\n        medium: 0,\n        hard: 0\n      };\n\n      // First pass: try to get equal distribution\n      uniqueQuestions.forEach(function (question) {\n        var difficulty = question.difficulty || 'medium';\n        if (difficultyCount[difficulty] < targetPerDifficulty && selectedQuestions.length < Number(questionCount.value)) {\n          selectedQuestions.push(question);\n          difficultyCount[difficulty]++;\n        }\n      });\n\n      // Second pass: fill remaining slots if any\n      if (selectedQuestions.length < Number(questionCount.value)) {\n        uniqueQuestions.forEach(function (question) {\n          if (!selectedQuestions.includes(question) && selectedQuestions.length < Number(questionCount.value)) {\n            selectedQuestions.push(question);\n          }\n        });\n      }\n      return selectedQuestions;\n    }\n    function calculatePredictedScore() {\n      var contentCoverage = analyzeContentForCoverage();\n      var contentComplexity = analyzeContentComplexity();\n      var questionDiversity = analyzeQuestionDiversity();\n\n      // Weight factors\n      var coverageWeight = 0.4;\n      var complexityWeight = 0.3;\n      var diversityWeight = 0.3;\n\n      // Calculate weighted score\n      var predictedScore = contentCoverage * coverageWeight + contentComplexity * complexityWeight + questionDiversity * diversityWeight;\n      return Math.max(0, Math.min(100, Math.round(predictedScore)));\n    }\n    function analyzeContentForCoverage() {\n      // Analyze how well the content matches with generated questions\n      var totalContent = extractedContent.value.length;\n      if (totalContent === 0) return 0;\n\n      // Calculate coverage based on content length and number of questions\n      var averageContentPerQuestion = 500; // baseline characters per question\n      var expectedQuestions = Math.ceil(totalContent / averageContentPerQuestion);\n      var actualQuestions = Number(questionCount.value);\n      var coverage = Math.min(actualQuestions / expectedQuestions, 1) * 100;\n      return coverage;\n    }\n    function analyzeContentComplexity() {\n      var content = extractedContent.value.toLowerCase();\n\n      // Define complexity indicators\n      var complexityIndicators = ['analyze', 'compare', 'contrast', 'evaluate', 'explain', 'describe', 'discuss', 'examine', 'interpret', 'justify', 'therefore', 'however', 'although', 'furthermore', 'consequently'];\n\n      // Count complexity indicators\n      var complexityScore = 0;\n      complexityIndicators.forEach(function (indicator) {\n        var regex = new RegExp(indicator, 'g');\n        var matches = content.match(regex);\n        if (matches) {\n          complexityScore += matches.length;\n        }\n      });\n\n      // Normalize score to 0-100 range\n      var normalizedScore = Math.min(complexityScore * 5, 100);\n      return normalizedScore;\n    }\n    function analyzeQuestionDiversity() {\n      if (!adaptiveQuestions.value.length) return 0;\n\n      // Count different types of questions\n      var types = new Set(adaptiveQuestions.value.map(function (q) {\n        return q.type;\n      }));\n      var typesDiversity = types.size / 2 * 50; // 2 is max types (multiple-choice and true-false)\n\n      // Analyze question text similarity to ensure diverse topics\n      var questionTexts = adaptiveQuestions.value.map(function (q) {\n        return q.text.toLowerCase();\n      });\n      var uniqueTopics = 0;\n      var processedKeywords = new Set();\n      questionTexts.forEach(function (text) {\n        var keywords = text.split(' ').filter(function (word) {\n          return word.length > 4;\n        }) // Consider only significant words\n        .map(function (word) {\n          return word.replace(/[^a-z]/g, '');\n        }); // Clean up words\n\n        keywords.forEach(function (keyword) {\n          if (!processedKeywords.has(keyword)) {\n            uniqueTopics++;\n            processedKeywords.add(keyword);\n          }\n        });\n      });\n      var topicsDiversity = Math.min(uniqueTopics / questionTexts.length * 50, 50);\n      return typesDiversity + topicsDiversity;\n    }\n\n    // Results formatting\n    var formatQuestionsForResults = computed(function () {\n      return adaptiveQuestions.value.map(function (q, index) {\n        var _userResponses$value$, _userResponses$value$2;\n        return {\n          text: q.text,\n          type: q.type,\n          options: q.options,\n          userAnswer: (_userResponses$value$ = userResponses.value[index]) === null || _userResponses$value$ === void 0 ? void 0 : _userResponses$value$.userAnswer,\n          correctAnswer: q.correctAnswer,\n          explanation: q.explanation,\n          isCorrect: (_userResponses$value$2 = userResponses.value[index]) === null || _userResponses$value$2 === void 0 ? void 0 : _userResponses$value$2.correct\n        };\n      });\n    });\n    var formatUserAnswersForResults = computed(function () {\n      return userResponses.value.map(function (r) {\n        return r.userAnswer;\n      });\n    });\n    var correctAnswersCount = computed(function () {\n      return userResponses.value.filter(function (r) {\n        return r.correct;\n      }).length;\n    });\n\n    // Update the calculateScore function\n    var calculateScore = function calculateScore() {\n      if (!userResponses.value.length) return 0;\n      var correctAnswers = userResponses.value.filter(function (r) {\n        return r.correct;\n      }).length;\n      return Math.round(correctAnswers / userResponses.value.length * 100);\n    };\n\n    // Update the saveQuizResults function to handle retakes\n    var saveQuizResults = function saveQuizResults() {\n      var _selectedFiles$value$;\n      var quizResult = {\n        fileName: ((_selectedFiles$value$ = selectedFiles.value[0]) === null || _selectedFiles$value$ === void 0 ? void 0 : _selectedFiles$value$.name) || 'Untitled Quiz',\n        questionCount: Number(questionCount.value),\n        predictedScore: predictedScore.value,\n        actualScore: calculateScore(),\n        date: new Date(),\n        fileContent: extractedContent.value\n      };\n      if (isRetaking.value && retakeIndex.value !== -1) {\n        // Update existing record\n        quizHistory.value[retakeIndex.value] = _objectSpread(_objectSpread({}, quizHistory.value[retakeIndex.value]), {}, {\n          actualScore: quizResult.actualScore,\n          date: quizResult.date\n        });\n      } else {\n        // Add new record\n        quizHistory.value.unshift(quizResult);\n      }\n      localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n\n      // Reset retake flags\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Update the handleRetakeQuiz function to set retake flags\n    var handleRetakeQuiz = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(quizToRetake) {\n        var file, requestedQuestionCount, response, processedQuiz, _err$response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // Find the index of the quiz being retaken\n              retakeIndex.value = quizHistory.value.findIndex(function (quiz) {\n                return quiz.fileName === quizToRetake.fileName && quiz.questionCount === quizToRetake.questionCount && quiz.fileContent === quizToRetake.fileContent;\n              });\n              if (!(retakeIndex.value === -1)) {\n                _context2.next = 4;\n                break;\n              }\n              console.error('Could not find original quiz to retake');\n              return _context2.abrupt(\"return\");\n            case 4:\n              isRetaking.value = true;\n\n              // Reset quiz state\n              quizStarted.value = false;\n              quizFinished.value = false;\n              predictedScore.value = null;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              userResponses.value = [];\n\n              // Set the question count from the previous quiz\n              questionCount.value = quizToRetake.questionCount.toString();\n\n              // Create a dummy file with the same name\n              file = new File([''], quizToRetake.fileName, {\n                type: 'text/plain'\n              }); // Set the selected file and content\n              selectedFiles.value = [file];\n              extractedContent.value = quizToRetake.fileContent;\n\n              // Generate new quiz using the stored content\n              _context2.prev = 15;\n              isLoading.value = true;\n              requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n              _context2.next = 20;\n              return generateQuestions(extractedContent.value, requestedQuestionCount);\n            case 20:\n              response = _context2.sent;\n              processedQuiz = processQuizResponse(response, extractedContent.value);\n              adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n              predictedScore.value = calculatePredictedScore();\n              _context2.next = 31;\n              break;\n            case 26:\n              _context2.prev = 26;\n              _context2.t0 = _context2[\"catch\"](15);\n              error.value = \"Error generating questions: \".concat(((_err$response = _context2.t0.response) === null || _err$response === void 0 || (_err$response = _err$response.data) === null || _err$response === void 0 || (_err$response = _err$response.error) === null || _err$response === void 0 ? void 0 : _err$response.message) || _context2.t0.message);\n              // Reset retake flags on error\n              isRetaking.value = false;\n              retakeIndex.value = -1;\n            case 31:\n              _context2.prev = 31;\n              isLoading.value = false;\n              return _context2.finish(31);\n            case 34:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[15, 26, 31, 34]]);\n      }));\n      return function handleRetakeQuiz(_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // Update handleCreateQuiz to reset retake flags\n    var handleCreateQuiz = function handleCreateQuiz() {\n      // Reset the quiz state\n      quizStarted.value = false;\n      quizFinished.value = false;\n      predictedScore.value = null;\n      selectedFiles.value = [];\n      questionCount.value = '';\n      error.value = '';\n      extractedContent.value = '';\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Add the clearHistory function\n    var clearHistory = function clearHistory() {\n      if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n        quizHistory.value = [];\n        localStorage.removeItem('quizHistory');\n      }\n    };\n    var __returned__ = {\n      selectedFiles: selectedFiles,\n      fileInput: fileInput,\n      unsupportedFiles: unsupportedFiles,\n      extractionErrors: extractionErrors,\n      questionCount: questionCount,\n      isLoading: isLoading,\n      error: error,\n      predictedScore: predictedScore,\n      quizStarted: quizStarted,\n      quizFinished: quizFinished,\n      adaptiveQuestions: adaptiveQuestions,\n      userResponses: userResponses,\n      extractedContent: extractedContent,\n      quizHistory: quizHistory,\n      isRetaking: isRetaking,\n      retakeIndex: retakeIndex,\n      isFormValid: isFormValid,\n      hasFileErrors: hasFileErrors,\n      getPredictedScoreClass: getPredictedScoreClass,\n      triggerFileInput: triggerFileInput,\n      handleFileSelect: handleFileSelect,\n      handleDrop: handleDrop,\n      addFiles: addFiles,\n      removeFile: removeFile,\n      handleSubmit: handleSubmit,\n      startQuiz: startQuiz,\n      handleQuizComplete: handleQuizComplete,\n      restartQuiz: restartQuiz,\n      resetToMainScreen: resetToMainScreen,\n      readFileContent: readFileContent,\n      generateQuestions: generateQuestions,\n      isSimilarQuestion: isSimilarQuestion,\n      processQuizResponse: processQuizResponse,\n      findExplanationFromContent: findExplanationFromContent,\n      selectQuestions: selectQuestions,\n      calculatePredictedScore: calculatePredictedScore,\n      analyzeContentForCoverage: analyzeContentForCoverage,\n      analyzeContentComplexity: analyzeContentComplexity,\n      analyzeQuestionDiversity: analyzeQuestionDiversity,\n      formatQuestionsForResults: formatQuestionsForResults,\n      formatUserAnswersForResults: formatUserAnswersForResults,\n      correctAnswersCount: correctAnswersCount,\n      calculateScore: calculateScore,\n      saveQuizResults: saveQuizResults,\n      handleRetakeQuiz: handleRetakeQuiz,\n      handleCreateQuiz: handleCreateQuiz,\n      clearHistory: clearHistory,\n      ref: ref,\n      computed: computed,\n      onMounted: onMounted,\n      get axios() {\n        return axios;\n      },\n      FileErrorDisplay: FileErrorDisplay,\n      QuizResults: QuizResults,\n      FlashcardQuiz: FlashcardQuiz,\n      Sidebar: Sidebar\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","axios","FileErrorDisplay","QuizResults","FlashcardQuiz","Sidebar","selectedFiles","fileInput","unsupportedFiles","extractionErrors","questionCount","isLoading","error","predictedScore","quizStarted","quizFinished","adaptiveQuestions","userResponses","extractedContent","quizHistory","isRetaking","retakeIndex","savedHistory","localStorage","getItem","value","JSON","parse","isFormValid","length","hasFileErrors","getPredictedScoreClass","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validTypes","validFiles","invalidFiles","forEach","file","includes","type","push","concat","_toConsumableArray","removeFile","index","splice","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fileContents","validContents","requestedQuestionCount","questions","wrap","_callee$","_context","prev","next","abrupt","console","log","map","f","name","Promise","all","readFileContent","sent","filter","content","trim","Error","join","Number","generateQuestions","calculatePredictedScore","t0","message","finish","stop","apply","arguments","startQuiz","handleQuizComplete","responses","question","_responses$index","_responses$index2","_objectSpread","userAnswer","isCorrect","correct","saveQuizResults","restartQuiz","resetToMainScreen","_x","_readFileContent","_callee3","_callee3$","_context3","resolve","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","data","text","fileName","_x2","_x3","_generateQuestions","_callee4","count","maxRetries","retryCount","allQuestions","_response$data","remainingCount","strategy","prompt","response","newQuestions","uniqueNewQuestions","_error$response","_error$response2","_callee4$","_context4","post","VUE_APP_GEMINI_API_KEY","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","candidates","processQuizResponse","newQ","some","existingQ","isSimilarQuestion","slice","setTimeout","t1","status","q1","q2","normalize","toLowerCase","replace","q1Text","q2Text","q1Options","Object","values","options","q2Options","commonOptions","opt","q1Words","Set","split","q2Words","commonWords","x","has","overlapRatio","size","Math","min","lines","currentQuestion","collectingOptions","i","line","match","isMultipleChoice","startsWith","correctAnswer","explanation","difficulty","optionMatch","letter","toUpperCase","option","answer","substring","validQuestions","q","hasEnoughOptions","keys","hasCorrectAnswer","findExplanationFromContent","paragraphs","searchTerms","word","relevantParagraphs","paragraph","normalizedParagraph","score","term","p","sort","a","b","isTrue","correctOption","selectQuestions","shuffledQuestions","random","uniqueQuestions","self","findIndex","targetPerDifficulty","ceil","selectedQuestions","difficultyCount","easy","medium","hard","contentCoverage","analyzeContentForCoverage","contentComplexity","analyzeContentComplexity","questionDiversity","analyzeQuestionDiversity","coverageWeight","complexityWeight","diversityWeight","max","round","totalContent","averageContentPerQuestion","expectedQuestions","actualQuestions","coverage","complexityIndicators","complexityScore","indicator","regex","RegExp","matches","normalizedScore","types","typesDiversity","questionTexts","uniqueTopics","processedKeywords","keywords","keyword","add","topicsDiversity","formatQuestionsForResults","_userResponses$value$","_userResponses$value$2","formatUserAnswersForResults","r","correctAnswersCount","calculateScore","correctAnswers","_selectedFiles$value$","quizResult","actualScore","date","Date","fileContent","unshift","setItem","stringify","handleRetakeQuiz","_ref3","_callee2","quizToRetake","processedQuiz","_err$response","_callee2$","_context2","quiz","toString","File","_x4","handleCreateQuiz","clearHistory","confirm","removeItem"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <Sidebar \n      :quiz-history=\"quizHistory\" \n      @create-quiz=\"handleCreateQuiz\"\n      @retake-quiz=\"handleRetakeQuiz\"\n      @clear-history=\"clearHistory\"\n    />\n    <div class=\"main-content\">\n      <div class=\"upload-container\">\n        <h1>QUIZZy</h1>\n        \n        <div v-if=\"!quizStarted && !quizFinished && predictedScore === null\" class=\"file-upload-section\">\n          <h2>Upload Files</h2>\n          <div class=\"upload-area\" \n            @dragover.prevent \n            @drop.prevent=\"handleDrop\"\n            @click=\"triggerFileInput\"\n            role=\"button\"\n            tabindex=\"0\"\n            @keydown.enter=\"triggerFileInput\"\n          >\n            <input \n              type=\"file\" \n              @change=\"handleFileSelect\" \n              accept=\".pdf,.docx,.pptx,.txt\"\n              ref=\"fileInput\"\n              class=\"file-input\"\n            >\n            <div class=\"upload-prompt\">\n              <p>Drag and drop files here or click to select</p>\n              <div class=\"supported-formats\">\n                <p>Supported formats:</p>\n                <ul>\n                  <li><span class=\"format-icon\">📄</span> Documents (PDF, DOCX)</li>\n                  <li><span class=\"format-icon\">📊</span> Presentations (PPTX)</li>\n                  <li><span class=\"format-icon\">📝</span> Text files (TXT)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"hasFileErrors\" class=\"error-section\">\n            <FileErrorDisplay\n              :extraction-errors=\"extractionErrors\"\n              :unsupported-files=\"unsupportedFiles\"\n            />\n          </div>\n\n          <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n            <h3>Selected Files:</h3>\n            <ul>\n              <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n                <span class=\"file-name\">{{ file.name }}</span>\n                <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">×</button>\n              </li>\n            </ul>\n          </div>\n\n          <div class=\"questions-section\">\n            <h2>Number of Questions</h2>\n            <div class=\"question-input\">\n              <input\n                type=\"number\"\n                v-model=\"questionCount\"\n                min=\"1\"\n                max=\"20\"\n                placeholder=\"Enter number of questions\"\n              />\n            </div>\n          </div>\n\n          <button \n            class=\"submit-btn\" \n            :disabled=\"!isFormValid || isLoading\"\n            @click=\"handleSubmit\"\n          >\n            {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n          </button>\n        </div>\n\n        <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n          <div class=\"predicted-score-container\">\n            <h2>Ready to Start!</h2>\n            <div class=\"score-prediction\">\n              <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n                <span class=\"predicted-value\">{{ predictedScore }}%</span>\n                <span class=\"prediction-label\">Predicted Score</span>\n              </div>\n            </div>\n            <p class=\"prediction-explanation\">\n              Based on your study material, we predict you'll score around {{ predictedScore }}%.\n            </p>\n            <button class=\"start-quiz-btn\" @click=\"startQuiz\">Start Quiz</button>\n          </div>\n        </div>\n\n        <FlashcardQuiz\n          v-if=\"quizStarted && !quizFinished\"\n          :questions=\"adaptiveQuestions\"\n          :total-questions=\"Number(questionCount)\"\n          @quiz-completed=\"handleQuizComplete\"\n        />\n\n        <QuizResults\n          v-if=\"quizFinished\"\n          :questions=\"formatQuestionsForResults\"\n          :user-answers=\"formatUserAnswersForResults\"\n          :score=\"correctAnswersCount\"\n          :predicted-score=\"predictedScore\"\n          @restart=\"restartQuiz\"\n          @go-back=\"resetToMainScreen\"\n        />\n\n        <div v-if=\"error\" class=\"error-message\">\n          {{ error }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading Overlay -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <div class=\"loading-content\">\n        <div class=\"typewriter\">Generating quiz</div>\n        <div class=\"dots\">\n          <span>.</span>\n          <span>.</span>\n          <span>.</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\n\n// File handling state\nconst selectedFiles = ref([]);\nconst fileInput = ref(null);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\n\n// Quiz state\nconst questionCount = ref('');\nconst isLoading = ref(false);\nconst error = ref('');\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst quizFinished = ref(false);\nconst adaptiveQuestions = ref([]);\nconst userResponses = ref([]);\nconst extractedContent = ref('');\n\n// Add quiz history state\nconst quizHistory = ref([]);\n\n// Add isRetaking flag to track retakes\nconst isRetaking = ref(false);\nconst retakeIndex = ref(-1);\n\n// Load quiz history from localStorage on mount\nonMounted(() => {\n  const savedHistory = localStorage.getItem('quizHistory');\n  if (savedHistory) {\n    quizHistory.value = JSON.parse(savedHistory);\n  }\n});\n\n// Computed properties\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n\n// File handling methods\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\n// Quiz handling methods\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  userResponses.value = [];\n  extractedContent.value = '';\n  extractionErrors.value = [];\n\n  try {\n    console.log('Processing files:', selectedFiles.value.map(f => ({ name: f.name, type: f.type })));\n    \n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    const validContents = fileContents.filter(content => content && content.trim().length > 0);\n    console.log('Number of files with valid content:', validContents.length);\n    \n    if (validContents.length === 0) {\n      throw new Error('No valid content could be extracted from the selected files.');\n    }\n\n    extractedContent.value = validContents.join('\\n\\n');\n    console.log('Total content length:', extractedContent.value.length);\n    \n    if (extractedContent.value.trim().length < 50) {\n      throw new Error('The extracted content is too short to generate meaningful questions.');\n    }\n\n    const requestedQuestionCount = Number(questionCount.value);\n    console.log('Requesting questions:', requestedQuestionCount);\n    \n    const questions = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    \n    if (!questions || questions.length === 0) {\n      throw new Error('No valid questions could be generated.');\n    }\n\n    console.log('Generated questions:', questions.length);\n    adaptiveQuestions.value = questions;\n    predictedScore.value = calculatePredictedScore();\n\n  } catch (err) {\n    console.error('Error in handleSubmit:', err);\n    error.value = err.message || 'An unexpected error occurred while generating questions.';\n    adaptiveQuestions.value = [];\n    predictedScore.value = null;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n};\n\nconst handleQuizComplete = (responses) => {\n  userResponses.value = responses;\n  // Update the adaptiveQuestions with user answers\n  adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => ({\n    ...question,\n    userAnswer: responses[index]?.userAnswer,\n    isCorrect: responses[index]?.correct\n  }));\n  quizFinished.value = true;\n  saveQuizResults();\n};\n\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  userResponses.value = [];\n};\n\nconst resetToMainScreen = () => {\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\n// Helper functions\nasync function readFileContent(file) {\n  return new Promise((resolve) => {\n    try {\n      console.log('File type:', file.type);\n      console.log('File name:', file.name);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n      .then(res => res.json())\n      .then(data => {\n        if (data.text) {\n          resolve(data.text);\n        } else {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: data.error || 'Failed to extract text from file'\n          });\n          resolve('');\n        }\n      })\n      .catch(error => {\n        console.error('Error processing file:', error);\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: `Error processing file: ${error.message}`\n        });\n        resolve('');\n      });\n    } catch (error) {\n      console.error('Error preparing file:', error);\n      extractionErrors.value.push({\n        fileName: file.name,\n        message: `Error preparing file: ${error.message}`\n      });\n      resolve('');\n    }\n  });\n}\n\nasync function generateQuestions(content, count) {\n  const maxRetries = 3;\n  let retryCount = 0;\n  let allQuestions = [];\n\n  while (retryCount < maxRetries && allQuestions.length < count) {\n    try {\n      const remainingCount = count - allQuestions.length;\n      const strategy = retryCount % 3;\n      let prompt = '';\n\n      switch (strategy) {\n        case 0:\n          prompt = `Create exactly ${remainingCount} unique questions based on this text. Mix multiple-choice and true/false questions.\nUse this EXACT format - no variations allowed:\n\nFor multiple choice questions:\nQuestion: [question text]\nA) [option]\nB) [option]\nC) [option]\nD) [option]\nAnswer: [A/B/C/D] (add * after the correct answer letter)\nDifficulty: [easy/medium/hard]\n\nFor true/false questions:\nTrue/False: [question text]\nAnswer: [True* or False*]\nDifficulty: [easy/medium/hard]\n\nText to use:\n${content}`;\n          break;\n\n        case 1:\n          prompt = `Create exactly ${remainingCount} unique questions using opposite concepts or negations.\nUse the EXACT same format as above, focusing on:\n- What is NOT mentioned in the text\n- Opposite relationships\n- Contrasting concepts\n\nText to use:\n${content}`;\n          break;\n\n        case 2:\n          prompt = `Create exactly ${remainingCount} unique application questions.\nUse the EXACT same format as above, focusing on:\n- Applying concepts from the text\n- \"What if\" scenarios\n- Inferring from given information\n\nText to use:\n${content}`;\n          break;\n      }\n\n      const response = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n        {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7 + (retryCount * 0.1),\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 2048,\n          }\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (!response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {\n        throw new Error('Invalid response format from Gemini API');\n      }\n\n      const newQuestions = processQuizResponse(response.data.candidates[0].content.parts[0].text, content).questions;\n      \n      // Filter out similar questions\n      const uniqueNewQuestions = newQuestions.filter(newQ => \n        !allQuestions.some(existingQ => isSimilarQuestion(newQ, existingQ))\n      );\n\n      allQuestions = [...allQuestions, ...uniqueNewQuestions];\n      \n      if (allQuestions.length >= count) {\n        return allQuestions.slice(0, count);\n      }\n\n      retryCount++;\n      \n      if (uniqueNewQuestions.length === 0) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n    } catch (error) {\n      console.error(`Attempt ${retryCount + 1} failed:`, error);\n      retryCount++;\n      \n      if (error.response?.status === 429) {\n        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n      } else if (retryCount === maxRetries) {\n        throw new Error(`Failed to generate enough unique questions after ${maxRetries} attempts. ${error.response?.data?.error?.message || error.message}`);\n      } else {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  if (allQuestions.length < count) {\n    throw new Error(`Could only generate ${allQuestions.length} unique questions out of ${count} requested. Please try with different content or reduce the number of questions.`);\n  }\n\n  return allQuestions;\n}\n\n// Helper function to check if two questions are too similar\nfunction isSimilarQuestion(q1, q2) {\n  // Convert both questions to lowercase and remove punctuation\n  const normalize = text => text.toLowerCase().replace(/[^\\w\\s]/g, '');\n  const q1Text = normalize(q1.text);\n  const q2Text = normalize(q2.text);\n\n  // If the questions are exactly the same, they're similar\n  if (q1Text === q2Text) return true;\n\n  // If they're different types (MC vs T/F), they're not similar\n  if (q1.type !== q2.type) return false;\n\n  // For multiple choice questions, check if the options are too similar\n  if (q1.type === 'multiple-choice' && q2.type === 'multiple-choice') {\n    const q1Options = Object.values(q1.options).map(normalize);\n    const q2Options = Object.values(q2.options).map(normalize);\n    const commonOptions = q1Options.filter(opt => q2Options.includes(opt));\n    if (commonOptions.length >= 3) return true; // If 3 or more options are the same, consider them similar\n  }\n\n  // Check for word overlap ratio\n  const q1Words = new Set(q1Text.split(/\\s+/));\n  const q2Words = new Set(q2Text.split(/\\s+/));\n  const commonWords = new Set([...q1Words].filter(x => q2Words.has(x)));\n  const overlapRatio = commonWords.size / Math.min(q1Words.size, q2Words.size);\n\n  return overlapRatio > 0.7; // If more than 70% of words overlap, consider them similar\n}\n\nfunction processQuizResponse(response, content) {\n  const questions = [];\n  const lines = response.split('\\n');\n  let currentQuestion = null;\n  let collectingOptions = false;\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n\n    // Check for question start\n    if (line.match(/^(Question:|True\\/False:)/i)) {\n      if (currentQuestion) {\n        questions.push(currentQuestion);\n      }\n\n      const isMultipleChoice = line.startsWith('Question:');\n      currentQuestion = {\n        text: line.replace(/^(Question:|True\\/False:)/i, '').trim(),\n        type: isMultipleChoice ? 'multiple-choice' : 'true-false',\n        options: isMultipleChoice ? {} : { 'true': 'True', 'false': 'False' },\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n      collectingOptions = true;\n      continue;\n    }\n\n    if (!currentQuestion) continue;\n\n    // Handle options for multiple choice\n    if (currentQuestion.type === 'multiple-choice') {\n      const optionMatch = line.match(/^([A-D])[).]\\s*(.*)/i);\n      if (optionMatch) {\n        const letter = optionMatch[1].toUpperCase();\n        let option = optionMatch[2].trim();\n        \n        if (option.includes('*')) {\n          currentQuestion.correctAnswer = letter;\n          option = option.replace(/\\*/g, '').trim();\n        }\n        currentQuestion.options[letter] = option;\n      }\n    }\n\n    // Handle true/false answer\n    if (currentQuestion.type === 'true-false' && line.toLowerCase().startsWith('answer:')) {\n      const answer = line.substring(7).trim().toLowerCase();\n      if (answer.includes('true*') || answer.includes('*true')) {\n        currentQuestion.correctAnswer = 'true';\n      } else if (answer.includes('false*') || answer.includes('*false')) {\n        currentQuestion.correctAnswer = 'false';\n      }\n    }\n\n    // Handle difficulty\n    if (line.toLowerCase().startsWith('difficulty:')) {\n      const difficulty = line.substring(11).trim().toLowerCase();\n      if (['easy', 'medium', 'hard'].includes(difficulty)) {\n        currentQuestion.difficulty = difficulty;\n      }\n    }\n  }\n\n  // Don't forget to add the last question\n  if (currentQuestion) {\n    questions.push(currentQuestion);\n  }\n\n  // Validate questions\n  const validQuestions = questions.filter(q => {\n    // Basic validation\n    if (!q.text || !q.type) return false;\n\n    // Validate multiple choice questions\n    if (q.type === 'multiple-choice') {\n      const hasEnoughOptions = Object.keys(q.options).length >= 2;\n      const hasCorrectAnswer = !!q.correctAnswer && !!q.options[q.correctAnswer];\n      return hasEnoughOptions && hasCorrectAnswer;\n    }\n\n    // Validate true/false questions\n    if (q.type === 'true-false') {\n      return q.correctAnswer === 'true' || q.correctAnswer === 'false';\n    }\n\n    return false;\n  });\n\n  if (validQuestions.length === 0) {\n    console.error('Raw response:', response);\n    console.error('Parsed questions:', questions);\n    throw new Error('No valid questions could be generated from the content.');\n  }\n\n  // Add explanations from content\n  validQuestions.forEach(q => findExplanationFromContent(q, content));\n\n  return { questions: validQuestions };\n}\n\nfunction findExplanationFromContent(question, content) {\n  // Split content into paragraphs\n  const paragraphs = content.split(/\\n\\s*\\n/);\n  \n  // Create search terms from the question and answer\n  const searchTerms = [\n    ...question.text.toLowerCase().replace(/[.,?!]/g, '').split(' '),\n    ...(question.type === 'multiple-choice' && question.options[question.correctAnswer] \n      ? question.options[question.correctAnswer].toLowerCase().split(' ') \n      : [])\n  ].filter(word => word.length > 3);\n  \n  // Find relevant paragraphs with scoring\n  const relevantParagraphs = paragraphs.map(paragraph => {\n    const normalizedParagraph = paragraph.toLowerCase();\n    let score = 0;\n    \n    // Score exact phrase matches higher\n    if (normalizedParagraph.includes(question.text.toLowerCase())) {\n      score += 15;\n    }\n    \n    // Score keyword matches\n    searchTerms.forEach(term => {\n      if (normalizedParagraph.includes(term)) {\n        score += 2;\n      }\n    });\n\n    return {\n      text: paragraph.trim(),\n      score\n    };\n  }).filter(p => p.score > 0)\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 1); // Get most relevant paragraph\n\n  if (relevantParagraphs.length > 0) {\n    question.explanation = relevantParagraphs[0].text;\n  } else {\n    // Basic fallback explanations\n    if (question.type === 'true-false') {\n      const isTrue = question.correctAnswer === 'true';\n      question.explanation = `This statement is ${isTrue ? 'true' : 'false'} based on the provided content.`;\n    } else {\n      const correctOption = question.options[question.correctAnswer];\n      question.explanation = `The correct answer is \"${correctOption}\" according to the material.`;\n    }\n  }\n}\n\nfunction selectQuestions(questions) {\n  // First, shuffle all questions\n  const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);\n  \n  // Remove duplicates while preserving order\n  const uniqueQuestions = shuffledQuestions.filter((question, index, self) => \n    index === self.findIndex((q) => \n      q.text.toLowerCase().replace(/[^\\w\\s]/g, '') === \n      question.text.toLowerCase().replace(/[^\\w\\s]/g, '')\n    )\n  );\n\n  // Return all unique questions if we don't have enough\n  if (uniqueQuestions.length <= Number(questionCount.value)) {\n    return uniqueQuestions;\n  }\n\n  // Select the requested number of questions while maintaining difficulty distribution\n  const targetPerDifficulty = Math.ceil(Number(questionCount.value) / 3);\n  const selectedQuestions = [];\n  const difficultyCount = { easy: 0, medium: 0, hard: 0 };\n\n  // First pass: try to get equal distribution\n  uniqueQuestions.forEach(question => {\n    const difficulty = question.difficulty || 'medium';\n    if (difficultyCount[difficulty] < targetPerDifficulty && \n        selectedQuestions.length < Number(questionCount.value)) {\n      selectedQuestions.push(question);\n      difficultyCount[difficulty]++;\n    }\n  });\n\n  // Second pass: fill remaining slots if any\n  if (selectedQuestions.length < Number(questionCount.value)) {\n    uniqueQuestions.forEach(question => {\n      if (!selectedQuestions.includes(question) && \n          selectedQuestions.length < Number(questionCount.value)) {\n        selectedQuestions.push(question);\n      }\n    });\n  }\n\n  return selectedQuestions;\n}\n\nfunction calculatePredictedScore() {\n  const contentCoverage = analyzeContentForCoverage();\n  const contentComplexity = analyzeContentComplexity();\n  const questionDiversity = analyzeQuestionDiversity();\n  \n  // Weight factors\n  const coverageWeight = 0.4;\n  const complexityWeight = 0.3;\n  const diversityWeight = 0.3;\n  \n  // Calculate weighted score\n  const predictedScore = (\n    contentCoverage * coverageWeight +\n    contentComplexity * complexityWeight +\n    questionDiversity * diversityWeight\n  );\n  \n  return Math.max(0, Math.min(100, Math.round(predictedScore)));\n}\n\nfunction analyzeContentForCoverage() {\n  // Analyze how well the content matches with generated questions\n  const totalContent = extractedContent.value.length;\n  if (totalContent === 0) return 0;\n  \n  // Calculate coverage based on content length and number of questions\n  const averageContentPerQuestion = 500; // baseline characters per question\n  const expectedQuestions = Math.ceil(totalContent / averageContentPerQuestion);\n  const actualQuestions = Number(questionCount.value);\n  \n  const coverage = Math.min(actualQuestions / expectedQuestions, 1) * 100;\n  return coverage;\n}\n\nfunction analyzeContentComplexity() {\n  const content = extractedContent.value.toLowerCase();\n  \n  // Define complexity indicators\n  const complexityIndicators = [\n    'analyze', 'compare', 'contrast', 'evaluate', 'explain',\n    'describe', 'discuss', 'examine', 'interpret', 'justify',\n    'therefore', 'however', 'although', 'furthermore', 'consequently'\n  ];\n  \n  // Count complexity indicators\n  let complexityScore = 0;\n  complexityIndicators.forEach(indicator => {\n    const regex = new RegExp(indicator, 'g');\n    const matches = content.match(regex);\n    if (matches) {\n      complexityScore += matches.length;\n    }\n  });\n  \n  // Normalize score to 0-100 range\n  const normalizedScore = Math.min(complexityScore * 5, 100);\n  return normalizedScore;\n}\n\nfunction analyzeQuestionDiversity() {\n  if (!adaptiveQuestions.value.length) return 0;\n  \n  // Count different types of questions\n  const types = new Set(adaptiveQuestions.value.map(q => q.type));\n  const typesDiversity = (types.size / 2) * 50; // 2 is max types (multiple-choice and true-false)\n  \n  // Analyze question text similarity to ensure diverse topics\n  const questionTexts = adaptiveQuestions.value.map(q => q.text.toLowerCase());\n  let uniqueTopics = 0;\n  const processedKeywords = new Set();\n  \n  questionTexts.forEach(text => {\n    const keywords = text.split(' ')\n      .filter(word => word.length > 4) // Consider only significant words\n      .map(word => word.replace(/[^a-z]/g, '')); // Clean up words\n      \n    keywords.forEach(keyword => {\n      if (!processedKeywords.has(keyword)) {\n        uniqueTopics++;\n        processedKeywords.add(keyword);\n      }\n    });\n  });\n  \n  const topicsDiversity = Math.min(uniqueTopics / questionTexts.length * 50, 50);\n  \n  return typesDiversity + topicsDiversity;\n}\n\n// Results formatting\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    options: q.options,\n    userAnswer: userResponses.value[index]?.userAnswer,\n    correctAnswer: q.correctAnswer,\n    explanation: q.explanation,\n    isCorrect: userResponses.value[index]?.correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update the calculateScore function\nconst calculateScore = () => {\n  if (!userResponses.value.length) return 0;\n  const correctAnswers = userResponses.value.filter(r => r.correct).length;\n  return Math.round((correctAnswers / userResponses.value.length) * 100);\n};\n\n// Update the saveQuizResults function to handle retakes\nconst saveQuizResults = () => {\n  const quizResult = {\n    fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n    questionCount: Number(questionCount.value),\n    predictedScore: predictedScore.value,\n    actualScore: calculateScore(),\n    date: new Date(),\n    fileContent: extractedContent.value\n  };\n  \n  if (isRetaking.value && retakeIndex.value !== -1) {\n    // Update existing record\n    quizHistory.value[retakeIndex.value] = {\n      ...quizHistory.value[retakeIndex.value],\n      actualScore: quizResult.actualScore,\n      date: quizResult.date\n    };\n  } else {\n    // Add new record\n    quizHistory.value.unshift(quizResult);\n  }\n  \n  localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n  \n  // Reset retake flags\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Update the handleRetakeQuiz function to set retake flags\nconst handleRetakeQuiz = async (quizToRetake) => {\n  // Find the index of the quiz being retaken\n  retakeIndex.value = quizHistory.value.findIndex(quiz => \n    quiz.fileName === quizToRetake.fileName && \n    quiz.questionCount === quizToRetake.questionCount &&\n    quiz.fileContent === quizToRetake.fileContent\n  );\n  \n  if (retakeIndex.value === -1) {\n    console.error('Could not find original quiz to retake');\n    return;\n  }\n  \n  isRetaking.value = true;\n  \n  // Reset quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  \n  // Set the question count from the previous quiz\n  questionCount.value = quizToRetake.questionCount.toString();\n  \n  // Create a dummy file with the same name\n  const file = new File([''], quizToRetake.fileName, {\n    type: 'text/plain'\n  });\n  \n  // Set the selected file and content\n  selectedFiles.value = [file];\n  extractedContent.value = quizToRetake.fileContent;\n  \n  // Generate new quiz using the stored content\n  try {\n    isLoading.value = true;\n    const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n    \n    const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    const processedQuiz = processQuizResponse(response, extractedContent.value);\n    \n    adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n    predictedScore.value = calculatePredictedScore();\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response?.data?.error?.message || err.message}`;\n    // Reset retake flags on error\n    isRetaking.value = false;\n    retakeIndex.value = -1;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Update handleCreateQuiz to reset retake flags\nconst handleCreateQuiz = () => {\n  // Reset the quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  selectedFiles.value = [];\n  questionCount.value = '';\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Add the clearHistory function\nconst clearHistory = () => {\n  if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n    quizHistory.value = [];\n    localStorage.removeItem('quizHistory');\n  }\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px; /* Same as sidebar width */\n  padding: 2rem;\n  display: flex;\n  justify-content: center;\n}\n\n.upload-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 90%;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.85);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(2px);\n}\n\n.loading-content {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 2rem;\n  color: #333;\n  font-weight: 500;\n}\n\n.typewriter {\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(14) infinite;\n  border-right: 3px solid #4CAF50;\n}\n\n.dots {\n  display: flex;\n}\n\n.dots span {\n  opacity: 0;\n  animation: dot 1.5s infinite;\n  animation-fill-mode: both;\n}\n\n.dots span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.dots span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0%, 90%, 100% {\n    width: 0;\n  }\n  30%, 60% {\n    width: 14ch;\n  }\n}\n\n@keyframes dot {\n  0%, 100% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}