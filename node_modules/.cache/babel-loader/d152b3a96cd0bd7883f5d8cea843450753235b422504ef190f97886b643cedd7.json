{"ast":null,"code":"import _slicedToArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport QuizHistoryDetails from './components/QuizHistoryDetails.vue';\nimport AccountButton from './components/AccountButton.vue';\nimport StudyStats from './components/StudyStats.vue';\nimport SpacedRepetitionMonitor from './components/SpacedRepetitionMonitor.vue';\nimport { calculatePredictedScore, calculateScore, processQuizResponse, isSimilarQuestion, updateQuizState } from './algorithms';\nimport { calculateNextReview } from './algorithms/spaced-repetition';\nimport { useStore } from 'vuex';\nvar POOL_SIZE = 5;\nvar LOW_THRESHOLD = 2;\n\n// Add computed property for quiz history\n\nexport default {\n  __name: 'App',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var store = useStore();\n\n    // File handling state\n    var selectedFiles = ref([]);\n    var fileInput = ref(null);\n    var unsupportedFiles = ref([]);\n    var extractionErrors = ref([]);\n\n    // Quiz state\n    var questionCount = ref('');\n    var isLoading = ref(false);\n    var error = ref('');\n    var predictedScore = ref(null);\n    var quizStarted = ref(false);\n    var quizFinished = ref(false);\n    var adaptiveQuestions = ref([]);\n    var userResponses = ref([]);\n    var extractedContent = ref('');\n    var selectedQuiz = ref(null);\n\n    // Add isRetaking flag to track retakes\n    var isRetaking = ref(false);\n    var retakeIndex = ref(-1);\n\n    // Stats view state\n    var showStats = ref(false);\n    var showSpacedRepetitionMonitor = ref(false);\n\n    // Add new state for question pools\n    var questionPools = ref({\n      easy: [],\n      medium: [],\n      hard: []\n    });\n    var quizHistory = computed(function () {\n      return store.state.quizHistory;\n    });\n\n    // Initialize store and load data\n    onMounted(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return store.dispatch('initializeStore');\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })));\n\n    // Computed properties\n    var isFormValid = computed(function () {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    var hasFileErrors = computed(function () {\n      return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n    });\n    var getPredictedScoreClass = computed(function () {\n      if (predictedScore.value >= 80) return 'high';\n      if (predictedScore.value >= 60) return 'medium';\n      return 'low';\n    });\n\n    // File handling methods\n    var triggerFileInput = function triggerFileInput() {\n      fileInput.value.click();\n    };\n    var handleFileSelect = function handleFileSelect(event) {\n      var files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    var handleDrop = function handleDrop(event) {\n      var files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    var addFiles = function addFiles(files) {\n      var validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n      var validFiles = [];\n      var invalidFiles = [];\n      files.forEach(function (file) {\n        if (validTypes.includes(file.type)) {\n          validFiles.push(file);\n        } else {\n          invalidFiles.push(file);\n        }\n      });\n      selectedFiles.value = [].concat(_toConsumableArray(selectedFiles.value), validFiles);\n      unsupportedFiles.value = [].concat(_toConsumableArray(unsupportedFiles.value), invalidFiles);\n    };\n    var removeFile = function removeFile(index) {\n      selectedFiles.value.splice(index, 1);\n    };\n\n    // Quiz handling methods\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var fileContents, validContents;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (isFormValid.value) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 2:\n              isLoading.value = true;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n              quizStarted.value = false;\n              userResponses.value = [];\n              extractedContent.value = '';\n              extractionErrors.value = [];\n              _context2.prev = 10;\n              console.log('Processing files:', selectedFiles.value.map(function (f) {\n                return {\n                  name: f.name,\n                  type: f.type\n                };\n              }));\n              _context2.next = 14;\n              return Promise.all(selectedFiles.value.map(function (file) {\n                return readFileContent(file);\n              }));\n            case 14:\n              fileContents = _context2.sent;\n              validContents = fileContents.filter(function (content) {\n                return content && content.trim().length > 0;\n              });\n              console.log('Number of files with valid content:', validContents.length);\n              if (!(validContents.length === 0)) {\n                _context2.next = 19;\n                break;\n              }\n              throw new Error('No valid content could be extracted from the selected files.');\n            case 19:\n              extractedContent.value = validContents.join('\\n\\n');\n              console.log('Total content length:', extractedContent.value.length);\n              if (!(extractedContent.value.trim().length < 50)) {\n                _context2.next = 23;\n                break;\n              }\n              throw new Error('The extracted content is too short to generate meaningful questions.');\n            case 23:\n              _context2.next = 25;\n              return generateQuestionPools();\n            case 25:\n              predictedScore.value = calculatePredictedScore([].concat(_toConsumableArray(questionPools.value.easy), _toConsumableArray(questionPools.value.medium), _toConsumableArray(questionPools.value.hard)));\n              _context2.next = 34;\n              break;\n            case 28:\n              _context2.prev = 28;\n              _context2.t0 = _context2[\"catch\"](10);\n              console.error('Error in handleSubmit:', _context2.t0);\n              error.value = _context2.t0.message || 'An unexpected error occurred while generating questions.';\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n            case 34:\n              _context2.prev = 34;\n              isLoading.value = false;\n              return _context2.finish(34);\n            case 37:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[10, 28, 34, 37]]);\n      }));\n      return function handleSubmit() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // New function to generate questions for a specific difficulty\n    var generateQuestionsForDifficulty = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(difficulty, count) {\n        var questions;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return generateQuestions(extractedContent.value, count, difficulty // We'll need to modify generateQuestions to accept this parameter\n              );\n            case 2:\n              questions = _context3.sent;\n              return _context3.abrupt(\"return\", questions.map(function (q) {\n                return _objectSpread(_objectSpread({}, q), {}, {\n                  difficulty: difficulty,\n                  id: crypto.randomUUID(),\n                  adapted: false\n                });\n              }));\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return function generateQuestionsForDifficulty(_x, _x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    // New function to manage question pools\n    var generateQuestionPools = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$Promise$all, _yield$Promise$all2, easyQuestions, mediumQuestions, hardQuestions;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return Promise.all([generateQuestionsForDifficulty('easy', POOL_SIZE), generateQuestionsForDifficulty('medium', POOL_SIZE), generateQuestionsForDifficulty('hard', POOL_SIZE)]);\n            case 3:\n              _yield$Promise$all = _context4.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n              easyQuestions = _yield$Promise$all2[0];\n              mediumQuestions = _yield$Promise$all2[1];\n              hardQuestions = _yield$Promise$all2[2];\n              questionPools.value = {\n                easy: easyQuestions,\n                medium: mediumQuestions,\n                hard: hardQuestions\n              };\n              _context4.next = 15;\n              break;\n            case 11:\n              _context4.prev = 11;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('Error generating question pools:', _context4.t0);\n              throw _context4.t0;\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 11]]);\n      }));\n      return function generateQuestionPools() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    // Modified startQuiz to use medium questions initially\n    var startQuiz = function startQuiz() {\n      // Start with medium questions\n      adaptiveQuestions.value = questionPools.value.medium.slice(0, Number(questionCount.value));\n      quizStarted.value = true;\n      quizFinished.value = false;\n    };\n\n    // New function to check and replenish question pools\n    var replenishQuestionPool = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(difficulty) {\n        var pool, neededQuestions, newQuestions;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              pool = questionPools.value[difficulty];\n              if (!(pool.length <= LOW_THRESHOLD)) {\n                _context5.next = 7;\n                break;\n              }\n              neededQuestions = POOL_SIZE - pool.length;\n              _context5.next = 5;\n              return generateQuestionsForDifficulty(difficulty, neededQuestions);\n            case 5:\n              newQuestions = _context5.sent;\n              questionPools.value[difficulty] = [].concat(_toConsumableArray(pool), _toConsumableArray(newQuestions));\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n      return function replenishQuestionPool(_x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    // Modified handleQuestionUpdate to use question pools\n    var handleQuestionUpdate = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(updatedQuestion) {\n        var adaptiveState, currentIndex, currentDifficulty, nextDifficulty, nextQuestion;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              // Update quiz state based on user's answer\n              adaptiveState = updateQuizState({\n                availableQuestions: adaptiveQuestions.value,\n                usedQuestions: userResponses.value,\n                currentDifficulty: updatedQuestion.difficulty\n              }, {\n                questionId: updatedQuestion.id,\n                correct: updatedQuestion.correct,\n                difficulty: updatedQuestion.difficulty\n              }); // Find the current question index\n              currentIndex = adaptiveQuestions.value.findIndex(function (q) {\n                return q.id === updatedQuestion.id;\n              });\n              if (!(currentIndex === -1)) {\n                _context6.next = 4;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 4:\n              // Update the current question with the user's response\n              adaptiveQuestions.value[currentIndex] = _objectSpread(_objectSpread({}, updatedQuestion), {}, {\n                adapted: true\n              });\n\n              // Remove the used question from its pool\n              currentDifficulty = updatedQuestion.difficulty;\n              questionPools.value[currentDifficulty] = questionPools.value[currentDifficulty].filter(function (q) {\n                return q.id !== updatedQuestion.id;\n              });\n\n              // Check if we need to replenish the pool\n              _context6.next = 9;\n              return replenishQuestionPool(currentDifficulty);\n            case 9:\n              // If there's a next question, select it from the appropriate pool based on adaptive state\n              if (currentIndex + 1 < Number(questionCount.value)) {\n                nextDifficulty = adaptiveState.currentDifficulty;\n                nextQuestion = questionPools.value[nextDifficulty][0];\n                if (nextQuestion) {\n                  adaptiveQuestions.value[currentIndex + 1] = _objectSpread(_objectSpread({}, nextQuestion), {}, {\n                    adapted: false\n                  });\n                }\n              }\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }));\n      return function handleQuestionUpdate(_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n    var handleQuizComplete = function handleQuizComplete(responses) {\n      userResponses.value = responses;\n\n      // Update the adaptiveQuestions with user answers and spaced repetition data\n      adaptiveQuestions.value = adaptiveQuestions.value.map(function (question, index) {\n        var response = responses[index];\n        var performance = response !== null && response !== void 0 && response.correct ? 5 : 0; // 5 for correct, 0 for incorrect\n\n        // Update spaced repetition data using the new function\n        var updatedSpacedRepetition = calculateNextReview(question.spacedRepetition, performance);\n        return _objectSpread(_objectSpread({}, question), {}, {\n          userAnswer: response === null || response === void 0 ? void 0 : response.userAnswer,\n          isCorrect: response === null || response === void 0 ? void 0 : response.correct,\n          spacedRepetition: updatedSpacedRepetition\n        });\n      });\n\n      // Set quiz states\n      quizStarted.value = false;\n      quizFinished.value = true;\n\n      // Save results\n      saveQuizResults();\n    };\n    var restartQuiz = function restartQuiz() {\n      quizStarted.value = true;\n      quizFinished.value = false;\n      userResponses.value = [];\n    };\n    var resetToMainScreen = function resetToMainScreen() {\n      selectedFiles.value = [];\n      unsupportedFiles.value = [];\n      extractionErrors.value = [];\n      questionCount.value = '';\n      error.value = '';\n      isLoading.value = false;\n      predictedScore.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n\n    // Helper functions\n    function readFileContent(_x5) {\n      return _readFileContent.apply(this, arguments);\n    }\n    function _readFileContent() {\n      _readFileContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(file) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", new Promise(function (resolve) {\n                try {\n                  console.log('File type:', file.type);\n                  console.log('File name:', file.name);\n                  var formData = new FormData();\n                  formData.append('file', file);\n                  var backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n                  fetch(\"\".concat(backendUrl, \"/extract-file\"), {\n                    method: 'POST',\n                    body: formData\n                  }).then(function (res) {\n                    return res.json();\n                  }).then(function (data) {\n                    if (data.text) {\n                      resolve(data.text);\n                    } else {\n                      extractionErrors.value.push({\n                        fileName: file.name,\n                        message: data.error || 'Failed to extract text from file'\n                      });\n                      resolve('');\n                    }\n                  })[\"catch\"](function (error) {\n                    console.error('Error processing file:', error);\n                    extractionErrors.value.push({\n                      fileName: file.name,\n                      message: \"Error processing file: \".concat(error.message)\n                    });\n                    resolve('');\n                  });\n                } catch (error) {\n                  console.error('Error preparing file:', error);\n                  extractionErrors.value.push({\n                    fileName: file.name,\n                    message: \"Error preparing file: \".concat(error.message)\n                  });\n                  resolve('');\n                }\n              }));\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }));\n      return _readFileContent.apply(this, arguments);\n    }\n    function generateQuestions(_x6, _x7) {\n      return _generateQuestions.apply(this, arguments);\n    } // Results formatting\n    function _generateQuestions() {\n      _generateQuestions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(content, count) {\n        var targetDifficulty,\n          maxRetries,\n          retryCount,\n          allQuestions,\n          _response$data,\n          remainingCount,\n          strategy,\n          prompt,\n          response,\n          responseText,\n          newQuestions,\n          validQuestions,\n          questionsWithIds,\n          uniqueNewQuestions,\n          _error$response,\n          _error$response2,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              targetDifficulty = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : null;\n              maxRetries = 3;\n              retryCount = 0;\n              allQuestions = [];\n            case 4:\n              if (!(retryCount < maxRetries && allQuestions.length < count)) {\n                _context9.next = 57;\n                break;\n              }\n              _context9.prev = 5;\n              remainingCount = count - allQuestions.length;\n              strategy = retryCount % 3;\n              prompt = \"Generate exactly \".concat(remainingCount, \" questions with \").concat(targetDifficulty || 'mixed', \" difficulty. DO NOT use markdown formatting or asterisks for emphasis.\\nFOLLOW THIS EXACT FORMAT WITH NO DEVIATIONS:\\n\\nFor Multiple Choice Questions:\\nQuestion: What is the question text?\\nA) First option\\nB) Second option\\nC) Third option\\nD) Fourth option\\nAnswer: A* (or B*, C*, D* - add asterisk to correct answer)\\nDifficulty: \").concat(targetDifficulty || 'medium', \" (\").concat(targetDifficulty ? \"must be \".concat(targetDifficulty) : 'or easy or hard', \")\\n\\nFor True/False Questions:\\nTrue/False: What is the question text?\\nAnswer: True* (or False* - add asterisk to correct answer)\\nDifficulty: \").concat(targetDifficulty || 'medium', \" (\").concat(targetDifficulty ? \"must be \".concat(targetDifficulty) : 'or easy or hard', \")\\n\\nREQUIREMENTS:\\n1. Use the exact format shown above\\n2. Do not add any extra formatting or text\\n3. Do not use markdown\\n4. Do not use bold or italics\\n5. Each question must end with a difficulty level\").concat(targetDifficulty ? \" of \".concat(targetDifficulty) : '', \"\\n6. Questions must be based on this content:\\n\\n\").concat(content, \"\\n\\nSTRATEGY: \");\n              _context9.t0 = strategy;\n              _context9.next = _context9.t0 === 0 ? 12 : _context9.t0 === 1 ? 14 : _context9.t0 === 2 ? 16 : 18;\n              break;\n            case 12:\n              prompt += 'Create a mix of multiple-choice and true/false questions that directly test understanding of the content.';\n              return _context9.abrupt(\"break\", 18);\n            case 14:\n              prompt += 'Create questions that focus on what is NOT mentioned or opposite relationships in the content.';\n              return _context9.abrupt(\"break\", 18);\n            case 16:\n              prompt += 'Create questions that test application and inference of the concepts mentioned in the content.';\n              return _context9.abrupt(\"break\", 18);\n            case 18:\n              _context9.next = 20;\n              return axios.post(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\".concat(process.env.VUE_APP_GEMINI_API_KEY), {\n                contents: [{\n                  parts: [{\n                    text: prompt\n                  }]\n                }],\n                generationConfig: {\n                  temperature: 0.7 + retryCount * 0.1,\n                  topK: 40,\n                  topP: 0.95,\n                  maxOutputTokens: 2048\n                }\n              }, {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n            case 20:\n              response = _context9.sent;\n              if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data = _response$data.candidates) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && (_response$data = _response$data.content) !== null && _response$data !== void 0 && (_response$data = _response$data.parts) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && _response$data.text) {\n                _context9.next = 23;\n                break;\n              }\n              throw new Error('Invalid response format from Gemini API');\n            case 23:\n              responseText = response.data.candidates[0].content.parts[0].text.replace(/\\*\\*/g, '') // Remove markdown bold\n              .replace(/\\*/g, '*') // Normalize asterisks\n              .replace(/[\"\"]/g, '\"'); // Normalize quotes\n              console.log('Generated response:', responseText);\n              newQuestions = processQuizResponse(responseText, content).questions;\n              if (!(newQuestions.length === 0)) {\n                _context9.next = 31;\n                break;\n              }\n              console.error('No valid questions parsed from response');\n              _context9.next = 30;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 30:\n              return _context9.abrupt(\"continue\", 4);\n            case 31:\n              // Filter questions by difficulty if specified\n              validQuestions = targetDifficulty ? newQuestions.filter(function (q) {\n                return q.difficulty === targetDifficulty;\n              }) : newQuestions; // Add unique IDs and initialize spaced repetition data for new questions\n              questionsWithIds = validQuestions.map(function (q) {\n                return _objectSpread(_objectSpread({}, q), {}, {\n                  id: crypto.randomUUID(),\n                  spacedRepetition: {\n                    repetitions: 0,\n                    ease: 2.5,\n                    interval: 1,\n                    nextReviewDate: null,\n                    lastReviewDate: null\n                  }\n                });\n              });\n              uniqueNewQuestions = questionsWithIds.filter(function (newQ) {\n                return !allQuestions.some(function (existingQ) {\n                  return isSimilarQuestion(newQ, existingQ);\n                });\n              });\n              allQuestions = [].concat(_toConsumableArray(allQuestions), _toConsumableArray(uniqueNewQuestions));\n              if (!(allQuestions.length >= count)) {\n                _context9.next = 37;\n                break;\n              }\n              return _context9.abrupt(\"return\", allQuestions.slice(0, count));\n            case 37:\n              retryCount++;\n              _context9.next = 55;\n              break;\n            case 40:\n              _context9.prev = 40;\n              _context9.t1 = _context9[\"catch\"](5);\n              console.error(\"Attempt \".concat(retryCount + 1, \" failed:\"), _context9.t1);\n              retryCount++;\n              if (!(((_error$response = _context9.t1.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 429)) {\n                _context9.next = 49;\n                break;\n              }\n              _context9.next = 47;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 2000 * retryCount);\n              });\n            case 47:\n              _context9.next = 55;\n              break;\n            case 49:\n              if (!(retryCount === maxRetries)) {\n                _context9.next = 53;\n                break;\n              }\n              throw new Error(\"Failed to generate enough unique questions after \".concat(maxRetries, \" attempts. \").concat(((_error$response2 = _context9.t1.response) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.data) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.error) === null || _error$response2 === void 0 ? void 0 : _error$response2.message) || _context9.t1.message));\n            case 53:\n              _context9.next = 55;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 55:\n              _context9.next = 4;\n              break;\n            case 57:\n              if (!(allQuestions.length < count)) {\n                _context9.next = 59;\n                break;\n              }\n              throw new Error(\"Could only generate \".concat(allQuestions.length, \" unique questions out of \").concat(count, \" requested. Please try with different content or reduce the number of questions.\"));\n            case 59:\n              return _context9.abrupt(\"return\", allQuestions);\n            case 60:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, null, [[5, 40]]);\n      }));\n      return _generateQuestions.apply(this, arguments);\n    }\n    var formatQuestionsForResults = computed(function () {\n      return adaptiveQuestions.value.map(function (q, index) {\n        var _userResponses$value$, _userResponses$value$2;\n        return {\n          text: q.text,\n          type: q.type,\n          options: q.options,\n          userAnswer: (_userResponses$value$ = userResponses.value[index]) === null || _userResponses$value$ === void 0 ? void 0 : _userResponses$value$.userAnswer,\n          correctAnswer: q.correctAnswer,\n          explanation: q.explanation,\n          isCorrect: (_userResponses$value$2 = userResponses.value[index]) === null || _userResponses$value$2 === void 0 ? void 0 : _userResponses$value$2.correct\n        };\n      });\n    });\n    var formatUserAnswersForResults = computed(function () {\n      return userResponses.value.map(function (r) {\n        return r.userAnswer;\n      });\n    });\n    var correctAnswersCount = computed(function () {\n      return userResponses.value.filter(function (r) {\n        return r.correct;\n      }).length;\n    });\n\n    // Update the calculateScore function\n    var score = computed(function () {\n      return calculateScore(userResponses.value);\n    });\n\n    // Update the saveQuizResults function to use Vuex\n    var saveQuizResults = function saveQuizResults() {\n      var _selectedFiles$value$;\n      var quizResult = {\n        fileName: ((_selectedFiles$value$ = selectedFiles.value[0]) === null || _selectedFiles$value$ === void 0 ? void 0 : _selectedFiles$value$.name) || 'Untitled Quiz',\n        questionCount: Number(questionCount.value),\n        predictedScore: predictedScore.value,\n        actualScore: score.value / 100,\n        // Convert percentage to decimal\n        date: new Date(),\n        fileContent: extractedContent.value,\n        questions: adaptiveQuestions.value.map(function (q, index) {\n          var _userResponses$value$3, _userResponses$value$4;\n          return {\n            id: q.id,\n            text: q.text,\n            type: q.type,\n            options: q.options,\n            userAnswer: (_userResponses$value$3 = userResponses.value[index]) === null || _userResponses$value$3 === void 0 ? void 0 : _userResponses$value$3.userAnswer,\n            correctAnswer: q.correctAnswer,\n            isCorrect: (_userResponses$value$4 = userResponses.value[index]) === null || _userResponses$value$4 === void 0 ? void 0 : _userResponses$value$4.correct,\n            explanation: q.explanation,\n            difficulty: q.difficulty,\n            spacedRepetition: q.spacedRepetition\n          };\n        })\n      };\n      if (isRetaking.value && retakeIndex.value !== -1) {\n        store.commit('updateQuizResult', {\n          index: retakeIndex.value,\n          result: quizResult\n        });\n      } else {\n        store.commit('addQuizResult', quizResult);\n      }\n\n      // Also update the questions in the store with their new spaced repetition data\n      store.commit('updateQuestions', adaptiveQuestions.value);\n\n      // Save state to localStorage\n      store.dispatch('saveState');\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Update the handleRetakeQuiz function to set retake flags\n    var handleRetakeQuiz = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(quizToRetake) {\n        var file, requestedQuestionCount, questions;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              // Find the index of the quiz being retaken\n              retakeIndex.value = quizHistory.value.findIndex(function (quiz) {\n                return quiz.fileName === quizToRetake.fileName && quiz.questionCount === quizToRetake.questionCount && quiz.fileContent === quizToRetake.fileContent;\n              });\n              if (!(retakeIndex.value === -1)) {\n                _context7.next = 4;\n                break;\n              }\n              console.error('Could not find original quiz to retake');\n              return _context7.abrupt(\"return\");\n            case 4:\n              isRetaking.value = true;\n\n              // Reset quiz state\n              quizStarted.value = false;\n              quizFinished.value = false;\n              predictedScore.value = null;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              userResponses.value = [];\n              selectedQuiz.value = null; // Reset selected quiz\n\n              // Set the question count from the previous quiz\n              questionCount.value = quizToRetake.questionCount.toString();\n\n              // Create a dummy file with the same name\n              file = new File([''], quizToRetake.fileName, {\n                type: 'text/plain'\n              }); // Set the selected file and content\n              selectedFiles.value = [file];\n              extractedContent.value = quizToRetake.fileContent;\n\n              // Generate new quiz using the stored content\n              _context7.prev = 16;\n              isLoading.value = true;\n              requestedQuestionCount = Number(questionCount.value);\n              _context7.next = 21;\n              return generateQuestions(extractedContent.value, requestedQuestionCount);\n            case 21:\n              questions = _context7.sent;\n              if (!(!questions || questions.length === 0)) {\n                _context7.next = 24;\n                break;\n              }\n              throw new Error('No valid questions could be generated.');\n            case 24:\n              adaptiveQuestions.value = questions;\n              predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n\n              // After generating questions, start the quiz\n              quizStarted.value = true;\n              _context7.next = 34;\n              break;\n            case 29:\n              _context7.prev = 29;\n              _context7.t0 = _context7[\"catch\"](16);\n              error.value = \"Error generating questions: \".concat(_context7.t0.message);\n              // Reset retake flags on error\n              isRetaking.value = false;\n              retakeIndex.value = -1;\n            case 34:\n              _context7.prev = 34;\n              isLoading.value = false;\n              return _context7.finish(34);\n            case 37:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, null, [[16, 29, 34, 37]]);\n      }));\n      return function handleRetakeQuiz(_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n\n    // Update handleCreateQuiz to reset retake flags\n    var handleCreateQuiz = function handleCreateQuiz() {\n      showStats.value = false;\n      selectedQuiz.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      predictedScore.value = null;\n      selectedFiles.value = [];\n      questionCount.value = '';\n      error.value = '';\n      extractedContent.value = '';\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Add the clearHistory function\n    var clearHistory = function clearHistory() {\n      if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n        store.dispatch('clearQuizHistory');\n      }\n    };\n\n    // Add function to handle quiz selection\n    var handleQuizSelect = function handleQuizSelect(quiz) {\n      if (showStats.value) {\n        showStats.value = false;\n        // Add small delay to ensure smooth transition\n        setTimeout(function () {\n          selectedQuiz.value = quiz;\n        }, 100);\n      } else {\n        selectedQuiz.value = quiz;\n      }\n    };\n\n    // Add new method to handle create quiz from stats view\n    var handleCreateQuizFromStats = function handleCreateQuizFromStats() {\n      showStats.value = false;\n      handleCreateQuiz();\n    };\n    var __returned__ = {\n      store: store,\n      selectedFiles: selectedFiles,\n      fileInput: fileInput,\n      unsupportedFiles: unsupportedFiles,\n      extractionErrors: extractionErrors,\n      questionCount: questionCount,\n      isLoading: isLoading,\n      error: error,\n      predictedScore: predictedScore,\n      quizStarted: quizStarted,\n      quizFinished: quizFinished,\n      adaptiveQuestions: adaptiveQuestions,\n      userResponses: userResponses,\n      extractedContent: extractedContent,\n      selectedQuiz: selectedQuiz,\n      isRetaking: isRetaking,\n      retakeIndex: retakeIndex,\n      showStats: showStats,\n      showSpacedRepetitionMonitor: showSpacedRepetitionMonitor,\n      questionPools: questionPools,\n      POOL_SIZE: POOL_SIZE,\n      LOW_THRESHOLD: LOW_THRESHOLD,\n      quizHistory: quizHistory,\n      isFormValid: isFormValid,\n      hasFileErrors: hasFileErrors,\n      getPredictedScoreClass: getPredictedScoreClass,\n      triggerFileInput: triggerFileInput,\n      handleFileSelect: handleFileSelect,\n      handleDrop: handleDrop,\n      addFiles: addFiles,\n      removeFile: removeFile,\n      handleSubmit: handleSubmit,\n      generateQuestionsForDifficulty: generateQuestionsForDifficulty,\n      generateQuestionPools: generateQuestionPools,\n      startQuiz: startQuiz,\n      replenishQuestionPool: replenishQuestionPool,\n      handleQuestionUpdate: handleQuestionUpdate,\n      handleQuizComplete: handleQuizComplete,\n      restartQuiz: restartQuiz,\n      resetToMainScreen: resetToMainScreen,\n      readFileContent: readFileContent,\n      generateQuestions: generateQuestions,\n      formatQuestionsForResults: formatQuestionsForResults,\n      formatUserAnswersForResults: formatUserAnswersForResults,\n      correctAnswersCount: correctAnswersCount,\n      score: score,\n      saveQuizResults: saveQuizResults,\n      handleRetakeQuiz: handleRetakeQuiz,\n      handleCreateQuiz: handleCreateQuiz,\n      clearHistory: clearHistory,\n      handleQuizSelect: handleQuizSelect,\n      handleCreateQuizFromStats: handleCreateQuizFromStats,\n      ref: ref,\n      computed: computed,\n      onMounted: onMounted,\n      get axios() {\n        return axios;\n      },\n      FileErrorDisplay: FileErrorDisplay,\n      QuizResults: QuizResults,\n      FlashcardQuiz: FlashcardQuiz,\n      Sidebar: Sidebar,\n      QuizHistoryDetails: QuizHistoryDetails,\n      AccountButton: AccountButton,\n      StudyStats: StudyStats,\n      SpacedRepetitionMonitor: SpacedRepetitionMonitor,\n      get calculatePredictedScore() {\n        return calculatePredictedScore;\n      },\n      get calculateScore() {\n        return calculateScore;\n      },\n      get processQuizResponse() {\n        return processQuizResponse;\n      },\n      get isSimilarQuestion() {\n        return isSimilarQuestion;\n      },\n      get updateQuizState() {\n        return updateQuizState;\n      },\n      get calculateNextReview() {\n        return calculateNextReview;\n      },\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","axios","FileErrorDisplay","QuizResults","FlashcardQuiz","Sidebar","QuizHistoryDetails","AccountButton","StudyStats","SpacedRepetitionMonitor","calculatePredictedScore","calculateScore","processQuizResponse","isSimilarQuestion","updateQuizState","calculateNextReview","useStore","POOL_SIZE","LOW_THRESHOLD","store","selectedFiles","fileInput","unsupportedFiles","extractionErrors","questionCount","isLoading","error","predictedScore","quizStarted","quizFinished","adaptiveQuestions","userResponses","extractedContent","selectedQuiz","isRetaking","retakeIndex","showStats","showSpacedRepetitionMonitor","questionPools","easy","medium","hard","quizHistory","state","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","dispatch","stop","isFormValid","value","length","hasFileErrors","getPredictedScoreClass","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validTypes","validFiles","invalidFiles","forEach","file","includes","type","push","concat","_toConsumableArray","removeFile","index","splice","handleSubmit","_ref3","_callee2","fileContents","validContents","_callee2$","_context2","abrupt","console","log","map","f","name","Promise","all","readFileContent","sent","filter","content","trim","Error","join","generateQuestionPools","t0","message","finish","apply","arguments","generateQuestionsForDifficulty","_ref4","_callee3","difficulty","count","questions","_callee3$","_context3","generateQuestions","q","_objectSpread","id","crypto","randomUUID","adapted","_x","_x2","_ref5","_callee4","_yield$Promise$all","_yield$Promise$all2","easyQuestions","mediumQuestions","hardQuestions","_callee4$","_context4","_slicedToArray","startQuiz","slice","Number","replenishQuestionPool","_ref6","_callee5","pool","neededQuestions","newQuestions","_callee5$","_context5","_x3","handleQuestionUpdate","_ref7","_callee6","updatedQuestion","adaptiveState","currentIndex","currentDifficulty","nextDifficulty","nextQuestion","_callee6$","_context6","availableQuestions","usedQuestions","questionId","correct","findIndex","_x4","handleQuizComplete","responses","question","response","performance","updatedSpacedRepetition","spacedRepetition","userAnswer","isCorrect","saveQuizResults","restartQuiz","resetToMainScreen","_x5","_readFileContent","_callee8","_callee8$","_context8","resolve","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","data","text","fileName","_x6","_x7","_generateQuestions","_callee9","targetDifficulty","maxRetries","retryCount","allQuestions","_response$data","remainingCount","strategy","prompt","responseText","validQuestions","questionsWithIds","uniqueNewQuestions","_error$response","_error$response2","_args9","_callee9$","_context9","undefined","post","VUE_APP_GEMINI_API_KEY","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","candidates","replace","setTimeout","repetitions","ease","interval","nextReviewDate","lastReviewDate","newQ","some","existingQ","t1","status","formatQuestionsForResults","_userResponses$value$","_userResponses$value$2","options","correctAnswer","explanation","formatUserAnswersForResults","r","correctAnswersCount","score","_selectedFiles$value$","quizResult","actualScore","date","Date","fileContent","_userResponses$value$3","_userResponses$value$4","commit","result","handleRetakeQuiz","_ref8","_callee7","quizToRetake","requestedQuestionCount","_callee7$","_context7","quiz","toString","File","_x8","handleCreateQuiz","clearHistory","confirm","handleQuizSelect","handleCreateQuizFromStats"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <AccountButton />\n    <Sidebar \n      :quiz-history=\"quizHistory\" \n      @create-quiz=\"handleCreateQuiz\"\n      @retake-quiz=\"handleRetakeQuiz\"\n      @clear-history=\"clearHistory\"\n      @select-quiz=\"handleQuizSelect\"\n      @view-stats=\"showStats = true\"\n    />\n    <div class=\"main-content\">\n      <div v-if=\"showStats\" class=\"stats-view\">\n        <div class=\"stats-header-actions\">\n          <button class=\"back-btn\" @click=\"showStats = false\">\n            ← Back to Quiz\n          </button>\n          <button class=\"create-quiz-btn\" @click=\"handleCreateQuizFromStats\">\n            + Create New Quiz\n          </button>\n        </div>\n        <StudyStats :quiz-history=\"quizHistory\" />\n      </div>\n      \n      <div v-else-if=\"selectedQuiz\" class=\"quiz-details-container\">\n        <QuizHistoryDetails\n          :quiz=\"selectedQuiz\"\n          @retake-quiz=\"handleRetakeQuiz\"\n          @close=\"selectedQuiz = null\"\n        />\n      </div>\n\n      <div v-else class=\"upload-container\">\n        <div class=\"header\">\n          <h1>Quiz Generator</h1>\n          <div class=\"header-actions\">\n            <button class=\"stats-btn\" @click=\"showStats = true\">\n              📊 Study Stats\n            </button>\n            <button class=\"monitor-btn\" @click=\"showSpacedRepetitionMonitor = true\">\n              ⏱️ SR Monitor\n            </button>\n            <AccountButton />\n          </div>\n        </div>\n        \n        <div v-if=\"!quizStarted && !quizFinished\" class=\"file-upload-section\">\n          <h2>Upload Files</h2>\n          <div class=\"upload-area\" \n            @dragover.prevent \n            @drop.prevent=\"handleDrop\"\n            @click=\"triggerFileInput\"\n            role=\"button\"\n            tabindex=\"0\"\n            @keydown.enter=\"triggerFileInput\"\n          >\n            <input \n              type=\"file\" \n              @change=\"handleFileSelect\" \n              accept=\".pdf,.docx,.pptx,.txt\"\n              ref=\"fileInput\"\n              class=\"file-input\"\n            >\n            <div class=\"upload-prompt\">\n              <p>Drag and drop files here or click to select</p>\n              <div class=\"supported-formats\">\n                <p>Supported formats:</p>\n                <ul>\n                  <li><span class=\"format-icon\">📄</span> Documents (PDF, DOCX)</li>\n                  <li><span class=\"format-icon\">📊</span> Presentations (PPTX)</li>\n                  <li><span class=\"format-icon\">📝</span> Text files (TXT)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"hasFileErrors\" class=\"error-section\">\n            <FileErrorDisplay\n              :extraction-errors=\"extractionErrors\"\n              :unsupported-files=\"unsupportedFiles\"\n            />\n          </div>\n\n          <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n            <h3>Selected Files:</h3>\n            <ul>\n              <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n                <span class=\"file-name\">{{ file.name }}</span>\n                <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">×</button>\n              </li>\n            </ul>\n          </div>\n\n          <div class=\"questions-section\">\n            <h2>Number of Questions</h2>\n            <div class=\"question-input\">\n              <input\n                type=\"number\"\n                v-model=\"questionCount\"\n                min=\"1\"\n                max=\"20\"\n                placeholder=\"Enter number of questions\"\n              />\n            </div>\n          </div>\n\n          <button \n            class=\"submit-btn\" \n            :disabled=\"!isFormValid || isLoading\"\n            @click=\"handleSubmit\"\n          >\n            {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n          </button>\n        </div>\n\n        <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n          <div class=\"predicted-score-container\">\n            <h2>Ready to Start!</h2>\n            <div class=\"score-prediction\">\n              <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n                <span class=\"predicted-value\">{{ predictedScore }}%</span>\n                <span class=\"prediction-label\">Predicted Score</span>\n              </div>\n            </div>\n            <p class=\"prediction-explanation\">\n              Based on your study material, we predict you'll score around {{ predictedScore }}%.\n            </p>\n            <button class=\"start-quiz-btn\" @click=\"startQuiz\">Start Quiz</button>\n          </div>\n        </div>\n\n        <FlashcardQuiz\n          v-if=\"quizStarted && !quizFinished\"\n          :questions=\"adaptiveQuestions\"\n          :total-questions=\"Number(questionCount)\"\n          @quiz-completed=\"handleQuizComplete\"\n          @update-question=\"handleQuestionUpdate\"\n        />\n\n        <QuizResults\n          v-if=\"quizFinished\"\n          :questions=\"formatQuestionsForResults\"\n          :user-answers=\"formatUserAnswersForResults\"\n          :score=\"correctAnswersCount\"\n          :predicted-score=\"predictedScore\"\n          @restart=\"restartQuiz\"\n          @go-back=\"resetToMainScreen\"\n        />\n\n        <div v-if=\"error\" class=\"error-message\">\n          {{ error }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading Overlay -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <div class=\"loading-content\">\n        <div class=\"typewriter\">Generating quiz</div>\n        <div class=\"dots\">\n          <span>.</span>\n          <span>.</span>\n          <span>.</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Study Stats Modal -->\n    <div v-if=\"showStats\" class=\"modal\">\n      <div class=\"modal-content\">\n        <button class=\"close-btn\" @click=\"showStats = false\">&times;</button>\n        <StudyStats />\n      </div>\n    </div>\n\n    <!-- Spaced Repetition Monitor Modal -->\n    <div v-if=\"showSpacedRepetitionMonitor\" class=\"modal\">\n      <div class=\"modal-content\">\n        <button class=\"close-btn\" @click=\"showSpacedRepetitionMonitor = false\">&times;</button>\n        <SpacedRepetitionMonitor />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport QuizHistoryDetails from './components/QuizHistoryDetails.vue';\nimport AccountButton from './components/AccountButton.vue';\nimport StudyStats from './components/StudyStats.vue';\nimport SpacedRepetitionMonitor from './components/SpacedRepetitionMonitor.vue';\nimport { \n  calculatePredictedScore,\n  calculateScore,\n  processQuizResponse,\n  isSimilarQuestion,\n  updateQuizState\n} from './algorithms';\nimport { calculateNextReview } from './algorithms/spaced-repetition';\nimport { useStore } from 'vuex';\n\nconst store = useStore();\n\n// File handling state\nconst selectedFiles = ref([]);\nconst fileInput = ref(null);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\n\n// Quiz state\nconst questionCount = ref('');\nconst isLoading = ref(false);\nconst error = ref('');\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst quizFinished = ref(false);\nconst adaptiveQuestions = ref([]);\nconst userResponses = ref([]);\nconst extractedContent = ref('');\nconst selectedQuiz = ref(null);\n\n// Add isRetaking flag to track retakes\nconst isRetaking = ref(false);\nconst retakeIndex = ref(-1);\n\n// Stats view state\nconst showStats = ref(false);\nconst showSpacedRepetitionMonitor = ref(false);\n\n// Add new state for question pools\nconst questionPools = ref({\n  easy: [],\n  medium: [],\n  hard: []\n});\n\nconst POOL_SIZE = 5;\nconst LOW_THRESHOLD = 2;\n\n// Add computed property for quiz history\nconst quizHistory = computed(() => store.state.quizHistory);\n\n// Initialize store and load data\nonMounted(async () => {\n  await store.dispatch('initializeStore');\n});\n\n// Computed properties\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n\n// File handling methods\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\n// Quiz handling methods\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  userResponses.value = [];\n  extractedContent.value = '';\n  extractionErrors.value = [];\n\n  try {\n    console.log('Processing files:', selectedFiles.value.map(f => ({ name: f.name, type: f.type })));\n    \n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    const validContents = fileContents.filter(content => content && content.trim().length > 0);\n    console.log('Number of files with valid content:', validContents.length);\n    \n    if (validContents.length === 0) {\n      throw new Error('No valid content could be extracted from the selected files.');\n    }\n\n    extractedContent.value = validContents.join('\\n\\n');\n    console.log('Total content length:', extractedContent.value.length);\n    \n    if (extractedContent.value.trim().length < 50) {\n      throw new Error('The extracted content is too short to generate meaningful questions.');\n    }\n\n    // Generate initial pools of questions\n    await generateQuestionPools();\n    \n    predictedScore.value = calculatePredictedScore([\n      ...questionPools.value.easy,\n      ...questionPools.value.medium,\n      ...questionPools.value.hard\n    ]);\n\n  } catch (err) {\n    console.error('Error in handleSubmit:', err);\n    error.value = err.message || 'An unexpected error occurred while generating questions.';\n    adaptiveQuestions.value = [];\n    predictedScore.value = null;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// New function to generate questions for a specific difficulty\nconst generateQuestionsForDifficulty = async (difficulty, count) => {\n  const questions = await generateQuestions(\n    extractedContent.value,\n    count,\n    difficulty // We'll need to modify generateQuestions to accept this parameter\n  );\n  \n  return questions.map(q => ({\n    ...q,\n    difficulty,\n    id: crypto.randomUUID(),\n    adapted: false\n  }));\n};\n\n// New function to manage question pools\nconst generateQuestionPools = async () => {\n  try {\n    // Generate 5 questions for each difficulty\n    const [easyQuestions, mediumQuestions, hardQuestions] = await Promise.all([\n      generateQuestionsForDifficulty('easy', POOL_SIZE),\n      generateQuestionsForDifficulty('medium', POOL_SIZE),\n      generateQuestionsForDifficulty('hard', POOL_SIZE)\n    ]);\n\n    questionPools.value = {\n      easy: easyQuestions,\n      medium: mediumQuestions,\n      hard: hardQuestions\n    };\n  } catch (error) {\n    console.error('Error generating question pools:', error);\n    throw error;\n  }\n};\n\n// Modified startQuiz to use medium questions initially\nconst startQuiz = () => {\n  // Start with medium questions\n  adaptiveQuestions.value = questionPools.value.medium.slice(0, Number(questionCount.value));\n  quizStarted.value = true;\n  quizFinished.value = false;\n};\n\n// New function to check and replenish question pools\nconst replenishQuestionPool = async (difficulty) => {\n  const pool = questionPools.value[difficulty];\n  if (pool.length <= LOW_THRESHOLD) {\n    const neededQuestions = POOL_SIZE - pool.length;\n    const newQuestions = await generateQuestionsForDifficulty(difficulty, neededQuestions);\n    questionPools.value[difficulty] = [...pool, ...newQuestions];\n  }\n};\n\n// Modified handleQuestionUpdate to use question pools\nconst handleQuestionUpdate = async (updatedQuestion) => {\n  // Update quiz state based on user's answer\n  const adaptiveState = updateQuizState({\n    availableQuestions: adaptiveQuestions.value,\n    usedQuestions: userResponses.value,\n    currentDifficulty: updatedQuestion.difficulty\n  }, {\n    questionId: updatedQuestion.id,\n    correct: updatedQuestion.correct,\n    difficulty: updatedQuestion.difficulty\n  });\n\n  // Find the current question index\n  const currentIndex = adaptiveQuestions.value.findIndex(q => q.id === updatedQuestion.id);\n  if (currentIndex === -1) return;\n\n  // Update the current question with the user's response\n  adaptiveQuestions.value[currentIndex] = {\n    ...updatedQuestion,\n    adapted: true\n  };\n\n  // Remove the used question from its pool\n  const currentDifficulty = updatedQuestion.difficulty;\n  questionPools.value[currentDifficulty] = questionPools.value[currentDifficulty]\n    .filter(q => q.id !== updatedQuestion.id);\n\n  // Check if we need to replenish the pool\n  await replenishQuestionPool(currentDifficulty);\n\n  // If there's a next question, select it from the appropriate pool based on adaptive state\n  if (currentIndex + 1 < Number(questionCount.value)) {\n    const nextDifficulty = adaptiveState.currentDifficulty;\n    const nextQuestion = questionPools.value[nextDifficulty][0];\n    \n    if (nextQuestion) {\n      adaptiveQuestions.value[currentIndex + 1] = {\n        ...nextQuestion,\n        adapted: false\n      };\n    }\n  }\n};\n\nconst handleQuizComplete = (responses) => {\n  userResponses.value = responses;\n  \n  // Update the adaptiveQuestions with user answers and spaced repetition data\n  adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => {\n    const response = responses[index];\n    const performance = response?.correct ? 5 : 0; // 5 for correct, 0 for incorrect\n    \n    // Update spaced repetition data using the new function\n    const updatedSpacedRepetition = calculateNextReview(question.spacedRepetition, performance);\n    \n    return {\n      ...question,\n      userAnswer: response?.userAnswer,\n      isCorrect: response?.correct,\n      spacedRepetition: updatedSpacedRepetition\n    };\n  });\n  \n  // Set quiz states\n  quizStarted.value = false;\n  quizFinished.value = true;\n  \n  // Save results\n  saveQuizResults();\n};\n\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  userResponses.value = [];\n};\n\nconst resetToMainScreen = () => {\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\n// Helper functions\nasync function readFileContent(file) {\n  return new Promise((resolve) => {\n    try {\n      console.log('File type:', file.type);\n      console.log('File name:', file.name);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n          resolve('');\n          }\n        })\n      .catch(error => {\n        console.error('Error processing file:', error);\n          extractionErrors.value.push({\n            fileName: file.name,\n          message: `Error processing file: ${error.message}`\n        });\n        resolve('');\n      });\n    } catch (error) {\n      console.error('Error preparing file:', error);\n        extractionErrors.value.push({\n          fileName: file.name,\n        message: `Error preparing file: ${error.message}`\n      });\n      resolve('');\n    }\n  });\n}\n\nasync function generateQuestions(content, count, targetDifficulty = null) {\n  const maxRetries = 3;\n  let retryCount = 0;\n  let allQuestions = [];\n\n  while (retryCount < maxRetries && allQuestions.length < count) {\n    try {\n      const remainingCount = count - allQuestions.length;\n      const strategy = retryCount % 3;\n      let prompt = `Generate exactly ${remainingCount} questions with ${targetDifficulty || 'mixed'} difficulty. DO NOT use markdown formatting or asterisks for emphasis.\nFOLLOW THIS EXACT FORMAT WITH NO DEVIATIONS:\n\nFor Multiple Choice Questions:\nQuestion: What is the question text?\nA) First option\nB) Second option\nC) Third option\nD) Fourth option\nAnswer: A* (or B*, C*, D* - add asterisk to correct answer)\nDifficulty: ${targetDifficulty || 'medium'} (${targetDifficulty ? `must be ${targetDifficulty}` : 'or easy or hard'})\n\nFor True/False Questions:\nTrue/False: What is the question text?\nAnswer: True* (or False* - add asterisk to correct answer)\nDifficulty: ${targetDifficulty || 'medium'} (${targetDifficulty ? `must be ${targetDifficulty}` : 'or easy or hard'})\n\nREQUIREMENTS:\n1. Use the exact format shown above\n2. Do not add any extra formatting or text\n3. Do not use markdown\n4. Do not use bold or italics\n5. Each question must end with a difficulty level${targetDifficulty ? ` of ${targetDifficulty}` : ''}\n6. Questions must be based on this content:\n\n${content}\n\nSTRATEGY: `;\n\n      switch (strategy) {\n        case 0:\n          prompt += 'Create a mix of multiple-choice and true/false questions that directly test understanding of the content.';\n          break;\n        case 1:\n          prompt += 'Create questions that focus on what is NOT mentioned or opposite relationships in the content.';\n          break;\n        case 2:\n          prompt += 'Create questions that test application and inference of the concepts mentioned in the content.';\n          break;\n      }\n\n      const response = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n        {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7 + (retryCount * 0.1),\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 2048,\n          }\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (!response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {\n        throw new Error('Invalid response format from Gemini API');\n      }\n\n      const responseText = response.data.candidates[0].content.parts[0].text\n        .replace(/\\*\\*/g, '') // Remove markdown bold\n        .replace(/\\*/g, '*')  // Normalize asterisks\n        .replace(/[\"\"]/g, '\"'); // Normalize quotes\n\n      console.log('Generated response:', responseText);\n\n      const newQuestions = processQuizResponse(responseText, content).questions;\n      \n      if (newQuestions.length === 0) {\n        console.error('No valid questions parsed from response');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        continue;\n      }\n\n      // Filter questions by difficulty if specified\n      const validQuestions = targetDifficulty \n        ? newQuestions.filter(q => q.difficulty === targetDifficulty)\n        : newQuestions;\n\n      // Add unique IDs and initialize spaced repetition data for new questions\n      const questionsWithIds = validQuestions.map(q => ({\n        ...q,\n        id: crypto.randomUUID(),\n        spacedRepetition: {\n          repetitions: 0,\n          ease: 2.5,\n          interval: 1,\n          nextReviewDate: null,\n          lastReviewDate: null\n        }\n      }));\n\n      const uniqueNewQuestions = questionsWithIds.filter(newQ => \n        !allQuestions.some(existingQ => isSimilarQuestion(newQ, existingQ))\n      );\n\n      allQuestions = [...allQuestions, ...uniqueNewQuestions];\n      \n      if (allQuestions.length >= count) {\n        return allQuestions.slice(0, count);\n      }\n\n      retryCount++;\n\n    } catch (error) {\n      console.error(`Attempt ${retryCount + 1} failed:`, error);\n      retryCount++;\n      \n      if (error.response?.status === 429) {\n        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n      } else if (retryCount === maxRetries) {\n        throw new Error(`Failed to generate enough unique questions after ${maxRetries} attempts. ${error.response?.data?.error?.message || error.message}`);\n      } else {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  if (allQuestions.length < count) {\n    throw new Error(`Could only generate ${allQuestions.length} unique questions out of ${count} requested. Please try with different content or reduce the number of questions.`);\n  }\n\n  return allQuestions;\n}\n\n// Results formatting\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    options: q.options,\n    userAnswer: userResponses.value[index]?.userAnswer,\n    correctAnswer: q.correctAnswer,\n    explanation: q.explanation,\n    isCorrect: userResponses.value[index]?.correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update the calculateScore function\nconst score = computed(() => {\n  return calculateScore(userResponses.value);\n});\n\n// Update the saveQuizResults function to use Vuex\nconst saveQuizResults = () => {\n  const quizResult = {\n    fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n    questionCount: Number(questionCount.value),\n    predictedScore: predictedScore.value,\n    actualScore: score.value / 100, // Convert percentage to decimal\n    date: new Date(),\n    fileContent: extractedContent.value,\n    questions: adaptiveQuestions.value.map((q, index) => ({\n      id: q.id,\n      text: q.text,\n      type: q.type,\n      options: q.options,\n      userAnswer: userResponses.value[index]?.userAnswer,\n      correctAnswer: q.correctAnswer,\n      isCorrect: userResponses.value[index]?.correct,\n      explanation: q.explanation,\n      difficulty: q.difficulty,\n      spacedRepetition: q.spacedRepetition\n    }))\n  };\n  \n  if (isRetaking.value && retakeIndex.value !== -1) {\n    store.commit('updateQuizResult', { index: retakeIndex.value, result: quizResult });\n  } else {\n    store.commit('addQuizResult', quizResult);\n  }\n  \n  // Also update the questions in the store with their new spaced repetition data\n  store.commit('updateQuestions', adaptiveQuestions.value);\n  \n  // Save state to localStorage\n  store.dispatch('saveState');\n  \n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Update the handleRetakeQuiz function to set retake flags\nconst handleRetakeQuiz = async (quizToRetake) => {\n  // Find the index of the quiz being retaken\n  retakeIndex.value = quizHistory.value.findIndex(quiz => \n    quiz.fileName === quizToRetake.fileName && \n    quiz.questionCount === quizToRetake.questionCount &&\n    quiz.fileContent === quizToRetake.fileContent\n  );\n  \n  if (retakeIndex.value === -1) {\n    console.error('Could not find original quiz to retake');\n    return;\n  }\n  \n  isRetaking.value = true;\n  \n  // Reset quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  selectedQuiz.value = null;  // Reset selected quiz\n  \n  // Set the question count from the previous quiz\n  questionCount.value = quizToRetake.questionCount.toString();\n  \n  // Create a dummy file with the same name\n  const file = new File([''], quizToRetake.fileName, {\n    type: 'text/plain'\n  });\n  \n  // Set the selected file and content\n  selectedFiles.value = [file];\n  extractedContent.value = quizToRetake.fileContent;\n  \n  // Generate new quiz using the stored content\n  try {\n    isLoading.value = true;\n    const requestedQuestionCount = Number(questionCount.value);\n    \n    const questions = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    if (!questions || questions.length === 0) {\n      throw new Error('No valid questions could be generated.');\n    }\n    \n    adaptiveQuestions.value = questions;\n    predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n    \n    // After generating questions, start the quiz\n    quizStarted.value = true;\n  } catch (err) {\n    error.value = `Error generating questions: ${err.message}`;\n    // Reset retake flags on error\n    isRetaking.value = false;\n    retakeIndex.value = -1;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Update handleCreateQuiz to reset retake flags\nconst handleCreateQuiz = () => {\n  showStats.value = false;\n  selectedQuiz.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  selectedFiles.value = [];\n  questionCount.value = '';\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Add the clearHistory function\nconst clearHistory = () => {\n  if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n    store.dispatch('clearQuizHistory');\n  }\n};\n\n// Add function to handle quiz selection\nconst handleQuizSelect = (quiz) => {\n  if (showStats.value) {\n    showStats.value = false;\n    // Add small delay to ensure smooth transition\n    setTimeout(() => {\n      selectedQuiz.value = quiz;\n    }, 100);\n  } else {\n    selectedQuiz.value = quiz;\n  }\n};\n\n// Add new method to handle create quiz from stats view\nconst handleCreateQuizFromStats = () => {\n  showStats.value = false;\n  handleCreateQuiz();\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px; /* Same as sidebar width */\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: #f5f5f5;\n  overflow-y: auto;\n}\n\n.upload-container {\n  width: 90%;\n  max-width: 800px;\n  margin: 0 auto;\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.85);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(2px);\n}\n\n.loading-content {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 2rem;\n  color: #333;\n  font-weight: 500;\n}\n\n.typewriter {\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(14) infinite;\n  border-right: 3px solid #4CAF50;\n}\n\n.dots {\n  display: flex;\n}\n\n.dots span {\n  opacity: 0;\n  animation: dot 1.5s infinite;\n  animation-fill-mode: both;\n}\n\n.dots span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.dots span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0%, 90%, 100% {\n    width: 0;\n  }\n  30%, 60% {\n    width: 14ch;\n  }\n}\n\n@keyframes dot {\n  0%, 100% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n\n.quiz-details-container {\n  width: 90%;\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.review-reminder {\n  margin-bottom: 2rem;\n  text-align: center;\n}\n\n.review-btn {\n  background: #2196F3;\n  color: white;\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1.1rem;\n  transition: background-color 0.2s;\n}\n\n.review-btn:hover {\n  background: #1976D2;\n}\n\n.stats-view {\n  width: 90%;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.back-btn {\n  margin-bottom: 1rem;\n  padding: 0.5rem 1rem;\n  background: none;\n  border: none;\n  color: #666;\n  cursor: pointer;\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  transition: color 0.2s;\n}\n\n.back-btn:hover {\n  color: #2196F3;\n}\n\n.stats-header-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.create-quiz-btn {\n  padding: 0.5rem 1.5rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  transition: all 0.2s;\n}\n\n.create-quiz-btn:hover {\n  background-color: #45a049;\n  transform: translateY(-1px);\n}\n\n.review-button {\n  background: #2196F3;\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: background 0.2s;\n}\n\n.review-button:hover {\n  background: #1976D2;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background: white;\n  border-radius: 12px;\n  width: 100%;\n  max-width: 900px;\n  max-height: 90vh;\n  overflow-y: auto;\n}\n\n.monitor-btn {\n  padding: 0.5rem 1rem;\n  background: #f8f9fa;\n  border: 1px solid #e0e0e0;\n  border-radius: 20px;\n  color: #666;\n  cursor: pointer;\n  font-size: 0.9rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  transition: all 0.2s;\n}\n\n.monitor-btn:hover {\n  background: #e3f2fd;\n  color: #2196F3;\n  border-color: #2196F3;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.header-actions {\n  display: flex;\n  gap: 1rem;\n}\n\n.stats-btn {\n  padding: 0.5rem 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: all 0.2s;\n}\n\n.stats-btn:hover {\n  background-color: #45a049;\n  transform: translateY(-1px);\n}\n\n.monitor-btn {\n  padding: 0.5rem 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: all 0.2s;\n}\n\n.monitor-btn:hover {\n  background-color: #45a049;\n  transform: translateY(-1px);\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}