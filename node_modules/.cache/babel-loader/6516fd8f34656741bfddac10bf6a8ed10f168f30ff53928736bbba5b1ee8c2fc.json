{"ast":null,"code":"import { ref, computed } from 'vue';\nimport axios from 'axios';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedFiles = ref([]);\n    const questionCount = ref('');\n    const fileInput = ref(null);\n    const generatedQuestions = ref([]);\n    const isLoading = ref(false);\n    const error = ref('');\n    const showQuestions = ref(false);\n    const flashcardQuestions = ref([]);\n    const isFormValid = computed(() => {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    const handleFileSelect = event => {\n      const files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    const handleDrop = event => {\n      const files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    const addFiles = files => {\n      const validFiles = files.filter(file => {\n        const validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf'];\n        return validTypes.includes(file.type);\n      });\n      selectedFiles.value = [...selectedFiles.value, ...validFiles];\n    };\n    const removeFile = index => {\n      selectedFiles.value.splice(index, 1);\n    };\n    const readFileContent = file => {\n      return new Promise((resolve, reject) => {\n        if (file.type === \"application/pdf\" || file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" || file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n          // PDF, PPTX, or DOCX - send to backend for extraction\n          const formData = new FormData();\n          formData.append('file', file);\n          fetch('http://127.0.0.1:5001/extract-file', {\n            method: 'POST',\n            body: formData\n          }).then(res => res.json()).then(data => {\n            if (data.text) resolve(data.text);else resolve(\"[Could not extract file text]\");\n          }).catch(() => resolve(\"[Could not extract file text]\"));\n        } else if (file.type === \"text/plain\") {\n          // Plain text\n          const reader = new FileReader();\n          reader.onload = e => resolve(e.target.result);\n          reader.onerror = e => reject(e);\n          reader.readAsText(file);\n        } else {\n          resolve(`[${file.name} is not a supported file type.]`);\n        }\n      });\n    };\n    const handleSubmit = async () => {\n      if (!isFormValid.value) return;\n      isLoading.value = true;\n      error.value = '';\n      generatedQuestions.value = [];\n      flashcardQuestions.value = [];\n      try {\n        // Read all file contents\n        const fileContents = await Promise.all(selectedFiles.value.map(file => readFileContent(file)));\n\n        // Combine all file contents\n        const combinedContent = fileContents.join('\\n\\n');\n        console.log('Extracted file content sent to Gemini:', combinedContent);\n\n        // Prepare the prompt for Gemini\n        const prompt = `You are a quiz generator. ONLY use the following content to create exactly ${questionCount.value} multiple-choice questions (with 4 options each and the correct answer indicated). \\nDo NOT use any outside knowledge. \\nFormat each question as:\\nQuestion: <question text>\\nA) <option 1>\\nB) <option 2>\\nC) <option 3>\\nD) <option 4>\\nAnswer: <correct option letter>\\nCONTENT TO USE:\\n${combinedContent}`;\n        console.log('Sending request to Gemini API...');\n        console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\n\n        // Call Gemini API\n        const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`, {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024\n          }\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('API Response:', response.data);\n\n        // Parse Gemini's response into flashcard questions\n        const generatedText = response.data.candidates[0].content.parts[0].text;\n        const parsedQuestions = parseFlashcardQuestions(generatedText);\n        flashcardQuestions.value = parsedQuestions;\n        showQuestions.value = true;\n      } catch (err) {\n        console.error('Detailed Error:', err.response ? err.response.data : err);\n        error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    function parseFlashcardQuestions(text) {\n      // Split by 'Question:' and parse each block\n      const blocks = text.split(/\\n?Question:/).map(b => b.trim()).filter(Boolean);\n      const questions = blocks.map(block => {\n        const lines = block.split('\\n').map(l => l.trim());\n        const textLine = lines[0];\n        const options = ['A', 'B', 'C', 'D'].map(letter => {\n          const optLine = lines.find(l => l.startsWith(letter + ')'));\n          return {\n            letter,\n            text: optLine ? optLine.slice(3).trim() : ''\n          };\n        });\n        const answerLine = lines.find(l => l.startsWith('Answer:'));\n        const answer = answerLine ? answerLine.replace('Answer:', '').trim() : '';\n        return {\n          text: textLine,\n          options,\n          answer\n        };\n      }).filter(q => q.text && q.options.every(o => o.text) && q.answer);\n      return questions;\n    }\n    function resetToMainScreen() {\n      showQuestions.value = false;\n      flashcardQuestions.value = [];\n      generatedQuestions.value = [];\n      selectedFiles.value = [];\n      questionCount.value = '';\n    }\n    const __returned__ = {\n      selectedFiles,\n      questionCount,\n      fileInput,\n      generatedQuestions,\n      isLoading,\n      error,\n      showQuestions,\n      flashcardQuestions,\n      isFormValid,\n      handleFileSelect,\n      handleDrop,\n      addFiles,\n      removeFile,\n      readFileContent,\n      handleSubmit,\n      parseFlashcardQuestions,\n      resetToMainScreen,\n      ref,\n      computed,\n      get axios() {\n        return axios;\n      },\n      FlashcardQuiz\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","axios","FlashcardQuiz","selectedFiles","questionCount","fileInput","generatedQuestions","isLoading","error","showQuestions","flashcardQuestions","isFormValid","value","length","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validFiles","filter","file","validTypes","includes","type","removeFile","index","splice","readFileContent","Promise","resolve","reject","formData","FormData","append","fetch","method","body","then","res","json","data","text","catch","reader","FileReader","onload","e","result","onerror","readAsText","name","handleSubmit","fileContents","all","map","combinedContent","join","console","log","prompt","process","env","VUE_APP_GEMINI_API_KEY","response","post","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","generatedText","candidates","content","parsedQuestions","parseFlashcardQuestions","err","message","blocks","split","b","trim","Boolean","questions","block","lines","l","textLine","options","letter","optLine","find","startsWith","slice","answerLine","answer","replace","q","every","o","resetToMainScreen"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"upload-container\">\r\n      <h1>QUIZZy</h1>\r\n      \r\n      <div v-if=\"!showQuestions\" class=\"file-upload-section\">\r\n        <h2>Upload Files</h2>\r\n        <div class=\"upload-area\" @dragover.prevent @drop.prevent=\"handleDrop\">\r\n          <input\r\n            type=\"file\"\r\n            multiple\r\n            accept=\".doc,.docx,.ppt,.pptx,.txt,.pdf\"\r\n            @change=\"handleFileSelect\"\r\n            ref=\"fileInput\"\r\n            class=\"file-input\"\r\n          />\r\n          <div class=\"upload-prompt\">\r\n            <p>Drag and drop files here or click to select</p>\r\n            <p>Supported formats: DOC, DOCX, PPT, PPTX, TXT, PDF</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\r\n          <h3>Selected Files:</h3>\r\n          <ul>\r\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\">\r\n              {{ file.name }}\r\n              <button @click=\"removeFile(index)\" class=\"remove-btn\">Ã—</button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"questions-section\">\r\n          <h2>Number of Questions</h2>\r\n          <div class=\"question-input\">\r\n            <input\r\n              type=\"number\"\r\n              v-model=\"questionCount\"\r\n              min=\"1\"\r\n              max=\"20\"\r\n              placeholder=\"Enter number of questions\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          class=\"submit-btn\" \r\n          :disabled=\"!isFormValid || isLoading\"\r\n          @click=\"handleSubmit\"\r\n        >\r\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\r\n        </button>\r\n      </div>\r\n\r\n      <FlashcardQuiz\r\n        v-else\r\n        :questions=\"flashcardQuestions\"\r\n        @go-back=\"resetToMainScreen\"\r\n      />\r\n\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        {{ error }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport axios from 'axios';\r\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\r\n\r\nconst selectedFiles = ref([]);\r\nconst questionCount = ref('');\r\nconst fileInput = ref(null);\r\nconst generatedQuestions = ref([]);\r\nconst isLoading = ref(false);\r\nconst error = ref('');\r\nconst showQuestions = ref(false);\r\nconst flashcardQuestions = ref([]);\r\n\r\nconst isFormValid = computed(() => {\r\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\r\n});\r\n\r\nconst handleFileSelect = (event) => {\r\n  const files = Array.from(event.target.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst handleDrop = (event) => {\r\n  const files = Array.from(event.dataTransfer.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst addFiles = (files) => {\r\n  const validFiles = files.filter(file => {\r\n    const validTypes = [\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      'application/vnd.ms-powerpoint',\r\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n      'text/plain',\r\n      'application/pdf'\r\n    ];\r\n    return validTypes.includes(file.type);\r\n  });\r\n  \r\n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\r\n};\r\n\r\nconst removeFile = (index) => {\r\n  selectedFiles.value.splice(index, 1);\r\n};\r\n\r\nconst readFileContent = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (\r\n      file.type === \"application/pdf\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n    ) {\r\n      // PDF, PPTX, or DOCX - send to backend for extraction\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      fetch('http://127.0.0.1:5001/extract-file', {\r\n        method: 'POST',\r\n        body: formData\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.text) resolve(data.text);\r\n          else resolve(\"[Could not extract file text]\");\r\n        })\r\n        .catch(() => resolve(\"[Could not extract file text]\"));\r\n    } else if (file.type === \"text/plain\") {\r\n      // Plain text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    } else {\r\n      resolve(`[${file.name} is not a supported file type.]`);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  if (!isFormValid.value) return;\r\n\r\n  isLoading.value = true;\r\n  error.value = '';\r\n  generatedQuestions.value = [];\r\n  flashcardQuestions.value = [];\r\n\r\n  try {\r\n    // Read all file contents\r\n    const fileContents = await Promise.all(\r\n      selectedFiles.value.map(file => readFileContent(file))\r\n    );\r\n\r\n    // Combine all file contents\r\n    const combinedContent = fileContents.join('\\n\\n');\r\n    console.log('Extracted file content sent to Gemini:', combinedContent);\r\n\r\n    // Prepare the prompt for Gemini\r\n    const prompt = `You are a quiz generator. ONLY use the following content to create exactly ${questionCount.value} multiple-choice questions (with 4 options each and the correct answer indicated). \\nDo NOT use any outside knowledge. \\nFormat each question as:\\nQuestion: <question text>\\nA) <option 1>\\nB) <option 2>\\nC) <option 3>\\nD) <option 4>\\nAnswer: <correct option letter>\\nCONTENT TO USE:\\n${combinedContent}`;\r\n\r\n    console.log('Sending request to Gemini API...');\r\n    console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\r\n\r\n    // Call Gemini API\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log('API Response:', response.data);\r\n\r\n    // Parse Gemini's response into flashcard questions\r\n    const generatedText = response.data.candidates[0].content.parts[0].text;\r\n    const parsedQuestions = parseFlashcardQuestions(generatedText);\r\n    flashcardQuestions.value = parsedQuestions;\r\n    showQuestions.value = true;\r\n  } catch (err) {\r\n    console.error('Detailed Error:', err.response ? err.response.data : err);\r\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n\r\nfunction parseFlashcardQuestions(text) {\r\n  // Split by 'Question:' and parse each block\r\n  const blocks = text.split(/\\n?Question:/).map(b => b.trim()).filter(Boolean);\r\n  const questions = blocks.map(block => {\r\n    const lines = block.split('\\n').map(l => l.trim());\r\n    const textLine = lines[0];\r\n    const options = ['A', 'B', 'C', 'D'].map(letter => {\r\n      const optLine = lines.find(l => l.startsWith(letter + ')'));\r\n      return { letter, text: optLine ? optLine.slice(3).trim() : '' };\r\n    });\r\n    const answerLine = lines.find(l => l.startsWith('Answer:'));\r\n    const answer = answerLine ? answerLine.replace('Answer:', '').trim() : '';\r\n    return {\r\n      text: textLine,\r\n      options,\r\n      answer\r\n    };\r\n  }).filter(q => q.text && q.options.every(o => o.text) && q.answer);\r\n  return questions;\r\n}\r\n\r\nfunction resetToMainScreen() {\r\n  showQuestions.value = false;\r\n  flashcardQuestions.value = [];\r\n  generatedQuestions.value = [];\r\n  selectedFiles.value = [];\r\n  questionCount.value = '';\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.app-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #f5f5f5;\r\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\r\n}\r\n\r\n.upload-container {\r\n  background-color: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  width: 90%;\r\n  max-width: 600px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\nh2 {\r\n  color: #444;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-area {\r\n  border: 2px dashed #ccc;\r\n  border-radius: 4px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: border-color 0.3s;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-area:hover {\r\n  border-color: #666;\r\n}\r\n\r\n.file-input {\r\n  display: none;\r\n}\r\n\r\n.upload-prompt {\r\n  color: #666;\r\n}\r\n\r\n.selected-files {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.selected-files ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.selected-files li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.remove-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.questions-section {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.question-input input {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.submit-btn {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.submit-btn:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.questions-list {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.question-item {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.error-message {\r\n  color: #ff4444;\r\n  margin-top: 1rem;\r\n  text-align: center;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}