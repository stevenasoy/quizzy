{"ast":null,"code":"import { ref } from 'vue';\nimport axios from 'axios';\nimport mammoth from \"mammoth\";\nimport * as pdfjsLib from \"pdfjs-dist\";\nimport JSZip from \"jszip\";\nimport pptxParser from \"pptx-parser\";\nexport default {\n  __name: 'QuestionsDisplay',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    }\n  },\n  emits: ['submit-answers'],\n  setup(__props, {\n    expose: __expose,\n    emit: __emit\n  }) {\n    __expose();\n    const props = __props;\n    const answers = ref([]);\n    const emit = __emit;\n\n    // Initialize answers array with empty strings\n    answers.value = Array(props.questions.length).fill('');\n    const readFileContent = file => {\n      return new Promise((resolve, reject) => {\n        if (file.type === \"text/plain\") {\n          // Plain text\n          const reader = new FileReader();\n          reader.onload = e => resolve(e.target.result);\n          reader.onerror = e => reject(e);\n          reader.readAsText(file);\n        } else if (file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\") {\n          // DOCX\n          const reader = new FileReader();\n          reader.onload = async e => {\n            try {\n              const arrayBuffer = e.target.result;\n              const result = await mammoth.extractRawText({\n                arrayBuffer\n              });\n              resolve(result.value);\n            } catch (err) {\n              resolve(\"[Could not extract DOCX text]\");\n            }\n          };\n          reader.onerror = e => reject(e);\n          reader.readAsArrayBuffer(file);\n        } else if (file.type === \"application/pdf\") {\n          // PDF\n          const reader = new FileReader();\n          reader.onload = async e => {\n            try {\n              const typedArray = new Uint8Array(e.target.result);\n              const pdf = await pdfjsLib.getDocument({\n                data: typedArray\n              }).promise;\n              let text = \"\";\n              for (let i = 1; i <= pdf.numPages; i++) {\n                const page = await pdf.getPage(i);\n                const content = await page.getTextContent();\n                text += content.items.map(item => item.str).join(\" \") + \"\\n\";\n              }\n              resolve(text);\n            } catch (err) {\n              resolve(\"[Could not extract PDF text]\");\n            }\n          };\n          reader.onerror = e => reject(e);\n          reader.readAsArrayBuffer(file);\n        } else if (file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\") {\n          // PPTX\n          const reader = new FileReader();\n          reader.onload = async e => {\n            try {\n              const zip = await JSZip.loadAsync(e.target.result);\n              pptxParser(zip).then(slides => {\n                const text = slides.map(slide => slide.texts ? slide.texts.map(t => t.text).join(\" \") : \"\").join(\"\\n\");\n                resolve(text);\n              }).catch(() => resolve(\"[Could not extract PPTX text]\"));\n            } catch (err) {\n              resolve(\"[Could not extract PPTX text]\");\n            }\n          };\n          reader.onerror = e => reject(e);\n          reader.readAsArrayBuffer(file);\n        } else {\n          resolve(`[${file.name} is not a supported file type.]`);\n        }\n      });\n    };\n    const handleSubmit = async () => {\n      if (!isFormValid.value) return;\n      isLoading.value = true;\n      error.value = '';\n      generatedQuestions.value = [];\n      try {\n        // Log file info\n        console.log('Selected files:', selectedFiles.value.map(f => ({\n          name: f.name,\n          type: f.type\n        })));\n\n        // Read all file contents\n        const fileContents = await Promise.all(selectedFiles.value.map(file => {\n          if (file.type === 'text/plain') {\n            return readFileContent(file);\n          } else {\n            console.warn(`File ${file.name} is not a plain text file. Only .txt files will be read as content.`);\n            return Promise.resolve(`[${file.name} is not a .txt file. Its content is not included.]`);\n          }\n        }));\n\n        // Combine all file contents\n        const combinedContent = fileContents.join('\\n\\n');\n        console.log('Combined file content sent to Gemini:', combinedContent);\n\n        // Prepare the prompt for Gemini\n        const prompt = `Based on the following content, generate ${questionCount.value} relevant questions. \n    The questions should test understanding of the key concepts and details in the content.\n    Format each question on a new line starting with a number and period (e.g., \"1. What is...\")\n    Content: ${combinedContent}`;\n\n        // Call Gemini API\n        const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`, {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024\n          }\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('API Response:', response.data);\n\n        // Extract questions from the response\n        const generatedText = response.data.candidates[0].content.parts[0].text;\n        const questions = generatedText.split('\\n').filter(line => line.trim().length > 0 && /^\\d+\\./.test(line)).map(q => q.replace(/^\\d+\\.\\s*/, '').trim());\n        generatedQuestions.value = questions;\n        showQuestions.value = true;\n      } catch (err) {\n        console.error('Detailed Error:', err.response ? err.response.data : err);\n        error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const __returned__ = {\n      props,\n      answers,\n      emit,\n      readFileContent,\n      handleSubmit,\n      ref,\n      get axios() {\n        return axios;\n      },\n      get mammoth() {\n        return mammoth;\n      },\n      get pdfjsLib() {\n        return pdfjsLib;\n      },\n      get JSZip() {\n        return JSZip;\n      },\n      get pptxParser() {\n        return pptxParser;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","axios","mammoth","pdfjsLib","JSZip","pptxParser","props","__props","answers","emit","__emit","value","Array","questions","length","fill","readFileContent","file","Promise","resolve","reject","type","reader","FileReader","onload","e","target","result","onerror","readAsText","arrayBuffer","extractRawText","err","readAsArrayBuffer","typedArray","Uint8Array","pdf","getDocument","data","promise","text","i","numPages","page","getPage","content","getTextContent","items","map","item","str","join","zip","loadAsync","then","slides","slide","texts","t","catch","name","handleSubmit","isFormValid","isLoading","error","generatedQuestions","console","log","selectedFiles","f","fileContents","all","warn","combinedContent","prompt","questionCount","response","post","process","env","VUE_APP_GEMINI_API_KEY","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","generatedText","candidates","split","filter","line","trim","test","q","replace","showQuestions","message"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/QuestionsDisplay.vue"],"sourcesContent":["<template>\r\n  <div class=\"questions-display\">\r\n    <h2>Generated Questions</h2>\r\n    <div class=\"questions-container\">\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"question-card\">\r\n        <div class=\"question\">\r\n          <span class=\"question-number\">{{ index + 1 }}.</span>\r\n          <p>{{ question }}</p>\r\n        </div>\r\n        <div class=\"answer-section\">\r\n          <textarea\r\n            v-model=\"answers[index]\"\r\n            :placeholder=\"'Type your answer for question ' + (index + 1)\"\r\n            rows=\"3\"\r\n            class=\"answer-input\"\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"actions\">\r\n      <button @click=\"handleSubmit\" class=\"submit-answers-btn\">Submit Answers</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, defineEmits } from 'vue';\r\nimport axios from 'axios';\r\nimport mammoth from \"mammoth\";\r\nimport * as pdfjsLib from \"pdfjs-dist\";\r\nimport JSZip from \"jszip\";\r\nimport pptxParser from \"pptx-parser\";\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  }\r\n});\r\n\r\nconst answers = ref([]);\r\nconst emit = defineEmits(['submit-answers']);\r\n\r\n// Initialize answers array with empty strings\r\nanswers.value = Array(props.questions.length).fill('');\r\n\r\nconst readFileContent = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (file.type === \"text/plain\") {\r\n      // Plain text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    } else if (\r\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n    ) {\r\n      // DOCX\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        try {\r\n          const arrayBuffer = e.target.result;\r\n          const result = await mammoth.extractRawText({ arrayBuffer });\r\n          resolve(result.value);\r\n        } catch (err) {\r\n          resolve(\"[Could not extract DOCX text]\");\r\n        }\r\n      };\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsArrayBuffer(file);\r\n    } else if (file.type === \"application/pdf\") {\r\n      // PDF\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        try {\r\n          const typedArray = new Uint8Array(e.target.result);\r\n          const pdf = await pdfjsLib.getDocument({ data: typedArray }).promise;\r\n          let text = \"\";\r\n          for (let i = 1; i <= pdf.numPages; i++) {\r\n            const page = await pdf.getPage(i);\r\n            const content = await page.getTextContent();\r\n            text += content.items.map((item) => item.str).join(\" \") + \"\\n\";\r\n          }\r\n          resolve(text);\r\n        } catch (err) {\r\n          resolve(\"[Could not extract PDF text]\");\r\n        }\r\n      };\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsArrayBuffer(file);\r\n    } else if (\r\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\r\n    ) {\r\n      // PPTX\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        try {\r\n          const zip = await JSZip.loadAsync(e.target.result);\r\n          pptxParser(zip)\r\n            .then((slides) => {\r\n              const text = slides\r\n                .map((slide) =>\r\n                  slide.texts ? slide.texts.map((t) => t.text).join(\" \") : \"\"\r\n                )\r\n                .join(\"\\n\");\r\n              resolve(text);\r\n            })\r\n            .catch(() => resolve(\"[Could not extract PPTX text]\"));\r\n        } catch (err) {\r\n          resolve(\"[Could not extract PPTX text]\");\r\n        }\r\n      };\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsArrayBuffer(file);\r\n    } else {\r\n      resolve(`[${file.name} is not a supported file type.]`);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  if (!isFormValid.value) return;\r\n\r\n  isLoading.value = true;\r\n  error.value = '';\r\n  generatedQuestions.value = [];\r\n\r\n  try {\r\n    // Log file info\r\n    console.log('Selected files:', selectedFiles.value.map(f => ({ name: f.name, type: f.type })));\r\n\r\n    // Read all file contents\r\n    const fileContents = await Promise.all(\r\n      selectedFiles.value.map(file => {\r\n        if (file.type === 'text/plain') {\r\n          return readFileContent(file);\r\n        } else {\r\n          console.warn(`File ${file.name} is not a plain text file. Only .txt files will be read as content.`);\r\n          return Promise.resolve(`[${file.name} is not a .txt file. Its content is not included.]`);\r\n        }\r\n      })\r\n    );\r\n\r\n    // Combine all file contents\r\n    const combinedContent = fileContents.join('\\n\\n');\r\n    console.log('Combined file content sent to Gemini:', combinedContent);\r\n\r\n    // Prepare the prompt for Gemini\r\n    const prompt = `Based on the following content, generate ${questionCount.value} relevant questions. \r\n    The questions should test understanding of the key concepts and details in the content.\r\n    Format each question on a new line starting with a number and period (e.g., \"1. What is...\")\r\n    Content: ${combinedContent}`;\r\n\r\n    // Call Gemini API\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log('API Response:', response.data);\r\n\r\n    // Extract questions from the response\r\n    const generatedText = response.data.candidates[0].content.parts[0].text;\r\n    const questions = generatedText.split('\\n')\r\n      .filter(line => line.trim().length > 0 && /^\\d+\\./.test(line))\r\n      .map(q => q.replace(/^\\d+\\.\\s*/, '').trim());\r\n\r\n    generatedQuestions.value = questions;\r\n    showQuestions.value = true;\r\n  } catch (err) {\r\n    console.error('Detailed Error:', err.response ? err.response.data : err);\r\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.questions-display {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 8px;\r\n}\r\n\r\nh2 {\r\n  color: #333;\r\n  margin-bottom: 1.5rem;\r\n  text-align: center;\r\n}\r\n\r\n.questions-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.question-card {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.question {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.question-number {\r\n  font-weight: bold;\r\n  color: #4CAF50;\r\n}\r\n\r\n.answer-section {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.answer-input {\r\n  width: 100%;\r\n  padding: 0.8rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  resize: vertical;\r\n  min-height: 80px;\r\n}\r\n\r\n.answer-input:focus {\r\n  outline: none;\r\n  border-color: #4CAF50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.actions {\r\n  margin-top: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.submit-answers-btn {\r\n  padding: 0.8rem 2rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-answers-btn:hover {\r\n  background-color: #45a049;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}