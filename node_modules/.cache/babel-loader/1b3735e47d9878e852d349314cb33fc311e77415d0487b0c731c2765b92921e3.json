{"ast":null,"code":"import { createElementVNode as _createElementVNode, withModifiers as _withModifiers, withKeys as _withKeys, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, normalizeStyle as _normalizeStyle, normalizeClass as _normalizeClass, createBlock as _createBlock, vModelRadio as _vModelRadio } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"upload-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"file-upload-section\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"error-section\"\n};\nconst _hoisted_5 = {\n  key: 1,\n  class: \"selected-files\"\n};\nconst _hoisted_6 = {\n  class: \"file-name\"\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = {\n  class: \"questions-section\"\n};\nconst _hoisted_9 = {\n  class: \"question-input\"\n};\nconst _hoisted_10 = {\n  class: \"difficulty-section\"\n};\nconst _hoisted_11 = {\n  class: \"difficulty-selector\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = {\n  key: 1\n};\nconst _hoisted_14 = {\n  key: 2\n};\nconst _hoisted_15 = {\n  key: 0\n};\nconst _hoisted_16 = {\n  class: \"quiz-progress\"\n};\nconst _hoisted_17 = {\n  class: \"progress-bar\"\n};\nconst _hoisted_18 = {\n  class: \"progress-text\"\n};\nconst _hoisted_19 = {\n  class: \"question-item\"\n};\nconst _hoisted_20 = {\n  key: 0,\n  class: \"options\"\n};\nconst _hoisted_21 = [\"onClick\", \"disabled\"];\nconst _hoisted_22 = {\n  key: 1,\n  class: \"options\"\n};\nconst _hoisted_23 = [\"onClick\", \"disabled\"];\nconst _hoisted_24 = {\n  key: 2,\n  class: \"feedback\"\n};\nconst _hoisted_25 = {\n  key: 4,\n  class: \"error-message\"\n};\nconst _hoisted_26 = {\n  key: 0,\n  class: \"quiz-container\"\n};\nconst _hoisted_27 = {\n  class: \"options\"\n};\nconst _hoisted_28 = [\"id\", \"name\", \"value\", \"onUpdate:modelValue\"];\nconst _hoisted_29 = [\"for\"];\nconst _hoisted_30 = {\n  key: 0,\n  class: \"feedback\"\n};\nconst _hoisted_31 = {\n  class: \"explanation\"\n};\nconst _hoisted_32 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[9] || (_cache[9] = _createElementVNode(\"h1\", null, \"QUIZZy\", -1 /* HOISTED */)), !$setup.showQuestions && !$setup.quizStarted && $setup.predictedScore === null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Upload Files\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"upload-area\",\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleDrop, [\"prevent\"]),\n    onClick: $setup.triggerFileInput,\n    role: \"button\",\n    tabindex: \"0\",\n    onKeydown: _withKeys($setup.triggerFileInput, [\"enter\"])\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: $setup.handleFileSelect,\n    accept: \".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\",\n    ref: \"fileInput\",\n    class: \"file-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    class: \"upload-prompt\"\n  }, [_createElementVNode(\"p\", null, \"Drag and drop files here or click to select\"), _createElementVNode(\"p\", null, \"Supported formats: PDF, DOCX, PPTX, TXT\")], -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), $setup.hasFileErrors ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode($setup[\"FileErrorDisplay\"], {\n    \"extraction-errors\": $setup.extractionErrors,\n    \"unsupported-files\": $setup.unsupportedFiles\n  }, null, 8 /* PROPS */, [\"extraction-errors\", \"unsupported-files\"])])) : _createCommentVNode(\"v-if\", true), $setup.selectedFiles.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Selected Files:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedFiles, (file, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"file-item\"\n    }, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString(file.name), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.removeFile(index),\n      class: \"remove-btn\",\n      title: \"Remove file\"\n    }, \"Ã—\", 8 /* PROPS */, _hoisted_7)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_8, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Number of Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.questionCount = $event),\n    min: \"1\",\n    max: \"20\",\n    placeholder: \"Enter number of questions\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.questionCount]])])]), _createElementVNode(\"div\", _hoisted_10, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Question Difficulty\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedDifficulty = $event),\n    class: \"difficulty-dropdown\"\n  }, _cache[6] || (_cache[6] = [_createElementVNode(\"option\", {\n    value: \"easy\"\n  }, \"Easy\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"medium\"\n  }, \"Medium\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"hard\"\n  }, \"Hard\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.selectedDifficulty]])])]), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    disabled: !$setup.isFormValid || $setup.isLoading,\n    onClick: $setup.handleSubmit\n  }, _toDisplayString($setup.isLoading ? 'Generating Questions...' : 'Submit'), 9 /* TEXT, PROPS */, _hoisted_12)])) : _createCommentVNode(\"v-if\", true), $setup.predictedScore !== null && !$setup.quizStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"h2\", null, \"Predicted Score: \" + _toDisplayString($setup.predictedScore) + \"% based on your study material and question difficulty.\", 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    onClick: $setup.startAdaptiveQuiz\n  }, \"Start Quiz\")])) : _createCommentVNode(\"v-if\", true), $setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [$setup.getCurrentAdaptiveQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"div\", {\n    class: \"progress-fill\",\n    style: _normalizeStyle({\n      width: `${($setup.currentQuestionIndex + 1) * 100 / Number($setup.questionCount)}%`\n    })\n  }, null, 4 /* STYLE */)]), _createElementVNode(\"span\", _hoisted_18, \"Question \" + _toDisplayString($setup.currentQuestionIndex + 1) + \" of \" + _toDisplayString($setup.questionCount), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"h3\", null, _toDisplayString($setup.getCurrentAdaptiveQuestion.text), 1 /* TEXT */), $setup.getCurrentAdaptiveQuestion.type === 'multiple-choice' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getCurrentAdaptiveQuestion.options, (option, letter) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: letter,\n      class: _normalizeClass([\"option-btn\", {\n        'selected': $setup.currentAnswer === letter,\n        'correct': $setup.showFeedback && letter === $setup.getCurrentAdaptiveQuestion.correctAnswer,\n        'incorrect': $setup.showFeedback && $setup.currentAnswer === letter && letter !== $setup.getCurrentAdaptiveQuestion.correctAnswer\n      }]),\n      onClick: $event => $setup.submitAdaptiveAnswer(letter),\n      disabled: $setup.showFeedback\n    }, _toDisplayString(letter) + \") \" + _toDisplayString(option), 11 /* TEXT, CLASS, PROPS */, _hoisted_21);\n  }), 128 /* KEYED_FRAGMENT */))])) : $setup.getCurrentAdaptiveQuestion.type === 'true-false' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(['true', 'false'], option => {\n    return _createElementVNode(\"button\", {\n      key: option,\n      class: _normalizeClass([\"option-btn\", {\n        'selected': $setup.currentAnswer === option,\n        'correct': $setup.showFeedback && option === $setup.getCurrentAdaptiveQuestion.correctAnswer.toLowerCase(),\n        'incorrect': $setup.showFeedback && $setup.currentAnswer === option && option !== $setup.getCurrentAdaptiveQuestion.correctAnswer.toLowerCase()\n      }]),\n      onClick: $event => $setup.submitAdaptiveAnswer(option),\n      disabled: $setup.showFeedback\n    }, _toDisplayString(option.charAt(0).toUpperCase() + option.slice(1)), 11 /* TEXT, CLASS, PROPS */, _hoisted_23);\n  }), 64 /* STABLE_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), $setup.showFeedback ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_createElementVNode(\"p\", {\n    class: _normalizeClass({\n      'correct-text': $setup.isAnswerCorrect,\n      'incorrect-text': !$setup.isAnswerCorrect\n    })\n  }, _toDisplayString($setup.isAnswerCorrect ? 'Correct!' : 'Incorrect!'), 3 /* TEXT, CLASS */), _createElementVNode(\"button\", {\n    class: \"next-btn\",\n    onClick: $setup.moveToNext\n  }, _toDisplayString($setup.currentQuestionIndex + 1 >= Number($setup.questionCount) ? 'See Results' : 'Next Question'), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), $setup.quizFinished ? (_openBlock(), _createBlock($setup[\"QuizResults\"], {\n    key: 3,\n    questions: $setup.formatQuestionsForResults,\n    \"user-answers\": $setup.formatUserAnswersForResults,\n    score: $setup.correctAnswersCount,\n    \"predicted-score\": $setup.predictedScore,\n    onRestart: $setup.restartQuiz,\n    onGoBack: $setup.resetToMainScreen\n  }, null, 8 /* PROPS */, [\"questions\", \"user-answers\", \"score\", \"predicted-score\"])) : _createCommentVNode(\"v-if\", true), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $setup.quiz ? (_openBlock(), _createElementBlock(\"div\", _hoisted_26, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"Generated Quiz\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.quiz.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"question\"\n    }, [_createElementVNode(\"h3\", null, \"Question \" + _toDisplayString(index + 1) + \": \" + _toDisplayString(question.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_27, [question.type === 'multiple-choice' ? (_openBlock(true), _createElementBlock(_Fragment, {\n      key: 0\n    }, _renderList(question.options, (option, letter) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: letter,\n        class: \"option\"\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"radio\",\n        id: `q${index}-${letter}`,\n        name: `question${index}`,\n        value: letter,\n        \"onUpdate:modelValue\": $event => $setup.userAnswers[index] = $event\n      }, null, 8 /* PROPS */, _hoisted_28), [[_vModelRadio, $setup.userAnswers[index]]]), _createElementVNode(\"label\", {\n        for: `q${index}-${letter}`\n      }, _toDisplayString(letter) + \") \" + _toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_29)]);\n    }), 128 /* KEYED_FRAGMENT */)) : question.type === 'true-false' ? (_openBlock(), _createBlock($setup[\"TrueFalseQuestion\"], {\n      key: 1,\n      index: index,\n      \"correct-answer\": question.correctAnswer,\n      explanation: question.explanation,\n      \"show-feedback\": $setup.showAnswers && $setup.userAnswers[index],\n      \"onUpdate:answer\": $event => $setup.userAnswers[index] = $event\n    }, null, 8 /* PROPS */, [\"index\", \"correct-answer\", \"explanation\", \"show-feedback\", \"onUpdate:answer\"])) : _createCommentVNode(\"v-if\", true)]), $setup.showAnswers && $setup.userAnswers[index] ? (_openBlock(), _createElementBlock(\"div\", _hoisted_30, [_createElementVNode(\"p\", {\n      class: _normalizeClass({\n        'correct': $setup.userAnswers[index] === question.correctAnswer,\n        'incorrect': $setup.userAnswers[index] !== question.correctAnswer\n      })\n    }, _toDisplayString($setup.userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!'), 3 /* TEXT, CLASS */), _createElementVNode(\"p\", _hoisted_31, _toDisplayString(question.explanation), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: $setup.checkAnswers,\n    disabled: !$setup.allQuestionsAnswered\n  }, \"Check Answers\", 8 /* PROPS */, _hoisted_32)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$setup","showQuestions","quizStarted","predictedScore","_hoisted_3","onDragover","_cache","_withModifiers","onDrop","handleDrop","onClick","triggerFileInput","role","tabindex","onKeydown","_withKeys","type","onChange","handleFileSelect","accept","ref","hasFileErrors","_hoisted_4","_createVNode","extractionErrors","unsupportedFiles","_createCommentVNode","selectedFiles","length","_hoisted_5","_Fragment","_renderList","file","index","_hoisted_6","_toDisplayString","name","$event","removeFile","title","_hoisted_7","_hoisted_8","_hoisted_9","questionCount","min","max","placeholder","_hoisted_10","_hoisted_11","selectedDifficulty","value","disabled","isFormValid","isLoading","handleSubmit","_hoisted_12","_hoisted_13","startAdaptiveQuiz","quizFinished","_hoisted_14","getCurrentAdaptiveQuestion","_hoisted_15","_hoisted_16","_hoisted_17","style","_normalizeStyle","width","currentQuestionIndex","Number","_hoisted_18","_hoisted_19","text","_hoisted_20","options","option","letter","_normalizeClass","currentAnswer","showFeedback","correctAnswer","submitAdaptiveAnswer","_hoisted_21","_hoisted_22","toLowerCase","charAt","toUpperCase","slice","_hoisted_23","_hoisted_24","isAnswerCorrect","moveToNext","_createBlock","questions","formatQuestionsForResults","formatUserAnswersForResults","score","correctAnswersCount","onRestart","restartQuiz","onGoBack","resetToMainScreen","error","_hoisted_25","quiz","_hoisted_26","question","_hoisted_27","id","userAnswers","_hoisted_28","for","_hoisted_29","explanation","showAnswers","_hoisted_30","_hoisted_31","checkAnswers","allQuestionsAnswered","_hoisted_32"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"upload-container\">\n      <h1>QUIZZy</h1>\n      \n      <div v-if=\"!showQuestions && !quizStarted && predictedScore === null\" class=\"file-upload-section\">\n        <h2>Upload Files</h2>\n        <div class=\"upload-area\" \n          @dragover.prevent \n          @drop.prevent=\"handleDrop\"\n          @click=\"triggerFileInput\"\n          role=\"button\"\n          tabindex=\"0\"\n          @keydown.enter=\"triggerFileInput\"\n        >\n          <input \n            type=\"file\" \n            @change=\"handleFileSelect\" \n            accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\n            ref=\"fileInput\"\n            class=\"file-input\"\n          >\n          <div class=\"upload-prompt\">\n            <p>Drag and drop files here or click to select</p>\n            <p>Supported formats: PDF, DOCX, PPTX, TXT</p>\n          </div>\n        </div>\n        \n        <div v-if=\"hasFileErrors\" class=\"error-section\">\n          <FileErrorDisplay\n            :extraction-errors=\"extractionErrors\"\n            :unsupported-files=\"unsupportedFiles\"\n          />\n        </div>\n\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n          <h3>Selected Files:</h3>\n          <ul>\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n              <span class=\"file-name\">{{ file.name }}</span>\n              <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">Ã—</button>\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"questions-section\">\n          <h2>Number of Questions</h2>\n          <div class=\"question-input\">\n            <input\n              type=\"number\"\n              v-model=\"questionCount\"\n              min=\"1\"\n              max=\"20\"\n              placeholder=\"Enter number of questions\"\n            />\n          </div>\n        </div>\n\n        <div class=\"difficulty-section\">\n          <h2>Question Difficulty</h2>\n          <div class=\"difficulty-selector\">\n            <select v-model=\"selectedDifficulty\" class=\"difficulty-dropdown\">\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </div>\n        </div>\n\n        <button \n          class=\"submit-btn\" \n          :disabled=\"!isFormValid || isLoading\"\n          @click=\"handleSubmit\"\n        >\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n        </button>\n      </div>\n\n      <div v-if=\"predictedScore !== null && !quizStarted\">\n        <h2>Predicted Score: {{ predictedScore }}% based on your study material and question difficulty.</h2>\n        <button class=\"submit-btn\" @click=\"startAdaptiveQuiz\">Start Quiz</button>\n      </div>\n\n      <div v-if=\"quizStarted && !quizFinished\">\n        <div v-if=\"getCurrentAdaptiveQuestion\">\n          <div class=\"quiz-progress\">\n            <div class=\"progress-bar\">\n              <div \n                class=\"progress-fill\"\n                :style=\"{ width: `${(currentQuestionIndex + 1) * 100 / Number(questionCount)}%` }\"\n              ></div>\n            </div>\n            <span class=\"progress-text\">Question {{ currentQuestionIndex + 1 }} of {{ questionCount }}</span>\n          </div>\n          \n          <div class=\"question-item\">\n            <h3>{{ getCurrentAdaptiveQuestion.text }}</h3>\n            <div v-if=\"getCurrentAdaptiveQuestion.type === 'multiple-choice'\" class=\"options\">\n              <button \n                v-for=\"(option, letter) in getCurrentAdaptiveQuestion.options\" \n                :key=\"letter\"\n                class=\"option-btn\"\n                :class=\"{ \n                  'selected': currentAnswer === letter,\n                  'correct': showFeedback && letter === getCurrentAdaptiveQuestion.correctAnswer,\n                  'incorrect': showFeedback && currentAnswer === letter && letter !== getCurrentAdaptiveQuestion.correctAnswer\n                }\"\n                @click=\"submitAdaptiveAnswer(letter)\"\n                :disabled=\"showFeedback\"\n              >\n                {{ letter }}) {{ option }}\n              </button>\n            </div>\n            <div v-else-if=\"getCurrentAdaptiveQuestion.type === 'true-false'\" class=\"options\">\n              <button \n                v-for=\"option in ['true', 'false']\" \n                :key=\"option\"\n                class=\"option-btn\"\n                :class=\"{ \n                  'selected': currentAnswer === option,\n                  'correct': showFeedback && option === getCurrentAdaptiveQuestion.correctAnswer.toLowerCase(),\n                  'incorrect': showFeedback && currentAnswer === option && option !== getCurrentAdaptiveQuestion.correctAnswer.toLowerCase()\n                }\"\n                @click=\"submitAdaptiveAnswer(option)\"\n                :disabled=\"showFeedback\"\n              >\n                {{ option.charAt(0).toUpperCase() + option.slice(1) }}\n              </button>\n            </div>\n\n            <div v-if=\"showFeedback\" class=\"feedback\">\n              <p :class=\"{ 'correct-text': isAnswerCorrect, 'incorrect-text': !isAnswerCorrect }\">\n                {{ isAnswerCorrect ? 'Correct!' : 'Incorrect!' }}\n              </p>\n              <button class=\"next-btn\" @click=\"moveToNext\">\n                {{ currentQuestionIndex + 1 >= Number(questionCount) ? 'See Results' : 'Next Question' }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <QuizResults\n        v-if=\"quizFinished\"\n        :questions=\"formatQuestionsForResults\"\n        :user-answers=\"formatUserAnswersForResults\"\n        :score=\"correctAnswersCount\"\n        :predicted-score=\"predictedScore\"\n        @restart=\"restartQuiz\"\n        @go-back=\"resetToMainScreen\"\n      />\n\n      <div v-if=\"error\" class=\"error-message\">\n        {{ error }}\n      </div>\n    </div>\n\n    <template v-if=\"quiz\">\n      <div class=\"quiz-container\">\n        <h2>Generated Quiz</h2>\n        <template v-for=\"(question, index) in quiz.questions\" :key=\"index\">\n          <div class=\"question\">\n            <h3>Question {{ index + 1 }}: {{ question.text }}</h3>\n            <div class=\"options\">\n              <template v-if=\"question.type === 'multiple-choice'\">\n                <div v-for=\"(option, letter) in question.options\" :key=\"letter\" class=\"option\">\n                  <input\n                    type=\"radio\"\n                    :id=\"`q${index}-${letter}`\"\n                    :name=\"`question${index}`\"\n                    :value=\"letter\"\n                    v-model=\"userAnswers[index]\"\n                  />\n                  <label :for=\"`q${index}-${letter}`\">{{ letter }}) {{ option }}</label>\n                </div>\n              </template>\n              <template v-else-if=\"question.type === 'true-false'\">\n                <TrueFalseQuestion\n                  :index=\"index\"\n                  :correct-answer=\"question.correctAnswer\"\n                  :explanation=\"question.explanation\"\n                  :show-feedback=\"showAnswers && userAnswers[index]\"\n                  @update:answer=\"userAnswers[index] = $event\"\n                />\n              </template>\n            </div>\n            <div v-if=\"showAnswers && userAnswers[index]\" class=\"feedback\">\n              <p :class=\"{ 'correct': userAnswers[index] === question.correctAnswer, 'incorrect': userAnswers[index] !== question.correctAnswer }\">\n                {{ userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!' }}\n              </p>\n              <p class=\"explanation\">{{ question.explanation }}</p>\n            </div>\n          </div>\n        </template>\n        <button @click=\"checkAnswers\" :disabled=\"!allQuestionsAnswered\">Check Answers</button>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\n\nconst selectedFiles = ref([]);\nconst questionCount = ref('');\nconst fileInput = ref(null);\nconst generatedQuestions = ref([]);\nconst isLoading = ref(false);\nconst error = ref('');\nconst showQuestions = ref(false);\nconst quiz = ref(null);\nconst userAnswers = ref([]);\nconst showAnswers = ref(false);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\nconst selectedDifficulty = ref('medium');\n\n// Adaptive quiz state\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst currentQuestionIndex = ref(0);\nconst userResponses = ref([]); // {question, userAnswer, correct, difficulty}\nconst adaptiveQuestions = ref([]); // pool of questions for adaptive flow\nconst adaptiveDifficulty = ref('medium');\nconst actualScore = ref(null);\nconst quizSummary = ref('');\n\n// Add these new refs for answer handling\nconst currentAnswer = ref(null);\nconst quizFinished = ref(false);\n\n// Add new refs for feedback\nconst showFeedback = ref(false);\nconst isAnswerCorrect = ref(false);\n\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\n// Used in template for error display conditions\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\nconst readFileContent = async (file) => {\n  return new Promise((resolve) => {\n    if (\n      file.type === \"application/pdf\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n      file.type.startsWith('image/')\n    ) {\n      // PDF, PPTX, DOCX, or Image - send to backend for extraction\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Use the correct backend URL\n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n            resolve(\"[Could not extract file text]\");\n          }\n        })\n        .catch(() => {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: 'Server error while extracting text'\n          });\n          resolve(\"[Could not extract file text]\");\n        });\n    } else if (file.type === \"text/plain\") {\n      // Plain text\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = () => {\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: 'Error reading text file'\n        });\n        resolve(\"[Could not read file]\");\n      };\n      reader.readAsText(file);\n    } else {\n      resolve(`[${file.name} is not a supported file type.]`);\n    }\n  });\n};\n\nfunction predictScore(contentCoverage, difficultyLevel) {\n  // Example coefficients for linear regression\n  const a = 0.5;\n  const b = -10;\n  const c = 90;\n  return Math.max(0, Math.min(100, Math.round(a * contentCoverage + b * difficultyLevel + c)));\n}\n\nfunction getDifficultyLevelValue(diff) {\n  if (diff === 'easy') return 1;\n  if (diff === 'medium') return 2;\n  if (diff === 'hard') return 3;\n  return 2;\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction analyzeContentForCoverage(content) {\n  // For now, just return 100 (simulate full coverage)\n  // Later: implement keyword/topic extraction and compare to questions\n  return 100;\n}\n\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  generatedQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveQuestions.value = [];\n  actualScore.value = null;\n  quizSummary.value = '';\n\n  try {\n    // Read all file contents\n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    // Combine all file contents\n    const combinedContent = fileContents.join('\\n\\n');\n    console.log('Extracted file content:', combinedContent);\n\n    // Prepare the prompt for Gemini with difficulty level\n    const prompt = `Create a quiz with ${questionCount.value} easy, medium, and hard questions based on this text. Format each question exactly as follows:\n\nFor multiple choice questions:\n1. Start with \"Question: [question text]\"\n2. List options as:\n   A) [option text]\n   B) [option text]\n   C) [option text]\n   D) [option text]\n   (Mark correct answer with * after the option)\n3. Add \"Explanation: [explanation text]\"\n4. Add \"Difficulty: [easy|medium|hard]\"\n\nFor true/false questions:\n1. Start with \"True/False: [question text]\"\n2. List options as:\n   True*\n   False\n   (or vice versa, with * marking correct answer)\n3. Add \"Explanation: [explanation text]\"\n4. Add \"Difficulty: [easy|medium|hard]\"\n\nText: ${combinedContent}`;\n\n    // Call Gemini API\n    const response = await axios.post(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n      {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 2048,\n        }\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    const quizText = response.data.candidates[0].content.parts[0].text;\n    const processedQuiz = processQuizResponse(quizText);\n    // Store all questions for adaptive flow\n    adaptiveQuestions.value = processedQuiz.questions;\n\n    // Predict score using linear regression\n    const contentCoverage = analyzeContentForCoverage(combinedContent);\n    const diffValue = getDifficultyLevelValue(selectedDifficulty.value);\n    predictedScore.value = predictScore(contentCoverage, diffValue);\n\n    // Show predicted score and Start Quiz button\n    showQuestions.value = false;\n    quizStarted.value = false;\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startAdaptiveQuiz = () => {\n  quizStarted.value = true;\n  showQuestions.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveDifficulty.value = selectedDifficulty.value;\n};\n\nconst getCurrentAdaptiveQuestion = computed(() => {\n  const pool = adaptiveQuestions.value.filter(q => q.difficulty === adaptiveDifficulty.value);\n  let question;\n  \n  if (pool.length === 0) {\n    question = adaptiveQuestions.value[currentQuestionIndex.value];\n  } else {\n    // Find one not yet answered\n    question = pool.find(q => !userResponses.value.find(r => r.text === q.text)) \n            || adaptiveQuestions.value[currentQuestionIndex.value];\n  }\n  \n  return question;\n});\n\nconst submitAdaptiveAnswer = (answer) => {\n  if (showFeedback.value) return;\n  \n  const question = getCurrentAdaptiveQuestion.value;\n  currentAnswer.value = answer;\n  \n  // Check if answer is correct\n  isAnswerCorrect.value = question.type === 'multiple-choice' \n    ? answer === question.correctAnswer\n    : answer === question.correctAnswer.toLowerCase();\n  \n  showFeedback.value = true;\n};\n\nconst moveToNext = () => {\n  // Store response\n  const question = getCurrentAdaptiveQuestion.value;\n  userResponses.value.push({\n    text: question.text,\n    userAnswer: currentAnswer.value,\n    correct: isAnswerCorrect.value,\n    difficulty: question.difficulty\n  });\n\n  // Reset feedback state\n  showFeedback.value = false;\n  isAnswerCorrect.value = false;\n  \n  // Move to next question or finish\n  if (currentQuestionIndex.value + 1 >= Number(questionCount.value)) {\n    finishAdaptiveQuiz();\n  } else {\n    currentQuestionIndex.value++;\n    currentAnswer.value = null;\n  }\n};\n\nconst finishAdaptiveQuiz = () => {\n  quizStarted.value = false;\n  quizFinished.value = true;\n  \n  // Calculate score\n  const correctCount = userResponses.value.filter(r => r.correct).length;\n  actualScore.value = Math.round((correctCount / userResponses.value.length) * 100);\n  \n  // Generate summary\n  let strong = [], weak = [];\n  for (const diff of ['easy', 'medium', 'hard']) {\n    const total = userResponses.value.filter(r => r.difficulty === diff).length;\n    const correct = userResponses.value.filter(r => r.difficulty === diff && r.correct).length;\n    if (total > 0) {\n      if (correct / total >= 0.8) strong.push(diff);\n      else if (correct / total < 0.5) weak.push(diff);\n    }\n  }\n  let summary = '';\n  if (actualScore.value === 100) {\n    summary = \"Perfect score! You've mastered the material!\";\n  } else {\n    summary = `You did well on: ${strong.join(', ') || 'none'}\\nAreas to improve: ${weak.join(', ') || 'none'}`;\n  }\n  quizSummary.value = summary;\n};\n\nconst resetToMainScreen = () => {\n  showQuestions.value = false;\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveQuestions.value = [];\n  actualScore.value = null;\n  quizSummary.value = '';\n  currentAnswer.value = null;\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\nconst checkAnswers = () => {\n  showAnswers.value = true;\n};\n\nconst allQuestionsAnswered = computed(() => {\n  return userAnswers.value.length === quiz.value.questions.length;\n});\n\nconst processQuizResponse = (response) => {\n  const questions = [];\n  const lines = response.split('\\n');\n  let currentQuestion = null;\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n        type: 'multiple-choice',\n        options: {},\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n    } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n        type: 'true-false',\n        options: { true: 'True', false: 'False' },\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n    } else if (currentQuestion) {\n      const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n      if (optionMatch) {\n        const letter = optionMatch[1].toUpperCase();\n        let option = optionMatch[2];\n        if (option.includes('*')) {\n          currentQuestion.correctAnswer = letter;\n          option = option.replace('*', '').trim();\n        }\n        currentQuestion.options[letter] = option;\n      } else if (line === 'True*' || line === 'False*') {\n        currentQuestion.correctAnswer = line === 'True*' ? 'true' : 'false';\n      } else if (line.startsWith('Explanation:')) {\n        currentQuestion.explanation = line.replace('Explanation:', '').trim();\n      } else if (line.startsWith('Difficulty:')) {\n        const diff = line.replace('Difficulty:', '').trim().toLowerCase();\n        if (['easy', 'medium', 'hard'].includes(diff)) {\n          currentQuestion.difficulty = diff;\n        }\n      }\n    }\n  }\n  if (currentQuestion) questions.push(currentQuestion);\n  return { questions };\n};\n\n// Add new computed properties for QuizResults component\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.slice(0, userResponses.value.length).map(q => ({\n    text: q.text,\n    answer: q.type === 'multiple-choice' ? q.correctAnswer : q.correctAnswer.toString(),\n    explanation: q.explanation\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Add restartQuiz function\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  currentAnswer.value = null;\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.upload-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 90%;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.option {\n  margin-bottom: 0.5rem;\n}\n\n.feedback {\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.correct {\n  color: #4CAF50;\n}\n\n.incorrect {\n  color: #ff4444;\n}\n\n.explanation {\n  margin-top: 0.5rem;\n  margin-left: 1rem;\n}\n\nbutton {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\nbutton:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.file-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.file-name {\n  flex: 1;\n  margin-right: 0.5rem;\n  word-break: break-word;\n}\n\n.remove-btn {\n  flex-shrink: 0;\n  width: 24px;\n  height: 24px;\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: background-color 0.2s;\n}\n\n.remove-btn:hover {\n  background-color: #ffeeee;\n}\n\n.unsupported-files {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #fff3f3;\n  border-radius: 4px;\n  border: 1px solid #ffdddd;\n}\n\n.unsupported-files h3 {\n  color: #d32f2f;\n  margin-bottom: 0.5rem;\n}\n\n.unsupported-label {\n  color: #d32f2f;\n  font-size: 0.9em;\n  margin-left: 0.5rem;\n}\n\n.unsupported-files .file-item {\n  background-color: #fff;\n  border: 1px solid #ffdddd;\n}\n\n.difficulty-section {\n  margin-top: 2rem;\n}\n\n.difficulty-selector {\n  margin-bottom: 1rem;\n}\n\n.difficulty-dropdown {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n  cursor: pointer;\n}\n\n.difficulty-dropdown:focus {\n  outline: none;\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.option-btn {\n  width: 100%;\n  padding: 1rem;\n  margin: 0.5rem 0;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.3s ease;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #4CAF50;\n  background-color: #f5f5f5;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #E3F2FD;\n  color: #333;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #333;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #333;\n}\n\n.option-btn:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n}\n\n.feedback {\n  margin-top: 1rem;\n  padding: 1rem;\n  border-radius: 4px;\n  background-color: #f5f5f5;\n}\n\n.feedback p {\n  margin: 0.5rem 0;\n}\n\n.feedback .correct {\n  color: #4CAF50;\n  font-weight: bold;\n}\n\n.feedback .incorrect {\n  color: #f44336;\n  font-weight: bold;\n}\n\n.explanation {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: white;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n}\n\n.next-btn {\n  margin-top: 1rem;\n  padding: 0.8rem 1.5rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s;\n}\n\n.next-btn:hover {\n  background-color: #45a049;\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #E3F2FD;\n  color: #333;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 1rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 1rem 0;\n}\n\n.feedback {\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.next-btn {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n}\n\n.next-btn:hover {\n  background-color: #45a049;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}