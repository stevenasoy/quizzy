{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { ref, computed } from 'vue';\nimport { calculateWeightedScore } from '../algorithms/score-calculation';\nimport { initializeAdaptiveQuiz, updateQuizState, selectNextQuestion } from '../algorithms/difficulty-adaptation';\nimport { calculateNextReview, updateQuestionAfterReview } from '../algorithms/spaced-repetition';\nexport default {\n  __name: 'FlashcardQuiz',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    },\n    totalQuestions: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: ['quiz-completed'],\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose,\n      __emit = _ref.emit;\n    __expose();\n    var props = __props;\n    var emit = __emit;\n    var currentQuestionIndex = ref(0);\n    var currentAnswer = ref(null);\n    var showFeedback = ref(false);\n    var isAnswerCorrect = ref(false);\n    var userResponses = ref([]);\n\n    // Initialize adaptive quiz state\n    var quizState = ref(initializeAdaptiveQuiz(props.questions));\n    var currentQuestion = ref(null);\n\n    // Method to select the next question\n    var selectQuestion = function selectQuestion() {\n      if (!quizState.value.availableQuestions.length) return null;\n      var _selectNextQuestion = selectNextQuestion(quizState.value.availableQuestions, quizState.value.currentDifficulty),\n        question = _selectNextQuestion.question,\n        remainingQuestions = _selectNextQuestion.remainingQuestions;\n      currentQuestion.value = question;\n      quizState.value.availableQuestions = remainingQuestions;\n      return question;\n    };\n    var getCurrentQuestion = computed(function () {\n      if (!currentQuestion.value && !showFeedback.value) {\n        return selectQuestion();\n      }\n      return currentQuestion.value;\n    });\n    var totalQuestions = computed(function () {\n      return props.totalQuestions;\n    });\n    var submitAnswer = function submitAnswer(answer) {\n      if (showFeedback.value) return;\n      currentAnswer.value = answer;\n      var question = getCurrentQuestion.value;\n\n      // Calculate weighted score based on question difficulty\n      var weights = {\n        easy: 0.7,\n        medium: 1.0,\n        hard: 1.3\n      };\n      var rawScore;\n      if (question.type === 'true-false') {\n        // Convert both to lowercase strings for comparison\n        var userAnswer = String(answer).toLowerCase();\n        var correctAnswer = String(question.correctAnswer).toLowerCase();\n        rawScore = userAnswer === correctAnswer;\n      } else {\n        // For multiple choice, compare as is\n        rawScore = String(answer) === String(question.correctAnswer);\n      }\n\n      // Apply difficulty weighting\n      var weightedScore = calculateWeightedScore({\n        score: rawScore ? 100 : 0\n      }, {\n        score: weights[question.difficulty || 'medium']\n      });\n      isAnswerCorrect.value = rawScore;\n      showFeedback.value = true;\n\n      // Update spaced repetition state\n      var performance = rawScore ? 1 : 0;\n      var updatedQuestion = updateQuestionAfterReview(question, performance);\n\n      // Store detailed response data\n      var response = {\n        questionId: currentQuestionIndex.value,\n        text: question.text,\n        userAnswer: answer,\n        correctAnswer: question.correctAnswer,\n        correct: rawScore,\n        difficulty: question.difficulty,\n        weightedScore: weightedScore,\n        explanation: question.explanation,\n        spacedRepetition: updatedQuestion.spacedRepetition\n      };\n\n      // Update quiz state with the response\n      quizState.value = updateQuizState(quizState.value, response);\n      userResponses.value.push(response);\n    };\n    var moveToNext = function moveToNext() {\n      showFeedback.value = false;\n      isAnswerCorrect.value = false;\n      currentQuestion.value = null; // Clear current question to trigger next selection\n\n      if (currentQuestionIndex.value + 1 >= totalQuestions.value) {\n        emit('quiz-completed', userResponses.value);\n      } else {\n        currentQuestionIndex.value++;\n        currentAnswer.value = null;\n      }\n    };\n    var __returned__ = {\n      props: props,\n      emit: emit,\n      currentQuestionIndex: currentQuestionIndex,\n      currentAnswer: currentAnswer,\n      showFeedback: showFeedback,\n      isAnswerCorrect: isAnswerCorrect,\n      userResponses: userResponses,\n      quizState: quizState,\n      currentQuestion: currentQuestion,\n      selectQuestion: selectQuestion,\n      getCurrentQuestion: getCurrentQuestion,\n      totalQuestions: totalQuestions,\n      submitAnswer: submitAnswer,\n      moveToNext: moveToNext,\n      ref: ref,\n      computed: computed,\n      get calculateWeightedScore() {\n        return calculateWeightedScore;\n      },\n      get initializeAdaptiveQuiz() {\n        return initializeAdaptiveQuiz;\n      },\n      get updateQuizState() {\n        return updateQuizState;\n      },\n      get selectNextQuestion() {\n        return selectNextQuestion;\n      },\n      get calculateNextReview() {\n        return calculateNextReview;\n      },\n      get updateQuestionAfterReview() {\n        return updateQuestionAfterReview;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","calculateWeightedScore","initializeAdaptiveQuiz","updateQuizState","selectNextQuestion","calculateNextReview","updateQuestionAfterReview","props","__props","emit","__emit","currentQuestionIndex","currentAnswer","showFeedback","isAnswerCorrect","userResponses","quizState","questions","currentQuestion","selectQuestion","value","availableQuestions","length","_selectNextQuestion","currentDifficulty","question","remainingQuestions","getCurrentQuestion","totalQuestions","submitAnswer","answer","weights","easy","medium","hard","rawScore","type","userAnswer","String","toLowerCase","correctAnswer","weightedScore","score","difficulty","performance","updatedQuestion","response","questionId","text","correct","explanation","spacedRepetition","push","moveToNext"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/FlashcardQuiz.vue"],"sourcesContent":["<template>\n  <div class=\"quiz-container\">\n    <div v-if=\"getCurrentQuestion\" class=\"quiz-content\">\n      <div class=\"quiz-progress\">\n        <div class=\"progress-bar\">\n          <div \n            class=\"progress-fill\"\n            :style=\"{ width: `${(currentQuestionIndex + 1) * 100 / totalQuestions}%` }\"\n          ></div>\n        </div>\n        <span class=\"progress-text\">Question {{ currentQuestionIndex + 1 }} of {{ totalQuestions }}</span>\n      </div>\n      \n      <div class=\"question-item\">\n        <h3>{{ getCurrentQuestion.text }}</h3>\n        <div v-if=\"getCurrentQuestion.type === 'multiple-choice'\" class=\"options\">\n          <button \n            v-for=\"(option, letter) in getCurrentQuestion.options\" \n            :key=\"letter\"\n            class=\"option-btn\"\n            :class=\"{ \n              'selected': currentAnswer === letter,\n              'correct': showFeedback && letter === getCurrentQuestion.correctAnswer,\n              'incorrect': showFeedback && currentAnswer === letter && letter !== getCurrentQuestion.correctAnswer\n            }\"\n            @click=\"submitAnswer(letter)\"\n            :disabled=\"showFeedback\"\n          >\n            <span class=\"option-letter\">{{ letter }}</span>\n            <span class=\"option-text\">{{ option }}</span>\n          </button>\n        </div>\n        <div v-else-if=\"getCurrentQuestion.type === 'true-false'\" class=\"options true-false\">\n          <button \n            v-for=\"(text, value) in { true: 'True', false: 'False' }\" \n            :key=\"value\"\n            class=\"option-btn\"\n            :class=\"{ \n              'selected': currentAnswer === value,\n              'correct': showFeedback && value === getCurrentQuestion.correctAnswer,\n              'incorrect': showFeedback && currentAnswer === value && value !== getCurrentQuestion.correctAnswer\n            }\"\n            @click=\"submitAnswer(value)\"\n            :disabled=\"showFeedback\"\n          >\n            {{ text }}\n          </button>\n        </div>\n\n        <div v-if=\"showFeedback\" class=\"feedback\">\n          <p :class=\"{ 'correct-text': isAnswerCorrect, 'incorrect-text': !isAnswerCorrect }\">\n            {{ isAnswerCorrect ? 'Correct!' : 'Incorrect!' }}\n          </p>\n          <button class=\"next-btn\" @click=\"moveToNext\">\n            {{ currentQuestionIndex + 1 >= totalQuestions ? 'See Results' : 'Next Question' }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport { calculateWeightedScore } from '../algorithms/score-calculation';\nimport { \n  initializeAdaptiveQuiz,\n  updateQuizState,\n  selectNextQuestion\n} from '../algorithms/difficulty-adaptation';\nimport {\n  calculateNextReview,\n  updateQuestionAfterReview\n} from '../algorithms/spaced-repetition';\n\nconst props = defineProps({\n  questions: {\n    type: Array,\n    required: true\n  },\n  totalQuestions: {\n    type: Number,\n    required: true\n  }\n});\n\nconst emit = defineEmits(['quiz-completed']);\n\nconst currentQuestionIndex = ref(0);\nconst currentAnswer = ref(null);\nconst showFeedback = ref(false);\nconst isAnswerCorrect = ref(false);\nconst userResponses = ref([]);\n\n// Initialize adaptive quiz state\nconst quizState = ref(initializeAdaptiveQuiz(props.questions));\nconst currentQuestion = ref(null);\n\n// Method to select the next question\nconst selectQuestion = () => {\n  if (!quizState.value.availableQuestions.length) return null;\n  \n  const { question, remainingQuestions } = selectNextQuestion(\n    quizState.value.availableQuestions,\n    quizState.value.currentDifficulty\n  );\n  \n  currentQuestion.value = question;\n  quizState.value.availableQuestions = remainingQuestions;\n  return question;\n};\n\nconst getCurrentQuestion = computed(() => {\n  if (!currentQuestion.value && !showFeedback.value) {\n    return selectQuestion();\n  }\n  return currentQuestion.value;\n});\n\nconst totalQuestions = computed(() => {\n  return props.totalQuestions;\n});\n\nconst submitAnswer = (answer) => {\n  if (showFeedback.value) return;\n  \n  currentAnswer.value = answer;\n  const question = getCurrentQuestion.value;\n  \n  // Calculate weighted score based on question difficulty\n  const weights = {\n    easy: 0.7,\n    medium: 1.0,\n    hard: 1.3\n  };\n  \n  let rawScore;\n  if (question.type === 'true-false') {\n    // Convert both to lowercase strings for comparison\n    const userAnswer = String(answer).toLowerCase();\n    const correctAnswer = String(question.correctAnswer).toLowerCase();\n    rawScore = userAnswer === correctAnswer;\n  } else {\n    // For multiple choice, compare as is\n    rawScore = String(answer) === String(question.correctAnswer);\n  }\n  \n  // Apply difficulty weighting\n  const weightedScore = calculateWeightedScore(\n    { score: rawScore ? 100 : 0 },\n    { score: weights[question.difficulty || 'medium'] }\n  );\n  \n  isAnswerCorrect.value = rawScore;\n  showFeedback.value = true;\n  \n  // Update spaced repetition state\n  const performance = rawScore ? 1 : 0;\n  const updatedQuestion = updateQuestionAfterReview(question, performance);\n  \n  // Store detailed response data\n  const response = {\n    questionId: currentQuestionIndex.value,\n    text: question.text,\n    userAnswer: answer,\n    correctAnswer: question.correctAnswer,\n    correct: rawScore,\n    difficulty: question.difficulty,\n    weightedScore: weightedScore,\n    explanation: question.explanation,\n    spacedRepetition: updatedQuestion.spacedRepetition\n  };\n  \n  // Update quiz state with the response\n  quizState.value = updateQuizState(quizState.value, response);\n  userResponses.value.push(response);\n};\n\nconst moveToNext = () => {\n  showFeedback.value = false;\n  isAnswerCorrect.value = false;\n  currentQuestion.value = null; // Clear current question to trigger next selection\n  \n  if (currentQuestionIndex.value + 1 >= totalQuestions.value) {\n    emit('quiz-completed', userResponses.value);\n  } else {\n    currentQuestionIndex.value++;\n    currentAnswer.value = null;\n  }\n};\n</script>\n\n<style scoped>\n.quiz-container {\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.quiz-content {\n  background: white;\n  padding: 2rem;\n  border-radius: 12px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.question-item {\n  margin-top: 1.5rem;\n}\n\n.question-item h3 {\n  font-size: 1.2rem;\n  color: #333;\n  margin-bottom: 1.5rem;\n  line-height: 1.4;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.explanation {\n  margin: 1rem 0;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 4px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}