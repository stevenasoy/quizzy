{"ast":null,"code":"import _objectSpread from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\r\n * Difficulty Adaptation Algorithm Module\r\n */\n\n/**\r\n * Calculate the next question's difficulty based on user performance\r\n * @param {Array} previousResponses - Array of previous question responses\r\n * @returns {string} Next question difficulty level\r\n */\nexport function calculateNextDifficulty(previousResponses) {\n  // If no previous responses, start with medium\n  if (!previousResponses || previousResponses.length === 0) {\n    return 'medium';\n  }\n\n  // Get current difficulty from last question\n  var currentDifficulty = previousResponses[previousResponses.length - 1].difficulty || 'medium';\n\n  // Get whether the last answer was correct\n  var lastResponse = previousResponses[previousResponses.length - 1];\n  var wasCorrect = lastResponse.correct;\n\n  // New difficulty progression logic\n  switch (currentDifficulty) {\n    case 'medium':\n      // From medium: correct → hard, incorrect → easy\n      return wasCorrect ? 'hard' : 'easy';\n    case 'hard':\n      // From hard: correct → stay hard, incorrect → medium\n      return wasCorrect ? 'hard' : 'medium';\n    case 'easy':\n      // From easy: correct → medium, incorrect → stay easy\n      return wasCorrect ? 'medium' : 'easy';\n    default:\n      // Default to medium if something unexpected happens\n      return 'medium';\n  }\n}\n\n/**\r\n * Update quiz state based on user's answer\r\n * @param {Object} quizState - Current quiz state\r\n * @param {Object} response - User's response to current question\r\n * @returns {Object} Updated quiz state\r\n */\nexport function updateQuizState(quizState, response) {\n  var newState = _objectSpread({}, quizState);\n\n  // Add response to used questions\n  newState.usedQuestions.push(response);\n\n  // Calculate next difficulty\n  newState.currentDifficulty = calculateNextDifficulty(newState.usedQuestions);\n  return newState;\n}","map":{"version":3,"names":["calculateNextDifficulty","previousResponses","length","currentDifficulty","difficulty","lastResponse","wasCorrect","correct","updateQuizState","quizState","response","newState","_objectSpread","usedQuestions","push"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/difficulty-adaptation/index.js"],"sourcesContent":["/**\r\n * Difficulty Adaptation Algorithm Module\r\n */\r\n\r\n/**\r\n * Calculate the next question's difficulty based on user performance\r\n * @param {Array} previousResponses - Array of previous question responses\r\n * @returns {string} Next question difficulty level\r\n */\r\nexport function calculateNextDifficulty(previousResponses) {\r\n  // If no previous responses, start with medium\r\n  if (!previousResponses || previousResponses.length === 0) {\r\n    return 'medium';\r\n  }\r\n\r\n  // Get current difficulty from last question\r\n  const currentDifficulty = previousResponses[previousResponses.length - 1].difficulty || 'medium';\r\n  \r\n  // Get whether the last answer was correct\r\n  const lastResponse = previousResponses[previousResponses.length - 1];\r\n  const wasCorrect = lastResponse.correct;\r\n\r\n  // New difficulty progression logic\r\n  switch (currentDifficulty) {\r\n    case 'medium':\r\n      // From medium: correct → hard, incorrect → easy\r\n      return wasCorrect ? 'hard' : 'easy';\r\n      \r\n    case 'hard':\r\n      // From hard: correct → stay hard, incorrect → medium\r\n      return wasCorrect ? 'hard' : 'medium';\r\n      \r\n    case 'easy':\r\n      // From easy: correct → medium, incorrect → stay easy\r\n      return wasCorrect ? 'medium' : 'easy';\r\n      \r\n    default:\r\n      // Default to medium if something unexpected happens\r\n      return 'medium';\r\n  }\r\n}\r\n\r\n/**\r\n * Update quiz state based on user's answer\r\n * @param {Object} quizState - Current quiz state\r\n * @param {Object} response - User's response to current question\r\n * @returns {Object} Updated quiz state\r\n */\r\nexport function updateQuizState(quizState, response) {\r\n  const newState = { ...quizState };\r\n\r\n  // Add response to used questions\r\n  newState.usedQuestions.push(response);\r\n\r\n  // Calculate next difficulty\r\n  newState.currentDifficulty = calculateNextDifficulty(newState.usedQuestions);\r\n\r\n  return newState;\r\n}"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,uBAAuBA,CAACC,iBAAiB,EAAE;EACzD;EACA,IAAI,CAACA,iBAAiB,IAAIA,iBAAiB,CAACC,MAAM,KAAK,CAAC,EAAE;IACxD,OAAO,QAAQ;EACjB;;EAEA;EACA,IAAMC,iBAAiB,GAAGF,iBAAiB,CAACA,iBAAiB,CAACC,MAAM,GAAG,CAAC,CAAC,CAACE,UAAU,IAAI,QAAQ;;EAEhG;EACA,IAAMC,YAAY,GAAGJ,iBAAiB,CAACA,iBAAiB,CAACC,MAAM,GAAG,CAAC,CAAC;EACpE,IAAMI,UAAU,GAAGD,YAAY,CAACE,OAAO;;EAEvC;EACA,QAAQJ,iBAAiB;IACvB,KAAK,QAAQ;MACX;MACA,OAAOG,UAAU,GAAG,MAAM,GAAG,MAAM;IAErC,KAAK,MAAM;MACT;MACA,OAAOA,UAAU,GAAG,MAAM,GAAG,QAAQ;IAEvC,KAAK,MAAM;MACT;MACA,OAAOA,UAAU,GAAG,QAAQ,GAAG,MAAM;IAEvC;MACE;MACA,OAAO,QAAQ;EACnB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAeA,CAACC,SAAS,EAAEC,QAAQ,EAAE;EACnD,IAAMC,QAAQ,GAAAC,aAAA,KAAQH,SAAS,CAAE;;EAEjC;EACAE,QAAQ,CAACE,aAAa,CAACC,IAAI,CAACJ,QAAQ,CAAC;;EAErC;EACAC,QAAQ,CAACR,iBAAiB,GAAGH,uBAAuB,CAACW,QAAQ,CAACE,aAAa,CAAC;EAE5E,OAAOF,QAAQ;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}