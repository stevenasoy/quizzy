{"ast":null,"code":"import _objectSpread from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { ref, computed } from 'vue';\nimport { calculateWeightedScore } from '../algorithms/score-calculation';\nimport { updateSpacedRepetition } from '../algorithms/spaced-repetition';\nexport default {\n  __name: 'FlashcardQuiz',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    },\n    totalQuestions: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: ['quiz-completed', 'complete', 'update-question'],\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose,\n      __emit = _ref.emit;\n    __expose();\n    var props = __props;\n    var emit = __emit;\n    var currentQuestionIndex = ref(0);\n    var currentAnswer = ref(null);\n    var showFeedback = ref(false);\n    var isAnswerCorrect = ref(false);\n    var userResponses = ref([]);\n\n    // Add performance rating system\n    var performanceRating = ref(0);\n    var showRating = ref(false);\n    var getCurrentQuestion = computed(function () {\n      return props.questions[currentQuestionIndex.value];\n    });\n    var submitAnswer = function submitAnswer(answer) {\n      if (showFeedback.value) return;\n      currentAnswer.value = answer;\n      var question = getCurrentQuestion.value;\n\n      // Calculate weighted score based on question difficulty\n      var weights = {\n        easy: 0.7,\n        medium: 1.0,\n        hard: 1.3\n      };\n      var rawScore;\n      if (question.type === 'true-false') {\n        var userAnswer = String(answer).toLowerCase();\n        var correctAnswer = String(question.correctAnswer).toLowerCase();\n        rawScore = userAnswer === correctAnswer;\n      } else {\n        rawScore = String(answer) === String(question.correctAnswer);\n      }\n      isAnswerCorrect.value = rawScore;\n      showFeedback.value = true;\n      showRating.value = true;\n      performanceRating.value = rawScore ? 5 : 1; // Set initial rating based on correctness\n    };\n    var moveToNext = function moveToNext() {\n      // Update spaced repetition with the current performance rating\n      var updatedSpacedRepetition = updateSpacedRepetition(getCurrentQuestion.value, performanceRating.value);\n\n      // Emit update event with new spaced repetition data\n      emit('update-question', _objectSpread(_objectSpread({}, getCurrentQuestion.value), {}, {\n        spacedRepetition: updatedSpacedRepetition\n      }));\n\n      // Store response data\n      var response = {\n        questionId: currentQuestionIndex.value,\n        text: getCurrentQuestion.value.text,\n        userAnswer: currentAnswer.value,\n        correctAnswer: getCurrentQuestion.value.correctAnswer,\n        correct: isAnswerCorrect.value,\n        difficulty: getCurrentQuestion.value.difficulty,\n        weightedScore: calculateWeightedScore({\n          score: isAnswerCorrect.value ? 100 : 0\n        }, {\n          score: weights[getCurrentQuestion.value.difficulty || 'medium']\n        }),\n        explanation: getCurrentQuestion.value.explanation,\n        spacedRepetition: updatedSpacedRepetition\n      };\n      userResponses.value.push(response);\n\n      // Reset states\n      showFeedback.value = false;\n      showRating.value = false;\n      performanceRating.value = 0;\n      currentAnswer.value = null;\n      isAnswerCorrect.value = false;\n\n      // Move to next question or complete quiz\n      if (currentQuestionIndex.value < props.questions.length - 1) {\n        currentQuestionIndex.value++;\n      } else {\n        emit('complete', {\n          score: userResponses.value.filter(function (r) {\n            return r.correct;\n          }).length,\n          total: props.questions.length,\n          timestamp: new Date().toISOString()\n        });\n      }\n    };\n    var __returned__ = {\n      props: props,\n      emit: emit,\n      currentQuestionIndex: currentQuestionIndex,\n      currentAnswer: currentAnswer,\n      showFeedback: showFeedback,\n      isAnswerCorrect: isAnswerCorrect,\n      userResponses: userResponses,\n      performanceRating: performanceRating,\n      showRating: showRating,\n      getCurrentQuestion: getCurrentQuestion,\n      submitAnswer: submitAnswer,\n      moveToNext: moveToNext,\n      ref: ref,\n      computed: computed,\n      get calculateWeightedScore() {\n        return calculateWeightedScore;\n      },\n      get updateSpacedRepetition() {\n        return updateSpacedRepetition;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","calculateWeightedScore","updateSpacedRepetition","props","__props","emit","__emit","currentQuestionIndex","currentAnswer","showFeedback","isAnswerCorrect","userResponses","performanceRating","showRating","getCurrentQuestion","questions","value","submitAnswer","answer","question","weights","easy","medium","hard","rawScore","type","userAnswer","String","toLowerCase","correctAnswer","moveToNext","updatedSpacedRepetition","_objectSpread","spacedRepetition","response","questionId","text","correct","difficulty","weightedScore","score","explanation","push","length","filter","r","total","timestamp","Date","toISOString"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/FlashcardQuiz.vue"],"sourcesContent":["<template>\n  <div class=\"quiz-container\">\n    <div v-if=\"getCurrentQuestion\" class=\"quiz-content\">\n      <div class=\"quiz-progress\">\n        <div class=\"progress-bar\">\n          <div \n            class=\"progress-fill\"\n            :style=\"{ width: `${(currentQuestionIndex + 1) * 100 / totalQuestions}%` }\"\n          ></div>\n        </div>\n        <span class=\"progress-text\">Question {{ currentQuestionIndex + 1 }} of {{ totalQuestions }}</span>\n      </div>\n      \n      <div class=\"question-item\">\n        <h3>{{ getCurrentQuestion.text }}</h3>\n        <div v-if=\"getCurrentQuestion.type === 'multiple-choice'\" class=\"options\">\n          <button \n            v-for=\"(option, letter) in getCurrentQuestion.options\" \n            :key=\"letter\"\n            class=\"option-btn\"\n            :class=\"{ \n              'selected': currentAnswer === letter,\n              'correct': showFeedback && letter === getCurrentQuestion.correctAnswer,\n              'incorrect': showFeedback && currentAnswer === letter && letter !== getCurrentQuestion.correctAnswer\n            }\"\n            @click=\"submitAnswer(letter)\"\n            :disabled=\"showFeedback\"\n          >\n            <span class=\"option-letter\">{{ letter }}</span>\n            <span class=\"option-text\">{{ option }}</span>\n          </button>\n        </div>\n        <div v-else-if=\"getCurrentQuestion.type === 'true-false'\" class=\"options true-false\">\n          <button \n            v-for=\"(text, value) in { true: 'True', false: 'False' }\" \n            :key=\"value\"\n            class=\"option-btn\"\n            :class=\"{ \n              'selected': currentAnswer === value,\n              'correct': showFeedback && value === getCurrentQuestion.correctAnswer,\n              'incorrect': showFeedback && currentAnswer === value && value !== getCurrentQuestion.correctAnswer\n            }\"\n            @click=\"submitAnswer(value)\"\n            :disabled=\"showFeedback\"\n          >\n            {{ text }}\n          </button>\n        </div>\n\n        <div v-if=\"showFeedback\" class=\"feedback\">\n          <p :class=\"{ 'correct-text': isAnswerCorrect, 'incorrect-text': !isAnswerCorrect }\">\n            {{ isAnswerCorrect ? 'Correct!' : 'Incorrect!' }}\n          </p>\n          <button class=\"next-btn\" @click=\"moveToNext\">\n            {{ currentQuestionIndex + 1 >= totalQuestions ? 'See Results' : 'Next Question' }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport { calculateWeightedScore } from '../algorithms/score-calculation';\nimport { updateSpacedRepetition } from '../algorithms/spaced-repetition';\n\nconst props = defineProps({\n  questions: {\n    type: Array,\n    required: true\n  },\n  totalQuestions: {\n    type: Number,\n    required: true\n  }\n});\n\nconst emit = defineEmits(['quiz-completed', 'complete', 'update-question']);\n\nconst currentQuestionIndex = ref(0);\nconst currentAnswer = ref(null);\nconst showFeedback = ref(false);\nconst isAnswerCorrect = ref(false);\nconst userResponses = ref([]);\n\n// Add performance rating system\nconst performanceRating = ref(0);\nconst showRating = ref(false);\n\nconst getCurrentQuestion = computed(() => {\n  return props.questions[currentQuestionIndex.value];\n});\n\nconst submitAnswer = (answer) => {\n  if (showFeedback.value) return;\n  \n  currentAnswer.value = answer;\n  const question = getCurrentQuestion.value;\n  \n  // Calculate weighted score based on question difficulty\n  const weights = {\n    easy: 0.7,\n    medium: 1.0,\n    hard: 1.3\n  };\n  \n  let rawScore;\n  if (question.type === 'true-false') {\n    const userAnswer = String(answer).toLowerCase();\n    const correctAnswer = String(question.correctAnswer).toLowerCase();\n    rawScore = userAnswer === correctAnswer;\n  } else {\n    rawScore = String(answer) === String(question.correctAnswer);\n  }\n  \n  isAnswerCorrect.value = rawScore;\n  showFeedback.value = true;\n  showRating.value = true;\n  performanceRating.value = rawScore ? 5 : 1; // Set initial rating based on correctness\n};\n\nconst moveToNext = () => {\n  // Update spaced repetition with the current performance rating\n  const updatedSpacedRepetition = updateSpacedRepetition(getCurrentQuestion.value, performanceRating.value);\n  \n  // Emit update event with new spaced repetition data\n  emit('update-question', {\n    ...getCurrentQuestion.value,\n    spacedRepetition: updatedSpacedRepetition\n  });\n\n  // Store response data\n  const response = {\n    questionId: currentQuestionIndex.value,\n    text: getCurrentQuestion.value.text,\n    userAnswer: currentAnswer.value,\n    correctAnswer: getCurrentQuestion.value.correctAnswer,\n    correct: isAnswerCorrect.value,\n    difficulty: getCurrentQuestion.value.difficulty,\n    weightedScore: calculateWeightedScore(\n      { score: isAnswerCorrect.value ? 100 : 0 },\n      { score: weights[getCurrentQuestion.value.difficulty || 'medium'] }\n    ),\n    explanation: getCurrentQuestion.value.explanation,\n    spacedRepetition: updatedSpacedRepetition\n  };\n  \n  userResponses.value.push(response);\n  \n  // Reset states\n  showFeedback.value = false;\n  showRating.value = false;\n  performanceRating.value = 0;\n  currentAnswer.value = null;\n  isAnswerCorrect.value = false;\n\n  // Move to next question or complete quiz\n  if (currentQuestionIndex.value < props.questions.length - 1) {\n    currentQuestionIndex.value++;\n  } else {\n    emit('complete', {\n      score: userResponses.value.filter(r => r.correct).length,\n      total: props.questions.length,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\n</script>\n\n<style scoped>\n.quiz-container {\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.quiz-content {\n  background: white;\n  padding: 2rem;\n  border-radius: 12px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.question-item {\n  margin-top: 1.5rem;\n}\n\n.question-item h3 {\n  font-size: 1.2rem;\n  color: #333;\n  margin-bottom: 1.5rem;\n  line-height: 1.4;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.explanation {\n  margin: 1rem 0;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 4px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.rating-container {\n  margin-top: 2rem;\n  text-align: center;\n}\n\n.rating-prompt {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #666;\n}\n\n.rating-buttons {\n  display: flex;\n  justify-content: center;\n  gap: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n\n.rating-btn {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  border: 2px solid #ddd;\n  background: white;\n  color: #666;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.rating-btn:hover {\n  border-color: #2196F3;\n  color: #2196F3;\n}\n\n.rating-btn.active {\n  background: #2196F3;\n  border-color: #2196F3;\n  color: white;\n}\n\n.rating-labels {\n  display: flex;\n  justify-content: space-between;\n  color: #666;\n  font-size: 0.9rem;\n  padding: 0 1rem;\n}\n\n.feedback {\n  text-align: center;\n  margin-top: 2rem;\n}\n\n.result {\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n}\n\n.result.correct {\n  color: #4CAF50;\n}\n\n.result.incorrect {\n  color: #F44336;\n}\n\n.correct-answer {\n  color: #666;\n  margin-bottom: 1rem;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}