{"ast":null,"code":"import _slicedToArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport QuizHistoryDetails from './components/QuizHistoryDetails.vue';\nimport AccountButton from './components/AccountButton.vue';\nimport { shuffleQuestions, distributeByDifficulty } from './algorithms/question-management';\nimport { calculatePredictedScore, calculateScore } from './algorithms/score-calculation';\n\n// File handling state\n\nexport default {\n  __name: 'App',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var selectedFiles = ref([]);\n    var fileInput = ref(null);\n    var unsupportedFiles = ref([]);\n    var extractionErrors = ref([]);\n\n    // Quiz state\n    var questionCount = ref('');\n    var isLoading = ref(false);\n    var error = ref('');\n    var predictedScore = ref(null);\n    var quizStarted = ref(false);\n    var quizFinished = ref(false);\n    var adaptiveQuestions = ref([]);\n    var userResponses = ref([]);\n    var extractedContent = ref('');\n    var selectedQuiz = ref(null);\n\n    // Add quiz history state\n    var quizHistory = ref([]);\n\n    // Add isRetaking flag to track retakes\n    var isRetaking = ref(false);\n    var retakeIndex = ref(-1);\n\n    // Load quiz history from localStorage on mount\n    onMounted(function () {\n      var savedHistory = localStorage.getItem('quizHistory');\n      if (savedHistory) {\n        quizHistory.value = JSON.parse(savedHistory);\n      }\n    });\n\n    // Computed properties\n    var isFormValid = computed(function () {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    var hasFileErrors = computed(function () {\n      return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n    });\n    var getPredictedScoreClass = computed(function () {\n      if (predictedScore.value >= 80) return 'high';\n      if (predictedScore.value >= 60) return 'medium';\n      return 'low';\n    });\n\n    // File handling methods\n    var triggerFileInput = function triggerFileInput() {\n      fileInput.value.click();\n    };\n    var handleFileSelect = function handleFileSelect(event) {\n      var files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    var handleDrop = function handleDrop(event) {\n      var files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    var addFiles = function addFiles(files) {\n      var validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n      var validFiles = [];\n      var invalidFiles = [];\n      files.forEach(function (file) {\n        if (validTypes.includes(file.type)) {\n          validFiles.push(file);\n        } else {\n          invalidFiles.push(file);\n        }\n      });\n      selectedFiles.value = [].concat(_toConsumableArray(selectedFiles.value), validFiles);\n      unsupportedFiles.value = [].concat(_toConsumableArray(unsupportedFiles.value), invalidFiles);\n    };\n    var removeFile = function removeFile(index) {\n      selectedFiles.value.splice(index, 1);\n    };\n\n    // Quiz handling methods\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var fileContents, validContents, requestedQuestionCount, questions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (isFormValid.value) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              isLoading.value = true;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n              quizStarted.value = false;\n              userResponses.value = [];\n              extractedContent.value = '';\n              extractionErrors.value = [];\n              _context.prev = 10;\n              console.log('Processing files:', selectedFiles.value.map(function (f) {\n                return {\n                  name: f.name,\n                  type: f.type\n                };\n              }));\n              _context.next = 14;\n              return Promise.all(selectedFiles.value.map(function (file) {\n                return readFileContent(file);\n              }));\n            case 14:\n              fileContents = _context.sent;\n              validContents = fileContents.filter(function (content) {\n                return content && content.trim().length > 0;\n              });\n              console.log('Number of files with valid content:', validContents.length);\n              if (!(validContents.length === 0)) {\n                _context.next = 19;\n                break;\n              }\n              throw new Error('No valid content could be extracted from the selected files.');\n            case 19:\n              extractedContent.value = validContents.join('\\n\\n');\n              console.log('Total content length:', extractedContent.value.length);\n              if (!(extractedContent.value.trim().length < 50)) {\n                _context.next = 23;\n                break;\n              }\n              throw new Error('The extracted content is too short to generate meaningful questions.');\n            case 23:\n              requestedQuestionCount = Number(questionCount.value);\n              console.log('Requesting questions:', requestedQuestionCount);\n              _context.next = 27;\n              return generateQuestions(extractedContent.value, requestedQuestionCount);\n            case 27:\n              questions = _context.sent;\n              if (!(!questions || questions.length === 0)) {\n                _context.next = 30;\n                break;\n              }\n              throw new Error('No valid questions could be generated.');\n            case 30:\n              console.log('Generated questions:', questions.length);\n              adaptiveQuestions.value = questions;\n              predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n              _context.next = 41;\n              break;\n            case 35:\n              _context.prev = 35;\n              _context.t0 = _context[\"catch\"](10);\n              console.error('Error in handleSubmit:', _context.t0);\n              error.value = _context.t0.message || 'An unexpected error occurred while generating questions.';\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n            case 41:\n              _context.prev = 41;\n              isLoading.value = false;\n              return _context.finish(41);\n            case 44:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[10, 35, 41, 44]]);\n      }));\n      return function handleSubmit() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var startQuiz = function startQuiz() {\n      quizStarted.value = true;\n      quizFinished.value = false;\n    };\n    var handleQuizComplete = function handleQuizComplete(responses) {\n      userResponses.value = responses;\n      // Update the adaptiveQuestions with user answers\n      adaptiveQuestions.value = adaptiveQuestions.value.map(function (question, index) {\n        var _responses$index, _responses$index2;\n        return _objectSpread(_objectSpread({}, question), {}, {\n          userAnswer: (_responses$index = responses[index]) === null || _responses$index === void 0 ? void 0 : _responses$index.userAnswer,\n          isCorrect: (_responses$index2 = responses[index]) === null || _responses$index2 === void 0 ? void 0 : _responses$index2.correct\n        });\n      });\n      quizFinished.value = true;\n      saveQuizResults();\n    };\n    var restartQuiz = function restartQuiz() {\n      quizStarted.value = true;\n      quizFinished.value = false;\n      userResponses.value = [];\n    };\n    var resetToMainScreen = function resetToMainScreen() {\n      selectedFiles.value = [];\n      unsupportedFiles.value = [];\n      extractionErrors.value = [];\n      questionCount.value = '';\n      error.value = '';\n      isLoading.value = false;\n      predictedScore.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n\n    // Helper functions\n    function readFileContent(_x) {\n      return _readFileContent.apply(this, arguments);\n    }\n    function _readFileContent() {\n      _readFileContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(file) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", new Promise(function (resolve) {\n                try {\n                  console.log('File type:', file.type);\n                  console.log('File name:', file.name);\n                  var formData = new FormData();\n                  formData.append('file', file);\n                  var backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n                  fetch(\"\".concat(backendUrl, \"/extract-file\"), {\n                    method: 'POST',\n                    body: formData\n                  }).then(function (res) {\n                    return res.json();\n                  }).then(function (data) {\n                    if (data.text) {\n                      resolve(data.text);\n                    } else {\n                      extractionErrors.value.push({\n                        fileName: file.name,\n                        message: data.error || 'Failed to extract text from file'\n                      });\n                      resolve('');\n                    }\n                  })[\"catch\"](function (error) {\n                    console.error('Error processing file:', error);\n                    extractionErrors.value.push({\n                      fileName: file.name,\n                      message: \"Error processing file: \".concat(error.message)\n                    });\n                    resolve('');\n                  });\n                } catch (error) {\n                  console.error('Error preparing file:', error);\n                  extractionErrors.value.push({\n                    fileName: file.name,\n                    message: \"Error preparing file: \".concat(error.message)\n                  });\n                  resolve('');\n                }\n              }));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return _readFileContent.apply(this, arguments);\n    }\n    function generateQuestions(_x2, _x3) {\n      return _generateQuestions.apply(this, arguments);\n    }\n    function _generateQuestions() {\n      _generateQuestions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(content, count) {\n        var maxRetries, retryCount, allQuestions, _response$data, remainingCount, strategy, prompt, response, responseText, newQuestions, uniqueNewQuestions, _error$response, _error$response2;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              maxRetries = 3;\n              retryCount = 0;\n              allQuestions = [];\n            case 3:\n              if (!(retryCount < maxRetries && allQuestions.length < count)) {\n                _context4.next = 54;\n                break;\n              }\n              _context4.prev = 4;\n              remainingCount = count - allQuestions.length;\n              strategy = retryCount % 3;\n              prompt = \"Generate exactly \".concat(remainingCount, \" questions. DO NOT use markdown formatting or asterisks for emphasis.\\nFOLLOW THIS EXACT FORMAT WITH NO DEVIATIONS:\\n\\nFor Multiple Choice Questions:\\nQuestion: What is the question text?\\nA) First option\\nB) Second option\\nC) Third option\\nD) Fourth option\\nAnswer: A* (or B*, C*, D* - add asterisk to correct answer)\\nDifficulty: easy (or medium or hard)\\n\\nFor True/False Questions:\\nTrue/False: What is the question text?\\nAnswer: True* (or False* - add asterisk to correct answer)\\nDifficulty: easy (or medium or hard)\\n\\nREQUIREMENTS:\\n1. Use the exact format shown above\\n2. Do not add any extra formatting or text\\n3. Do not use markdown\\n4. Do not use bold or italics\\n5. Each question must end with a difficulty level\\n6. Questions must be based on this content:\\n\\n\").concat(content, \"\\n\\nSTRATEGY: \");\n              _context4.t0 = strategy;\n              _context4.next = _context4.t0 === 0 ? 11 : _context4.t0 === 1 ? 13 : _context4.t0 === 2 ? 15 : 17;\n              break;\n            case 11:\n              prompt += 'Create a mix of multiple-choice and true/false questions that directly test understanding of the content.';\n              return _context4.abrupt(\"break\", 17);\n            case 13:\n              prompt += 'Create questions that focus on what is NOT mentioned or opposite relationships in the content.';\n              return _context4.abrupt(\"break\", 17);\n            case 15:\n              prompt += 'Create questions that test application and inference of the concepts mentioned in the content.';\n              return _context4.abrupt(\"break\", 17);\n            case 17:\n              _context4.next = 19;\n              return axios.post(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\".concat(process.env.VUE_APP_GEMINI_API_KEY), {\n                contents: [{\n                  parts: [{\n                    text: prompt\n                  }]\n                }],\n                generationConfig: {\n                  temperature: 0.7 + retryCount * 0.1,\n                  topK: 40,\n                  topP: 0.95,\n                  maxOutputTokens: 2048\n                }\n              }, {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n            case 19:\n              response = _context4.sent;\n              if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data = _response$data.candidates) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && (_response$data = _response$data.content) !== null && _response$data !== void 0 && (_response$data = _response$data.parts) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && _response$data.text) {\n                _context4.next = 22;\n                break;\n              }\n              throw new Error('Invalid response format from Gemini API');\n            case 22:\n              responseText = response.data.candidates[0].content.parts[0].text.replace(/\\*\\*/g, '') // Remove markdown bold\n              .replace(/\\*/g, '*') // Normalize asterisks\n              .replace(/[\"\"]/g, '\"'); // Normalize quotes\n              console.log('Generated response:', responseText);\n              newQuestions = processQuizResponse(responseText, content).questions;\n              if (!(newQuestions.length === 0)) {\n                _context4.next = 30;\n                break;\n              }\n              console.error('No valid questions parsed from response');\n              _context4.next = 29;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 29:\n              return _context4.abrupt(\"continue\", 3);\n            case 30:\n              uniqueNewQuestions = newQuestions.filter(function (newQ) {\n                return !allQuestions.some(function (existingQ) {\n                  return isSimilarQuestion(newQ, existingQ);\n                });\n              });\n              allQuestions = [].concat(_toConsumableArray(allQuestions), _toConsumableArray(uniqueNewQuestions));\n              if (!(allQuestions.length >= count)) {\n                _context4.next = 34;\n                break;\n              }\n              return _context4.abrupt(\"return\", allQuestions.slice(0, count));\n            case 34:\n              retryCount++;\n              _context4.next = 52;\n              break;\n            case 37:\n              _context4.prev = 37;\n              _context4.t1 = _context4[\"catch\"](4);\n              console.error(\"Attempt \".concat(retryCount + 1, \" failed:\"), _context4.t1);\n              retryCount++;\n              if (!(((_error$response = _context4.t1.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 429)) {\n                _context4.next = 46;\n                break;\n              }\n              _context4.next = 44;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 2000 * retryCount);\n              });\n            case 44:\n              _context4.next = 52;\n              break;\n            case 46:\n              if (!(retryCount === maxRetries)) {\n                _context4.next = 50;\n                break;\n              }\n              throw new Error(\"Failed to generate enough unique questions after \".concat(maxRetries, \" attempts. \").concat(((_error$response2 = _context4.t1.response) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.data) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.error) === null || _error$response2 === void 0 ? void 0 : _error$response2.message) || _context4.t1.message));\n            case 50:\n              _context4.next = 52;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 52:\n              _context4.next = 3;\n              break;\n            case 54:\n              if (!(allQuestions.length < count)) {\n                _context4.next = 56;\n                break;\n              }\n              throw new Error(\"Could only generate \".concat(allQuestions.length, \" unique questions out of \").concat(count, \" requested. Please try with different content or reduce the number of questions.\"));\n            case 56:\n              return _context4.abrupt(\"return\", allQuestions);\n            case 57:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[4, 37]]);\n      }));\n      return _generateQuestions.apply(this, arguments);\n    }\n    function processQuizResponse(response, content) {\n      var questions = [];\n      var currentQuestion = null;\n\n      // Split by double newlines to separate questions\n      var sections = response.split(/\\n\\s*\\n/);\n      var _iterator = _createForOfIteratorHelper(sections),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var section = _step.value;\n          var lines = section.split('\\n');\n          for (var i = 0; i < lines.length; i++) {\n            var line = lines[i].trim();\n            if (!line) continue;\n\n            // Check for question start\n            if (line.startsWith('Question:') || line.startsWith('True/False:')) {\n              if (currentQuestion) {\n                questions.push(currentQuestion);\n              }\n              var isMultipleChoice = line.startsWith('Question:');\n              currentQuestion = {\n                text: line.replace(/^(Question:|True\\/False:)/i, '').trim(),\n                type: isMultipleChoice ? 'multiple-choice' : 'true-false',\n                options: isMultipleChoice ? {} : {\n                  'true': 'True',\n                  'false': 'False'\n                },\n                correctAnswer: '',\n                explanation: '',\n                difficulty: 'medium'\n              };\n              continue;\n            }\n            if (!currentQuestion) continue;\n\n            // Handle options for multiple choice\n            if (currentQuestion.type === 'multiple-choice') {\n              var optionMatch = line.match(/^([A-D])[).]\\s*(.*)/i);\n              if (optionMatch) {\n                var letter = optionMatch[1].toUpperCase();\n                var option = optionMatch[2].trim();\n                currentQuestion.options[letter] = option;\n              }\n\n              // Check for answer line\n              if (line.startsWith('Answer:')) {\n                var answerMatch = line.match(/Answer:\\s*([A-D])\\*/i);\n                if (answerMatch) {\n                  currentQuestion.correctAnswer = answerMatch[1].toUpperCase();\n                }\n              }\n            }\n\n            // Handle true/false answer\n            if (currentQuestion.type === 'true-false' && line.startsWith('Answer:')) {\n              var answer = line.toLowerCase();\n              if (answer.includes('true*')) {\n                currentQuestion.correctAnswer = 'true';\n              } else if (answer.includes('false*')) {\n                currentQuestion.correctAnswer = 'false';\n              }\n            }\n\n            // Handle difficulty\n            if (line.startsWith('Difficulty:')) {\n              var difficulty = line.substring(11).trim().toLowerCase();\n              if (['easy', 'medium', 'hard'].includes(difficulty)) {\n                currentQuestion.difficulty = difficulty;\n              }\n            }\n          }\n        }\n\n        // Add the last question if exists\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (currentQuestion) {\n        questions.push(currentQuestion);\n      }\n\n      // Validate questions\n      var validQuestions = questions.filter(function (q) {\n        // Basic validation\n        if (!q.text || !q.type) return false;\n\n        // Validate multiple choice questions\n        if (q.type === 'multiple-choice') {\n          var hasEnoughOptions = Object.keys(q.options).length >= 2;\n          var hasCorrectAnswer = !!q.correctAnswer && !!q.options[q.correctAnswer];\n          return hasEnoughOptions && hasCorrectAnswer;\n        }\n\n        // Validate true/false questions\n        if (q.type === 'true-false') {\n          return q.correctAnswer === 'true' || q.correctAnswer === 'false';\n        }\n        return false;\n      });\n      if (validQuestions.length === 0) {\n        console.error('Raw response:', response);\n        console.error('Parsed questions:', questions);\n        throw new Error('No valid questions could be generated from the content.');\n      }\n\n      // Add explanations from content\n      validQuestions.forEach(function (q) {\n        return findExplanationFromContent(q, content);\n      });\n      return {\n        questions: validQuestions\n      };\n    }\n    function findExplanationFromContent(question, content) {\n      // Split content into smaller chunks (paragraphs and sentences)\n      var paragraphs = content.split(/\\n\\s*\\n/).map(function (p) {\n        return p.trim();\n      }).filter(function (p) {\n        return p.length > 0;\n      });\n      var sentences = content.split(/(?<=[.!?])\\s+/).map(function (s) {\n        return s.trim();\n      }).filter(function (s) {\n        return s.length > 0;\n      });\n\n      // Extract key terms from question and answer\n      var questionTerms = new Set(question.text.toLowerCase().replace(/[.,?!]/g, '').split(' ').filter(function (word) {\n        return word.length > 3 && !['what', 'when', 'where', 'why', 'how', 'which', 'who', 'does', 'can', 'will', 'should', 'would', 'could', 'the', 'and', 'that'].includes(word);\n      }));\n      var answerTerms = new Set();\n      if (question.type === 'multiple-choice') {\n        // Add terms from correct answer\n        question.options[question.correctAnswer].toLowerCase().replace(/[.,?!]/g, '').split(' ').filter(function (word) {\n          return word.length > 3;\n        }).forEach(function (term) {\n          return answerTerms.add(term);\n        });\n\n        // Add key terms from incorrect options to help identify contrasting explanations\n        Object.entries(question.options).filter(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n            key = _ref4[0];\n          return key !== question.correctAnswer;\n        }).forEach(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n            option = _ref6[1];\n          option.toLowerCase().replace(/[.,?!]/g, '').split(' ').filter(function (word) {\n            return word.length > 3;\n          }).forEach(function (term) {\n            return answerTerms.add(term);\n          });\n        });\n      }\n\n      // Score each paragraph\n      var scoredParagraphs = paragraphs.map(function (paragraph) {\n        var normalizedParagraph = paragraph.toLowerCase();\n        var score = 0;\n        var termMatches = 0;\n\n        // Check for exact phrase matches\n        if (normalizedParagraph.includes(question.text.toLowerCase())) {\n          score += 25;\n        }\n\n        // Check for answer phrase matches\n        if (question.type === 'multiple-choice') {\n          if (normalizedParagraph.includes(question.options[question.correctAnswer].toLowerCase())) {\n            score += 20;\n          }\n        }\n\n        // Score based on term density and relevance\n        questionTerms.forEach(function (term) {\n          if (normalizedParagraph.includes(term)) {\n            score += 5;\n            termMatches++;\n          }\n        });\n        answerTerms.forEach(function (term) {\n          if (normalizedParagraph.includes(term)) {\n            score += 3;\n            termMatches++;\n          }\n        });\n\n        // Bonus for high term density\n        var density = termMatches / paragraph.split(' ').length;\n        score += density * 20;\n\n        // Penalty for very long paragraphs\n        if (paragraph.length > 300) {\n          score *= 0.8;\n        }\n        return {\n          text: paragraph,\n          score: score,\n          termMatches: termMatches\n        };\n      }).filter(function (p) {\n        return p.score > 10;\n      }) // Only keep paragraphs with meaningful scores\n      .sort(function (a, b) {\n        return b.score - a.score;\n      });\n\n      // Score individual sentences for potential additional context\n      var scoredSentences = sentences.map(function (sentence) {\n        var normalizedSentence = sentence.toLowerCase();\n        var score = 0;\n        var termMatches = 0;\n        questionTerms.forEach(function (term) {\n          if (normalizedSentence.includes(term)) {\n            score += 3;\n            termMatches++;\n          }\n        });\n        answerTerms.forEach(function (term) {\n          if (normalizedSentence.includes(term)) {\n            score += 2;\n            termMatches++;\n          }\n        });\n\n        // Bonus for high term density in short sentences\n        var density = termMatches / sentence.split(' ').length;\n        score += density * 15;\n        return {\n          text: sentence,\n          score: score,\n          termMatches: termMatches\n        };\n      }).filter(function (s) {\n        return s.score > 5;\n      }).sort(function (a, b) {\n        return b.score - a.score;\n      });\n\n      // Construct the explanation\n      var explanation = '';\n      if (scoredParagraphs.length > 0) {\n        // Use the highest scoring paragraph, but trim it if it's too long\n        var mainExplanation = scoredParagraphs[0].text;\n        if (mainExplanation.length > 300) {\n          // Find the most relevant segment within the paragraph\n          var segments = mainExplanation.split(/(?<=[.!?])\\s+/);\n          var relevantSegments = segments.filter(function (segment) {\n            var normalizedSegment = segment.toLowerCase();\n            return [].concat(_toConsumableArray(questionTerms), _toConsumableArray(answerTerms)).some(function (term) {\n              return normalizedSegment.includes(term);\n            });\n          });\n          mainExplanation = relevantSegments.slice(0, 2).join(' ');\n        }\n        explanation = mainExplanation;\n\n        // Add a highly relevant sentence if it provides additional context\n        if (scoredSentences.length > 0 && scoredSentences[0].score > 10 && !explanation.toLowerCase().includes(scoredSentences[0].text.toLowerCase())) {\n          explanation += ' ' + scoredSentences[0].text;\n        }\n      } else if (scoredSentences.length > 0) {\n        // Use up to two most relevant sentences if no good paragraph was found\n        explanation = scoredSentences.slice(0, 2).map(function (s) {\n          return s.text;\n        }).join(' ');\n      }\n\n      // If no good explanation was found, use a fallback\n      if (!explanation || explanation.length < 20) {\n        if (question.type === 'multiple-choice') {\n          var correctOption = question.options[question.correctAnswer];\n          explanation = \"The correct answer is \\\"\".concat(correctOption, \"\\\". This can be determined from the context of the material.\");\n        } else {\n          explanation = \"This statement is \".concat(question.correctAnswer, \" based on the information provided in the material.\");\n        }\n      } else {\n        // Add a concluding sentence for multiple choice questions\n        if (question.type === 'multiple-choice') {\n          var _correctOption = question.options[question.correctAnswer];\n          if (!explanation.includes(_correctOption)) {\n            explanation += \" Therefore, \\\"\".concat(_correctOption, \"\\\" is the correct answer.\");\n          }\n        }\n      }\n      question.explanation = explanation;\n    }\n    function selectQuestions(questions) {\n      // First, remove duplicates while preserving order\n      var uniqueQuestions = questions.filter(function (question, index, self) {\n        return index === self.findIndex(function (q) {\n          return normalizeText(q.text) === normalizeText(question.text);\n        });\n      });\n\n      // Return all unique questions if we don't have enough\n      if (uniqueQuestions.length <= Number(questionCount.value)) {\n        return shuffleQuestions(uniqueQuestions);\n      }\n\n      // Use the algorithm to distribute questions by difficulty\n      return distributeByDifficulty(uniqueQuestions, Number(questionCount.value));\n    }\n\n    // Results formatting\n    var formatQuestionsForResults = computed(function () {\n      return adaptiveQuestions.value.map(function (q, index) {\n        var _userResponses$value$, _userResponses$value$2;\n        return {\n          text: q.text,\n          type: q.type,\n          options: q.options,\n          userAnswer: (_userResponses$value$ = userResponses.value[index]) === null || _userResponses$value$ === void 0 ? void 0 : _userResponses$value$.userAnswer,\n          correctAnswer: q.correctAnswer,\n          explanation: q.explanation,\n          isCorrect: (_userResponses$value$2 = userResponses.value[index]) === null || _userResponses$value$2 === void 0 ? void 0 : _userResponses$value$2.correct\n        };\n      });\n    });\n    var formatUserAnswersForResults = computed(function () {\n      return userResponses.value.map(function (r) {\n        return r.userAnswer;\n      });\n    });\n    var correctAnswersCount = computed(function () {\n      return userResponses.value.filter(function (r) {\n        return r.correct;\n      }).length;\n    });\n\n    // Update the calculateScore function\n    var score = computed(function () {\n      return calculateScore(userResponses.value);\n    });\n\n    // Update the saveQuizResults function to handle retakes\n    var saveQuizResults = function saveQuizResults() {\n      var _selectedFiles$value$;\n      var quizResult = {\n        fileName: ((_selectedFiles$value$ = selectedFiles.value[0]) === null || _selectedFiles$value$ === void 0 ? void 0 : _selectedFiles$value$.name) || 'Untitled Quiz',\n        questionCount: Number(questionCount.value),\n        predictedScore: predictedScore.value,\n        actualScore: score.value,\n        date: new Date(),\n        fileContent: extractedContent.value,\n        questions: adaptiveQuestions.value.map(function (q, index) {\n          var _userResponses$value$3, _userResponses$value$4;\n          return {\n            text: q.text,\n            type: q.type,\n            options: q.options,\n            userAnswer: (_userResponses$value$3 = userResponses.value[index]) === null || _userResponses$value$3 === void 0 ? void 0 : _userResponses$value$3.userAnswer,\n            correctAnswer: q.correctAnswer,\n            isCorrect: (_userResponses$value$4 = userResponses.value[index]) === null || _userResponses$value$4 === void 0 ? void 0 : _userResponses$value$4.correct,\n            explanation: q.explanation\n          };\n        })\n      };\n      if (isRetaking.value && retakeIndex.value !== -1) {\n        // Update existing record\n        quizHistory.value[retakeIndex.value] = _objectSpread(_objectSpread({}, quizHistory.value[retakeIndex.value]), {}, {\n          actualScore: quizResult.actualScore,\n          date: quizResult.date,\n          questions: quizResult.questions\n        });\n      } else {\n        // Add new record\n        quizHistory.value.unshift(quizResult);\n      }\n      localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n\n      // Reset retake flags\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Update the handleRetakeQuiz function to set retake flags\n    var handleRetakeQuiz = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(quizToRetake) {\n        var file, requestedQuestionCount, response, processedQuiz, _err$response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // Find the index of the quiz being retaken\n              retakeIndex.value = quizHistory.value.findIndex(function (quiz) {\n                return quiz.fileName === quizToRetake.fileName && quiz.questionCount === quizToRetake.questionCount && quiz.fileContent === quizToRetake.fileContent;\n              });\n              if (!(retakeIndex.value === -1)) {\n                _context2.next = 4;\n                break;\n              }\n              console.error('Could not find original quiz to retake');\n              return _context2.abrupt(\"return\");\n            case 4:\n              isRetaking.value = true;\n\n              // Reset quiz state\n              quizStarted.value = false;\n              quizFinished.value = false;\n              predictedScore.value = null;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              userResponses.value = [];\n\n              // Set the question count from the previous quiz\n              questionCount.value = quizToRetake.questionCount.toString();\n\n              // Create a dummy file with the same name\n              file = new File([''], quizToRetake.fileName, {\n                type: 'text/plain'\n              }); // Set the selected file and content\n              selectedFiles.value = [file];\n              extractedContent.value = quizToRetake.fileContent;\n\n              // Generate new quiz using the stored content\n              _context2.prev = 15;\n              isLoading.value = true;\n              requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n              _context2.next = 20;\n              return generateQuestions(extractedContent.value, requestedQuestionCount);\n            case 20:\n              response = _context2.sent;\n              processedQuiz = processQuizResponse(response, extractedContent.value);\n              adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n              predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n              _context2.next = 31;\n              break;\n            case 26:\n              _context2.prev = 26;\n              _context2.t0 = _context2[\"catch\"](15);\n              error.value = \"Error generating questions: \".concat(((_err$response = _context2.t0.response) === null || _err$response === void 0 || (_err$response = _err$response.data) === null || _err$response === void 0 || (_err$response = _err$response.error) === null || _err$response === void 0 ? void 0 : _err$response.message) || _context2.t0.message);\n              // Reset retake flags on error\n              isRetaking.value = false;\n              retakeIndex.value = -1;\n            case 31:\n              _context2.prev = 31;\n              isLoading.value = false;\n              return _context2.finish(31);\n            case 34:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[15, 26, 31, 34]]);\n      }));\n      return function handleRetakeQuiz(_x4) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    // Update handleCreateQuiz to reset retake flags\n    var handleCreateQuiz = function handleCreateQuiz() {\n      // Reset the quiz state\n      selectedQuiz.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      predictedScore.value = null;\n      selectedFiles.value = [];\n      questionCount.value = '';\n      error.value = '';\n      extractedContent.value = '';\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Add the clearHistory function\n    var clearHistory = function clearHistory() {\n      if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n        quizHistory.value = [];\n        localStorage.removeItem('quizHistory');\n      }\n    };\n\n    // Helper function to check if two questions are too similar\n    function isSimilarQuestion(q1, q2) {\n      // Convert both questions to lowercase and remove punctuation\n      var normalize = function normalize(text) {\n        return text.toLowerCase().replace(/[^\\w\\s]/g, '');\n      };\n      var q1Text = normalize(q1.text);\n      var q2Text = normalize(q2.text);\n\n      // If the questions are exactly the same, they're similar\n      if (q1Text === q2Text) return true;\n\n      // If they're different types (MC vs T/F), they're not similar\n      if (q1.type !== q2.type) return false;\n\n      // For multiple choice questions, check if the options are too similar\n      if (q1.type === 'multiple-choice' && q2.type === 'multiple-choice') {\n        var q1Options = Object.values(q1.options).map(normalize);\n        var q2Options = Object.values(q2.options).map(normalize);\n        var commonOptions = q1Options.filter(function (opt) {\n          return q2Options.includes(opt);\n        });\n        if (commonOptions.length >= 3) return true; // If 3 or more options are the same, consider them similar\n      }\n\n      // Check for word overlap ratio\n      var q1Words = new Set(q1Text.split(/\\s+/));\n      var q2Words = new Set(q2Text.split(/\\s+/));\n      var commonWords = new Set(_toConsumableArray(q1Words).filter(function (x) {\n        return q2Words.has(x);\n      }));\n      var overlapRatio = commonWords.size / Math.min(q1Words.size, q2Words.size);\n      return overlapRatio > 0.7; // If more than 70% of words overlap, consider them similar\n    }\n\n    // Add function to handle quiz selection\n    var handleQuizSelect = function handleQuizSelect(quiz) {\n      // Reset any active quiz states\n      quizStarted.value = false;\n      quizFinished.value = false;\n      predictedScore.value = null;\n\n      // Set the selected quiz\n      selectedQuiz.value = quiz;\n    };\n    function normalizeText(text) {\n      return text.toLowerCase().trim().replace(/\\s+/g, ' ');\n    }\n    var __returned__ = {\n      selectedFiles: selectedFiles,\n      fileInput: fileInput,\n      unsupportedFiles: unsupportedFiles,\n      extractionErrors: extractionErrors,\n      questionCount: questionCount,\n      isLoading: isLoading,\n      error: error,\n      predictedScore: predictedScore,\n      quizStarted: quizStarted,\n      quizFinished: quizFinished,\n      adaptiveQuestions: adaptiveQuestions,\n      userResponses: userResponses,\n      extractedContent: extractedContent,\n      selectedQuiz: selectedQuiz,\n      quizHistory: quizHistory,\n      isRetaking: isRetaking,\n      retakeIndex: retakeIndex,\n      isFormValid: isFormValid,\n      hasFileErrors: hasFileErrors,\n      getPredictedScoreClass: getPredictedScoreClass,\n      triggerFileInput: triggerFileInput,\n      handleFileSelect: handleFileSelect,\n      handleDrop: handleDrop,\n      addFiles: addFiles,\n      removeFile: removeFile,\n      handleSubmit: handleSubmit,\n      startQuiz: startQuiz,\n      handleQuizComplete: handleQuizComplete,\n      restartQuiz: restartQuiz,\n      resetToMainScreen: resetToMainScreen,\n      readFileContent: readFileContent,\n      generateQuestions: generateQuestions,\n      processQuizResponse: processQuizResponse,\n      findExplanationFromContent: findExplanationFromContent,\n      selectQuestions: selectQuestions,\n      formatQuestionsForResults: formatQuestionsForResults,\n      formatUserAnswersForResults: formatUserAnswersForResults,\n      correctAnswersCount: correctAnswersCount,\n      score: score,\n      saveQuizResults: saveQuizResults,\n      handleRetakeQuiz: handleRetakeQuiz,\n      handleCreateQuiz: handleCreateQuiz,\n      clearHistory: clearHistory,\n      isSimilarQuestion: isSimilarQuestion,\n      handleQuizSelect: handleQuizSelect,\n      normalizeText: normalizeText,\n      ref: ref,\n      computed: computed,\n      onMounted: onMounted,\n      get axios() {\n        return axios;\n      },\n      FileErrorDisplay: FileErrorDisplay,\n      QuizResults: QuizResults,\n      FlashcardQuiz: FlashcardQuiz,\n      Sidebar: Sidebar,\n      QuizHistoryDetails: QuizHistoryDetails,\n      AccountButton: AccountButton,\n      get shuffleQuestions() {\n        return shuffleQuestions;\n      },\n      get distributeByDifficulty() {\n        return distributeByDifficulty;\n      },\n      get calculatePredictedScore() {\n        return calculatePredictedScore;\n      },\n      get calculateScore() {\n        return calculateScore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","axios","FileErrorDisplay","QuizResults","FlashcardQuiz","Sidebar","QuizHistoryDetails","AccountButton","shuffleQuestions","distributeByDifficulty","calculatePredictedScore","calculateScore","selectedFiles","fileInput","unsupportedFiles","extractionErrors","questionCount","isLoading","error","predictedScore","quizStarted","quizFinished","adaptiveQuestions","userResponses","extractedContent","selectedQuiz","quizHistory","isRetaking","retakeIndex","savedHistory","localStorage","getItem","value","JSON","parse","isFormValid","length","hasFileErrors","getPredictedScoreClass","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validTypes","validFiles","invalidFiles","forEach","file","includes","type","push","concat","_toConsumableArray","removeFile","index","splice","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fileContents","validContents","requestedQuestionCount","questions","wrap","_callee$","_context","prev","next","abrupt","console","log","map","f","name","Promise","all","readFileContent","sent","filter","content","trim","Error","join","Number","generateQuestions","t0","message","finish","stop","apply","arguments","startQuiz","handleQuizComplete","responses","question","_responses$index","_responses$index2","_objectSpread","userAnswer","isCorrect","correct","saveQuizResults","restartQuiz","resetToMainScreen","_x","_readFileContent","_callee3","_callee3$","_context3","resolve","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","data","text","fileName","_x2","_x3","_generateQuestions","_callee4","count","maxRetries","retryCount","allQuestions","_response$data","remainingCount","strategy","prompt","response","responseText","newQuestions","uniqueNewQuestions","_error$response","_error$response2","_callee4$","_context4","post","VUE_APP_GEMINI_API_KEY","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","candidates","replace","processQuizResponse","setTimeout","newQ","some","existingQ","isSimilarQuestion","slice","t1","status","currentQuestion","sections","split","_iterator","_createForOfIteratorHelper","_step","s","n","done","section","lines","i","line","startsWith","isMultipleChoice","options","correctAnswer","explanation","difficulty","optionMatch","match","letter","toUpperCase","option","answerMatch","answer","toLowerCase","substring","err","e","validQuestions","q","hasEnoughOptions","Object","keys","hasCorrectAnswer","findExplanationFromContent","paragraphs","p","sentences","questionTerms","Set","word","answerTerms","term","add","entries","_ref3","_ref4","_slicedToArray","key","_ref5","_ref6","scoredParagraphs","paragraph","normalizedParagraph","score","termMatches","density","sort","a","b","scoredSentences","sentence","normalizedSentence","mainExplanation","segments","relevantSegments","segment","normalizedSegment","correctOption","selectQuestions","uniqueQuestions","self","findIndex","normalizeText","formatQuestionsForResults","_userResponses$value$","_userResponses$value$2","formatUserAnswersForResults","r","correctAnswersCount","_selectedFiles$value$","quizResult","actualScore","date","Date","fileContent","_userResponses$value$3","_userResponses$value$4","unshift","setItem","stringify","handleRetakeQuiz","_ref7","_callee2","quizToRetake","processedQuiz","_err$response","_callee2$","_context2","quiz","toString","File","Math","min","_x4","handleCreateQuiz","clearHistory","confirm","removeItem","q1","q2","normalize","q1Text","q2Text","q1Options","values","q2Options","commonOptions","opt","q1Words","q2Words","commonWords","x","has","overlapRatio","size","handleQuizSelect"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <AccountButton />\n    <Sidebar \n      :quiz-history=\"quizHistory\" \n      @create-quiz=\"handleCreateQuiz\"\n      @retake-quiz=\"handleRetakeQuiz\"\n      @clear-history=\"clearHistory\"\n      @select-quiz=\"handleQuizSelect\"\n    />\n    <div class=\"main-content\">\n      <div class=\"upload-container\">\n        <h1>QUIZZy</h1>\n        \n        <div v-if=\"selectedQuiz\" class=\"quiz-details-container\">\n          <QuizHistoryDetails\n            :quiz=\"selectedQuiz\"\n            @retake-quiz=\"handleRetakeQuiz\"\n            @close=\"selectedQuiz = null\"\n          />\n        </div>\n\n        <div v-else-if=\"!quizStarted && !quizFinished && predictedScore === null\" class=\"file-upload-section\">\n          <h2>Upload Files</h2>\n          <div class=\"upload-area\" \n            @dragover.prevent \n            @drop.prevent=\"handleDrop\"\n            @click=\"triggerFileInput\"\n            role=\"button\"\n            tabindex=\"0\"\n            @keydown.enter=\"triggerFileInput\"\n          >\n            <input \n              type=\"file\" \n              @change=\"handleFileSelect\" \n              accept=\".pdf,.docx,.pptx,.txt\"\n              ref=\"fileInput\"\n              class=\"file-input\"\n            >\n            <div class=\"upload-prompt\">\n              <p>Drag and drop files here or click to select</p>\n              <div class=\"supported-formats\">\n                <p>Supported formats:</p>\n                <ul>\n                  <li><span class=\"format-icon\">📄</span> Documents (PDF, DOCX)</li>\n                  <li><span class=\"format-icon\">📊</span> Presentations (PPTX)</li>\n                  <li><span class=\"format-icon\">📝</span> Text files (TXT)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"hasFileErrors\" class=\"error-section\">\n            <FileErrorDisplay\n              :extraction-errors=\"extractionErrors\"\n              :unsupported-files=\"unsupportedFiles\"\n            />\n          </div>\n\n          <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n            <h3>Selected Files:</h3>\n            <ul>\n              <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n                <span class=\"file-name\">{{ file.name }}</span>\n                <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">×</button>\n              </li>\n            </ul>\n          </div>\n\n          <div class=\"questions-section\">\n            <h2>Number of Questions</h2>\n            <div class=\"question-input\">\n              <input\n                type=\"number\"\n                v-model=\"questionCount\"\n                min=\"1\"\n                max=\"20\"\n                placeholder=\"Enter number of questions\"\n              />\n            </div>\n          </div>\n\n          <button \n            class=\"submit-btn\" \n            :disabled=\"!isFormValid || isLoading\"\n            @click=\"handleSubmit\"\n          >\n            {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n          </button>\n        </div>\n\n        <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n          <div class=\"predicted-score-container\">\n            <h2>Ready to Start!</h2>\n            <div class=\"score-prediction\">\n              <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n                <span class=\"predicted-value\">{{ predictedScore }}%</span>\n                <span class=\"prediction-label\">Predicted Score</span>\n              </div>\n            </div>\n            <p class=\"prediction-explanation\">\n              Based on your study material, we predict you'll score around {{ predictedScore }}%.\n            </p>\n            <button class=\"start-quiz-btn\" @click=\"startQuiz\">Start Quiz</button>\n          </div>\n        </div>\n\n        <FlashcardQuiz\n          v-if=\"quizStarted && !quizFinished\"\n          :questions=\"adaptiveQuestions\"\n          :total-questions=\"Number(questionCount)\"\n          @quiz-completed=\"handleQuizComplete\"\n        />\n\n        <QuizResults\n          v-if=\"quizFinished\"\n          :questions=\"formatQuestionsForResults\"\n          :user-answers=\"formatUserAnswersForResults\"\n          :score=\"correctAnswersCount\"\n          :predicted-score=\"predictedScore\"\n          @restart=\"restartQuiz\"\n          @go-back=\"resetToMainScreen\"\n        />\n\n        <div v-if=\"error\" class=\"error-message\">\n          {{ error }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading Overlay -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <div class=\"loading-content\">\n        <div class=\"typewriter\">Generating quiz</div>\n        <div class=\"dots\">\n          <span>.</span>\n          <span>.</span>\n          <span>.</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport QuizHistoryDetails from './components/QuizHistoryDetails.vue';\nimport AccountButton from './components/AccountButton.vue';\nimport { shuffleQuestions, distributeByDifficulty } from './algorithms/question-management';\nimport { calculatePredictedScore, calculateScore } from './algorithms/score-calculation';\n\n// File handling state\nconst selectedFiles = ref([]);\nconst fileInput = ref(null);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\n\n// Quiz state\nconst questionCount = ref('');\nconst isLoading = ref(false);\nconst error = ref('');\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst quizFinished = ref(false);\nconst adaptiveQuestions = ref([]);\nconst userResponses = ref([]);\nconst extractedContent = ref('');\nconst selectedQuiz = ref(null);\n\n// Add quiz history state\nconst quizHistory = ref([]);\n\n// Add isRetaking flag to track retakes\nconst isRetaking = ref(false);\nconst retakeIndex = ref(-1);\n\n// Load quiz history from localStorage on mount\nonMounted(() => {\n  const savedHistory = localStorage.getItem('quizHistory');\n  if (savedHistory) {\n    quizHistory.value = JSON.parse(savedHistory);\n  }\n});\n\n// Computed properties\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n\n// File handling methods\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\n// Quiz handling methods\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  userResponses.value = [];\n  extractedContent.value = '';\n  extractionErrors.value = [];\n\n  try {\n    console.log('Processing files:', selectedFiles.value.map(f => ({ name: f.name, type: f.type })));\n    \n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    const validContents = fileContents.filter(content => content && content.trim().length > 0);\n    console.log('Number of files with valid content:', validContents.length);\n    \n    if (validContents.length === 0) {\n      throw new Error('No valid content could be extracted from the selected files.');\n    }\n\n    extractedContent.value = validContents.join('\\n\\n');\n    console.log('Total content length:', extractedContent.value.length);\n    \n    if (extractedContent.value.trim().length < 50) {\n      throw new Error('The extracted content is too short to generate meaningful questions.');\n    }\n\n    const requestedQuestionCount = Number(questionCount.value);\n    console.log('Requesting questions:', requestedQuestionCount);\n    \n    const questions = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    \n    if (!questions || questions.length === 0) {\n      throw new Error('No valid questions could be generated.');\n    }\n\n    console.log('Generated questions:', questions.length);\n    adaptiveQuestions.value = questions;\n    predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n\n  } catch (err) {\n    console.error('Error in handleSubmit:', err);\n    error.value = err.message || 'An unexpected error occurred while generating questions.';\n    adaptiveQuestions.value = [];\n    predictedScore.value = null;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n};\n\nconst handleQuizComplete = (responses) => {\n  userResponses.value = responses;\n  // Update the adaptiveQuestions with user answers\n  adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => ({\n    ...question,\n    userAnswer: responses[index]?.userAnswer,\n    isCorrect: responses[index]?.correct\n  }));\n  quizFinished.value = true;\n  saveQuizResults();\n};\n\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  userResponses.value = [];\n};\n\nconst resetToMainScreen = () => {\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\n// Helper functions\nasync function readFileContent(file) {\n  return new Promise((resolve) => {\n    try {\n      console.log('File type:', file.type);\n      console.log('File name:', file.name);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n      .then(res => res.json())\n      .then(data => {\n        if (data.text) {\n          resolve(data.text);\n        } else {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: data.error || 'Failed to extract text from file'\n          });\n          resolve('');\n        }\n      })\n      .catch(error => {\n        console.error('Error processing file:', error);\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: `Error processing file: ${error.message}`\n        });\n        resolve('');\n      });\n    } catch (error) {\n      console.error('Error preparing file:', error);\n      extractionErrors.value.push({\n        fileName: file.name,\n        message: `Error preparing file: ${error.message}`\n      });\n      resolve('');\n    }\n  });\n}\n\nasync function generateQuestions(content, count) {\n  const maxRetries = 3;\n  let retryCount = 0;\n  let allQuestions = [];\n\n  while (retryCount < maxRetries && allQuestions.length < count) {\n    try {\n      const remainingCount = count - allQuestions.length;\n      const strategy = retryCount % 3;\n      let prompt = `Generate exactly ${remainingCount} questions. DO NOT use markdown formatting or asterisks for emphasis.\nFOLLOW THIS EXACT FORMAT WITH NO DEVIATIONS:\n\nFor Multiple Choice Questions:\nQuestion: What is the question text?\nA) First option\nB) Second option\nC) Third option\nD) Fourth option\nAnswer: A* (or B*, C*, D* - add asterisk to correct answer)\nDifficulty: easy (or medium or hard)\n\nFor True/False Questions:\nTrue/False: What is the question text?\nAnswer: True* (or False* - add asterisk to correct answer)\nDifficulty: easy (or medium or hard)\n\nREQUIREMENTS:\n1. Use the exact format shown above\n2. Do not add any extra formatting or text\n3. Do not use markdown\n4. Do not use bold or italics\n5. Each question must end with a difficulty level\n6. Questions must be based on this content:\n\n${content}\n\nSTRATEGY: `;\n\n      switch (strategy) {\n        case 0:\n          prompt += 'Create a mix of multiple-choice and true/false questions that directly test understanding of the content.';\n          break;\n        case 1:\n          prompt += 'Create questions that focus on what is NOT mentioned or opposite relationships in the content.';\n          break;\n        case 2:\n          prompt += 'Create questions that test application and inference of the concepts mentioned in the content.';\n          break;\n      }\n\n      const response = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n        {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7 + (retryCount * 0.1),\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 2048,\n          }\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (!response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {\n        throw new Error('Invalid response format from Gemini API');\n      }\n\n      const responseText = response.data.candidates[0].content.parts[0].text\n        .replace(/\\*\\*/g, '') // Remove markdown bold\n        .replace(/\\*/g, '*')  // Normalize asterisks\n        .replace(/[\"\"]/g, '\"'); // Normalize quotes\n\n      console.log('Generated response:', responseText);\n\n      const newQuestions = processQuizResponse(responseText, content).questions;\n      \n      if (newQuestions.length === 0) {\n        console.error('No valid questions parsed from response');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        continue;\n      }\n\n      const uniqueNewQuestions = newQuestions.filter(newQ => \n        !allQuestions.some(existingQ => isSimilarQuestion(newQ, existingQ))\n      );\n\n      allQuestions = [...allQuestions, ...uniqueNewQuestions];\n      \n      if (allQuestions.length >= count) {\n        return allQuestions.slice(0, count);\n      }\n\n      retryCount++;\n\n    } catch (error) {\n      console.error(`Attempt ${retryCount + 1} failed:`, error);\n      retryCount++;\n      \n      if (error.response?.status === 429) {\n        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n      } else if (retryCount === maxRetries) {\n        throw new Error(`Failed to generate enough unique questions after ${maxRetries} attempts. ${error.response?.data?.error?.message || error.message}`);\n      } else {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  if (allQuestions.length < count) {\n    throw new Error(`Could only generate ${allQuestions.length} unique questions out of ${count} requested. Please try with different content or reduce the number of questions.`);\n  }\n\n  return allQuestions;\n}\n\nfunction processQuizResponse(response, content) {\n  const questions = [];\n  let currentQuestion = null;\n  \n  // Split by double newlines to separate questions\n  const sections = response.split(/\\n\\s*\\n/);\n  \n  for (const section of sections) {\n    const lines = section.split('\\n');\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n\n      // Check for question start\n      if (line.startsWith('Question:') || line.startsWith('True/False:')) {\n        if (currentQuestion) {\n          questions.push(currentQuestion);\n        }\n\n        const isMultipleChoice = line.startsWith('Question:');\n        currentQuestion = {\n          text: line.replace(/^(Question:|True\\/False:)/i, '').trim(),\n          type: isMultipleChoice ? 'multiple-choice' : 'true-false',\n          options: isMultipleChoice ? {} : { 'true': 'True', 'false': 'False' },\n          correctAnswer: '',\n          explanation: '',\n          difficulty: 'medium'\n        };\n        continue;\n      }\n\n      if (!currentQuestion) continue;\n\n      // Handle options for multiple choice\n      if (currentQuestion.type === 'multiple-choice') {\n        const optionMatch = line.match(/^([A-D])[).]\\s*(.*)/i);\n        if (optionMatch) {\n          const letter = optionMatch[1].toUpperCase();\n          let option = optionMatch[2].trim();\n          currentQuestion.options[letter] = option;\n        }\n        \n        // Check for answer line\n        if (line.startsWith('Answer:')) {\n          const answerMatch = line.match(/Answer:\\s*([A-D])\\*/i);\n          if (answerMatch) {\n            currentQuestion.correctAnswer = answerMatch[1].toUpperCase();\n          }\n        }\n      }\n\n      // Handle true/false answer\n      if (currentQuestion.type === 'true-false' && line.startsWith('Answer:')) {\n        const answer = line.toLowerCase();\n        if (answer.includes('true*')) {\n          currentQuestion.correctAnswer = 'true';\n        } else if (answer.includes('false*')) {\n          currentQuestion.correctAnswer = 'false';\n        }\n      }\n\n      // Handle difficulty\n      if (line.startsWith('Difficulty:')) {\n        const difficulty = line.substring(11).trim().toLowerCase();\n        if (['easy', 'medium', 'hard'].includes(difficulty)) {\n          currentQuestion.difficulty = difficulty;\n        }\n      }\n    }\n  }\n\n  // Add the last question if exists\n  if (currentQuestion) {\n    questions.push(currentQuestion);\n  }\n\n  // Validate questions\n  const validQuestions = questions.filter(q => {\n    // Basic validation\n    if (!q.text || !q.type) return false;\n\n    // Validate multiple choice questions\n    if (q.type === 'multiple-choice') {\n      const hasEnoughOptions = Object.keys(q.options).length >= 2;\n      const hasCorrectAnswer = !!q.correctAnswer && !!q.options[q.correctAnswer];\n      return hasEnoughOptions && hasCorrectAnswer;\n    }\n\n    // Validate true/false questions\n    if (q.type === 'true-false') {\n      return q.correctAnswer === 'true' || q.correctAnswer === 'false';\n    }\n\n    return false;\n  });\n\n  if (validQuestions.length === 0) {\n    console.error('Raw response:', response);\n    console.error('Parsed questions:', questions);\n    throw new Error('No valid questions could be generated from the content.');\n  }\n\n  // Add explanations from content\n  validQuestions.forEach(q => findExplanationFromContent(q, content));\n\n  return { questions: validQuestions };\n}\n\nfunction findExplanationFromContent(question, content) {\n  // Split content into smaller chunks (paragraphs and sentences)\n  const paragraphs = content.split(/\\n\\s*\\n/)\n    .map(p => p.trim())\n    .filter(p => p.length > 0);\n  \n  const sentences = content.split(/(?<=[.!?])\\s+/)\n    .map(s => s.trim())\n    .filter(s => s.length > 0);\n\n  // Extract key terms from question and answer\n  const questionTerms = new Set(\n    question.text.toLowerCase()\n      .replace(/[.,?!]/g, '')\n      .split(' ')\n      .filter(word => word.length > 3 && !['what', 'when', 'where', 'why', 'how', 'which', 'who', 'does', 'can', 'will', 'should', 'would', 'could', 'the', 'and', 'that'].includes(word))\n  );\n\n  const answerTerms = new Set();\n  if (question.type === 'multiple-choice') {\n    // Add terms from correct answer\n    question.options[question.correctAnswer].toLowerCase()\n      .replace(/[.,?!]/g, '')\n      .split(' ')\n      .filter(word => word.length > 3)\n      .forEach(term => answerTerms.add(term));\n    \n    // Add key terms from incorrect options to help identify contrasting explanations\n    Object.entries(question.options)\n      .filter(([key]) => key !== question.correctAnswer)\n      .forEach(([, option]) => {\n        option.toLowerCase()\n          .replace(/[.,?!]/g, '')\n          .split(' ')\n          .filter(word => word.length > 3)\n          .forEach(term => answerTerms.add(term));\n      });\n  }\n\n  // Score each paragraph\n  const scoredParagraphs = paragraphs.map(paragraph => {\n    const normalizedParagraph = paragraph.toLowerCase();\n    let score = 0;\n    let termMatches = 0;\n\n    // Check for exact phrase matches\n    if (normalizedParagraph.includes(question.text.toLowerCase())) {\n      score += 25;\n    }\n\n    // Check for answer phrase matches\n    if (question.type === 'multiple-choice') {\n      if (normalizedParagraph.includes(question.options[question.correctAnswer].toLowerCase())) {\n        score += 20;\n      }\n    }\n\n    // Score based on term density and relevance\n    questionTerms.forEach(term => {\n      if (normalizedParagraph.includes(term)) {\n        score += 5;\n        termMatches++;\n      }\n    });\n\n    answerTerms.forEach(term => {\n      if (normalizedParagraph.includes(term)) {\n        score += 3;\n        termMatches++;\n      }\n    });\n\n    // Bonus for high term density\n    const density = termMatches / (paragraph.split(' ').length);\n    score += density * 20;\n\n    // Penalty for very long paragraphs\n    if (paragraph.length > 300) {\n      score *= 0.8;\n    }\n\n    return {\n      text: paragraph,\n      score,\n      termMatches\n    };\n  }).filter(p => p.score > 10) // Only keep paragraphs with meaningful scores\n    .sort((a, b) => b.score - a.score);\n\n  // Score individual sentences for potential additional context\n  const scoredSentences = sentences.map(sentence => {\n    const normalizedSentence = sentence.toLowerCase();\n    let score = 0;\n    let termMatches = 0;\n\n    questionTerms.forEach(term => {\n      if (normalizedSentence.includes(term)) {\n        score += 3;\n        termMatches++;\n      }\n    });\n\n    answerTerms.forEach(term => {\n      if (normalizedSentence.includes(term)) {\n        score += 2;\n        termMatches++;\n      }\n    });\n\n    // Bonus for high term density in short sentences\n    const density = termMatches / (sentence.split(' ').length);\n    score += density * 15;\n\n    return {\n      text: sentence,\n      score,\n      termMatches\n    };\n  }).filter(s => s.score > 5)\n    .sort((a, b) => b.score - a.score);\n\n  // Construct the explanation\n  let explanation = '';\n  \n  if (scoredParagraphs.length > 0) {\n    // Use the highest scoring paragraph, but trim it if it's too long\n    let mainExplanation = scoredParagraphs[0].text;\n    if (mainExplanation.length > 300) {\n      // Find the most relevant segment within the paragraph\n      const segments = mainExplanation.split(/(?<=[.!?])\\s+/);\n      const relevantSegments = segments.filter(segment => {\n        const normalizedSegment = segment.toLowerCase();\n        return [...questionTerms, ...answerTerms].some(term => normalizedSegment.includes(term));\n      });\n      mainExplanation = relevantSegments.slice(0, 2).join(' ');\n    }\n    explanation = mainExplanation;\n\n    // Add a highly relevant sentence if it provides additional context\n    if (scoredSentences.length > 0 && \n        scoredSentences[0].score > 10 && \n        !explanation.toLowerCase().includes(scoredSentences[0].text.toLowerCase())) {\n      explanation += ' ' + scoredSentences[0].text;\n    }\n  } else if (scoredSentences.length > 0) {\n    // Use up to two most relevant sentences if no good paragraph was found\n    explanation = scoredSentences.slice(0, 2)\n      .map(s => s.text)\n      .join(' ');\n  }\n\n  // If no good explanation was found, use a fallback\n  if (!explanation || explanation.length < 20) {\n    if (question.type === 'multiple-choice') {\n      const correctOption = question.options[question.correctAnswer];\n      explanation = `The correct answer is \"${correctOption}\". This can be determined from the context of the material.`;\n    } else {\n      explanation = `This statement is ${question.correctAnswer} based on the information provided in the material.`;\n    }\n  } else {\n    // Add a concluding sentence for multiple choice questions\n    if (question.type === 'multiple-choice') {\n      const correctOption = question.options[question.correctAnswer];\n      if (!explanation.includes(correctOption)) {\n        explanation += ` Therefore, \"${correctOption}\" is the correct answer.`;\n      }\n    }\n  }\n\n  question.explanation = explanation;\n}\n\nfunction selectQuestions(questions) {\n  // First, remove duplicates while preserving order\n  const uniqueQuestions = questions.filter((question, index, self) => \n    index === self.findIndex((q) => \n      normalizeText(q.text) === normalizeText(question.text)\n    )\n  );\n\n  // Return all unique questions if we don't have enough\n  if (uniqueQuestions.length <= Number(questionCount.value)) {\n    return shuffleQuestions(uniqueQuestions);\n  }\n\n  // Use the algorithm to distribute questions by difficulty\n  return distributeByDifficulty(uniqueQuestions, Number(questionCount.value));\n}\n\n// Results formatting\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    options: q.options,\n    userAnswer: userResponses.value[index]?.userAnswer,\n    correctAnswer: q.correctAnswer,\n    explanation: q.explanation,\n    isCorrect: userResponses.value[index]?.correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update the calculateScore function\nconst score = computed(() => {\n  return calculateScore(userResponses.value);\n});\n\n// Update the saveQuizResults function to handle retakes\nconst saveQuizResults = () => {\n  const quizResult = {\n    fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n    questionCount: Number(questionCount.value),\n    predictedScore: predictedScore.value,\n    actualScore: score.value,\n    date: new Date(),\n    fileContent: extractedContent.value,\n    questions: adaptiveQuestions.value.map((q, index) => ({\n      text: q.text,\n      type: q.type,\n      options: q.options,\n      userAnswer: userResponses.value[index]?.userAnswer,\n      correctAnswer: q.correctAnswer,\n      isCorrect: userResponses.value[index]?.correct,\n      explanation: q.explanation\n    }))\n  };\n  \n  if (isRetaking.value && retakeIndex.value !== -1) {\n    // Update existing record\n    quizHistory.value[retakeIndex.value] = {\n      ...quizHistory.value[retakeIndex.value],\n      actualScore: quizResult.actualScore,\n      date: quizResult.date,\n      questions: quizResult.questions\n    };\n  } else {\n    // Add new record\n    quizHistory.value.unshift(quizResult);\n  }\n  \n  localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n  \n  // Reset retake flags\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Update the handleRetakeQuiz function to set retake flags\nconst handleRetakeQuiz = async (quizToRetake) => {\n  // Find the index of the quiz being retaken\n  retakeIndex.value = quizHistory.value.findIndex(quiz => \n    quiz.fileName === quizToRetake.fileName && \n    quiz.questionCount === quizToRetake.questionCount &&\n    quiz.fileContent === quizToRetake.fileContent\n  );\n  \n  if (retakeIndex.value === -1) {\n    console.error('Could not find original quiz to retake');\n    return;\n  }\n  \n  isRetaking.value = true;\n  \n  // Reset quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  \n  // Set the question count from the previous quiz\n  questionCount.value = quizToRetake.questionCount.toString();\n  \n  // Create a dummy file with the same name\n  const file = new File([''], quizToRetake.fileName, {\n    type: 'text/plain'\n  });\n  \n  // Set the selected file and content\n  selectedFiles.value = [file];\n  extractedContent.value = quizToRetake.fileContent;\n  \n  // Generate new quiz using the stored content\n  try {\n    isLoading.value = true;\n    const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n    \n    const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    const processedQuiz = processQuizResponse(response, extractedContent.value);\n    \n    adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n    predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response?.data?.error?.message || err.message}`;\n    // Reset retake flags on error\n    isRetaking.value = false;\n    retakeIndex.value = -1;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Update handleCreateQuiz to reset retake flags\nconst handleCreateQuiz = () => {\n  // Reset the quiz state\n  selectedQuiz.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  selectedFiles.value = [];\n  questionCount.value = '';\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Add the clearHistory function\nconst clearHistory = () => {\n  if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n    quizHistory.value = [];\n    localStorage.removeItem('quizHistory');\n  }\n};\n\n// Helper function to check if two questions are too similar\nfunction isSimilarQuestion(q1, q2) {\n  // Convert both questions to lowercase and remove punctuation\n  const normalize = text => text.toLowerCase().replace(/[^\\w\\s]/g, '');\n  const q1Text = normalize(q1.text);\n  const q2Text = normalize(q2.text);\n\n  // If the questions are exactly the same, they're similar\n  if (q1Text === q2Text) return true;\n\n  // If they're different types (MC vs T/F), they're not similar\n  if (q1.type !== q2.type) return false;\n\n  // For multiple choice questions, check if the options are too similar\n  if (q1.type === 'multiple-choice' && q2.type === 'multiple-choice') {\n    const q1Options = Object.values(q1.options).map(normalize);\n    const q2Options = Object.values(q2.options).map(normalize);\n    const commonOptions = q1Options.filter(opt => q2Options.includes(opt));\n    if (commonOptions.length >= 3) return true; // If 3 or more options are the same, consider them similar\n  }\n\n  // Check for word overlap ratio\n  const q1Words = new Set(q1Text.split(/\\s+/));\n  const q2Words = new Set(q2Text.split(/\\s+/));\n  const commonWords = new Set([...q1Words].filter(x => q2Words.has(x)));\n  const overlapRatio = commonWords.size / Math.min(q1Words.size, q2Words.size);\n\n  return overlapRatio > 0.7; // If more than 70% of words overlap, consider them similar\n}\n\n// Add function to handle quiz selection\nconst handleQuizSelect = (quiz) => {\n  // Reset any active quiz states\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  \n  // Set the selected quiz\n  selectedQuiz.value = quiz;\n};\n\nfunction normalizeText(text) {\n  return text.toLowerCase().trim().replace(/\\s+/g, ' ');\n}\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px; /* Same as sidebar width */\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: #f5f5f5;\n  overflow-y: auto;\n}\n\n.upload-container {\n  width: 90%;\n  max-width: 800px;\n  margin: 0 auto;\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.85);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(2px);\n}\n\n.loading-content {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 2rem;\n  color: #333;\n  font-weight: 500;\n}\n\n.typewriter {\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(14) infinite;\n  border-right: 3px solid #4CAF50;\n}\n\n.dots {\n  display: flex;\n}\n\n.dots span {\n  opacity: 0;\n  animation: dot 1.5s infinite;\n  animation-fill-mode: both;\n}\n\n.dots span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.dots span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0%, 90%, 100% {\n    width: 0;\n  }\n  30%, 60% {\n    width: 14ch;\n  }\n}\n\n@keyframes dot {\n  0%, 100% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n\n.quiz-details-container {\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n  position: relative;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}