{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { ref, computed } from 'vue';\nimport { updateQuestionAfterReview } from '../algorithms/spaced-repetition';\nexport default {\n  __name: 'SpacedReviewSession',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    }\n  },\n  emits: ['session-complete'],\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose,\n      __emit = _ref.emit;\n    __expose();\n    var props = __props;\n    var emit = __emit;\n\n    // State\n    var currentIndex = ref(0);\n    var showAnswer = ref(false);\n    var selectedAnswer = ref(null);\n    var reviewResults = ref([]);\n    var correctAnswers = ref(0);\n\n    // Computed\n    var totalReviews = computed(function () {\n      return props.questions.length;\n    });\n    var completedReviews = computed(function () {\n      return reviewResults.value.length;\n    });\n    var currentQuestion = computed(function () {\n      return props.questions[currentIndex.value];\n    });\n    var isLastQuestion = computed(function () {\n      return currentIndex.value === props.questions.length - 1;\n    });\n    var isCorrect = computed(function () {\n      var _currentQuestion$valu;\n      return selectedAnswer.value === ((_currentQuestion$valu = currentQuestion.value) === null || _currentQuestion$valu === void 0 ? void 0 : _currentQuestion$valu.correctAnswer);\n    });\n\n    // Methods\n    function submitAnswer(answer) {\n      if (showAnswer.value) return;\n      selectedAnswer.value = answer;\n      showAnswer.value = true;\n      var performance = answer === currentQuestion.value.correctAnswer ? 1 : 0;\n      if (performance === 1) correctAnswers.value++;\n      var updatedQuestion = updateQuestionAfterReview(currentQuestion.value, performance);\n      reviewResults.value.push({\n        questionId: currentQuestion.value.id,\n        question: currentQuestion.value.text,\n        userAnswer: answer,\n        correct: performance === 1,\n        nextReview: updatedQuestion.spacedRepetition.nextReviewDate,\n        spacedRepetition: updatedQuestion.spacedRepetition\n      });\n    }\n    function moveToNext() {\n      if (isLastQuestion.value) {\n        emit('session-complete', reviewResults.value);\n      } else {\n        currentIndex.value++;\n        showAnswer.value = false;\n        selectedAnswer.value = null;\n      }\n    }\n    function formatNextReview(date) {\n      var days = Math.round((new Date(date) - new Date()) / (1000 * 60 * 60 * 24));\n      return days === 1 ? 'tomorrow' : \"\".concat(days, \" days\");\n    }\n    var __returned__ = {\n      props: props,\n      emit: emit,\n      currentIndex: currentIndex,\n      showAnswer: showAnswer,\n      selectedAnswer: selectedAnswer,\n      reviewResults: reviewResults,\n      correctAnswers: correctAnswers,\n      totalReviews: totalReviews,\n      completedReviews: completedReviews,\n      currentQuestion: currentQuestion,\n      isLastQuestion: isLastQuestion,\n      isCorrect: isCorrect,\n      submitAnswer: submitAnswer,\n      moveToNext: moveToNext,\n      formatNextReview: formatNextReview,\n      ref: ref,\n      computed: computed,\n      get updateQuestionAfterReview() {\n        return updateQuestionAfterReview;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","updateQuestionAfterReview","props","__props","emit","__emit","currentIndex","showAnswer","selectedAnswer","reviewResults","correctAnswers","totalReviews","questions","length","completedReviews","value","currentQuestion","isLastQuestion","isCorrect","_currentQuestion$valu","correctAnswer","submitAnswer","answer","performance","updatedQuestion","push","questionId","id","question","text","userAnswer","correct","nextReview","spacedRepetition","nextReviewDate","moveToNext","formatNextReview","date","days","Math","round","Date","concat"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/SpacedReviewSession.vue"],"sourcesContent":["<template>\r\n  <div class=\"spaced-review-container\">\r\n    <div class=\"review-header\">\r\n      <h2>Review Session</h2>\r\n      <div class=\"progress-info\">\r\n        <span>{{ completedReviews }} / {{ totalReviews }} Questions</span>\r\n        <div class=\"progress-bar\">\r\n          <div \r\n            class=\"progress-fill\" \r\n            :style=\"{ width: `${(completedReviews / totalReviews) * 100}%` }\"\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"currentQuestion\" class=\"question-card\">\r\n      <div class=\"question-content\">\r\n        <p class=\"question-text\">{{ currentQuestion.text }}</p>\r\n        \r\n        <div v-if=\"currentQuestion.type === 'multiple-choice'\" class=\"options\">\r\n          <button\r\n            v-for=\"(text, key) in currentQuestion.options\"\r\n            :key=\"key\"\r\n            :class=\"['option-btn', {\r\n              'selected': showAnswer && key === currentQuestion.correctAnswer,\r\n              'incorrect': showAnswer && key === selectedAnswer && key !== currentQuestion.correctAnswer\r\n            }]\"\r\n            @click=\"submitAnswer(key)\"\r\n            :disabled=\"showAnswer\"\r\n          >\r\n            {{ key }}) {{ text }}\r\n          </button>\r\n        </div>\r\n        \r\n        <div v-else class=\"true-false-options\">\r\n          <button\r\n            v-for=\"option in ['true', 'false']\"\r\n            :key=\"option\"\r\n            :class=\"['tf-btn', {\r\n              'selected': showAnswer && option === currentQuestion.correctAnswer,\r\n              'incorrect': showAnswer && option === selectedAnswer && option !== currentQuestion.correctAnswer\r\n            }]\"\r\n            @click=\"submitAnswer(option)\"\r\n            :disabled=\"showAnswer\"\r\n          >\r\n            {{ option.charAt(0).toUpperCase() + option.slice(1) }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"showAnswer\" class=\"answer-feedback\">\r\n        <div class=\"feedback-header\" :class=\"{ 'correct': isCorrect, 'incorrect': !isCorrect }\">\r\n          {{ isCorrect ? 'Correct!' : 'Incorrect' }}\r\n        </div>\r\n        \r\n        <div class=\"next-review-info\">\r\n          Next review in: {{ formatNextReview(currentQuestion.spacedRepetition.nextReviewDate) }}\r\n        </div>\r\n\r\n        <div class=\"explanation\" v-if=\"currentQuestion.explanation\">\r\n          <h4>Explanation:</h4>\r\n          <p>{{ currentQuestion.explanation }}</p>\r\n        </div>\r\n\r\n        <button class=\"next-btn\" @click=\"moveToNext\">\r\n          {{ isLastQuestion ? 'Finish Review' : 'Next Question' }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-else-if=\"completedReviews === totalReviews\" class=\"session-complete\">\r\n      <h3>Review Session Complete!</h3>\r\n      <div class=\"session-stats\">\r\n        <p>Correct: {{ correctAnswers }}</p>\r\n        <p>Total Questions: {{ totalReviews }}</p>\r\n        <p>Accuracy: {{ Math.round((correctAnswers / totalReviews) * 100) }}%</p>\r\n      </div>\r\n      <button class=\"finish-btn\" @click=\"$emit('session-complete', reviewResults)\">\r\n        Return to Dashboard\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport { updateQuestionAfterReview } from '../algorithms/spaced-repetition';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  }\r\n});\r\n\r\nconst emit = defineEmits(['session-complete']);\r\n\r\n// State\r\nconst currentIndex = ref(0);\r\nconst showAnswer = ref(false);\r\nconst selectedAnswer = ref(null);\r\nconst reviewResults = ref([]);\r\nconst correctAnswers = ref(0);\r\n\r\n// Computed\r\nconst totalReviews = computed(() => props.questions.length);\r\nconst completedReviews = computed(() => reviewResults.value.length);\r\nconst currentQuestion = computed(() => props.questions[currentIndex.value]);\r\nconst isLastQuestion = computed(() => currentIndex.value === props.questions.length - 1);\r\nconst isCorrect = computed(() => selectedAnswer.value === currentQuestion.value?.correctAnswer);\r\n\r\n// Methods\r\nfunction submitAnswer(answer) {\r\n  if (showAnswer.value) return;\r\n  \r\n  selectedAnswer.value = answer;\r\n  showAnswer.value = true;\r\n  \r\n  const performance = answer === currentQuestion.value.correctAnswer ? 1 : 0;\r\n  if (performance === 1) correctAnswers.value++;\r\n  \r\n  const updatedQuestion = updateQuestionAfterReview(currentQuestion.value, performance);\r\n  \r\n  reviewResults.value.push({\r\n    questionId: currentQuestion.value.id,\r\n    question: currentQuestion.value.text,\r\n    userAnswer: answer,\r\n    correct: performance === 1,\r\n    nextReview: updatedQuestion.spacedRepetition.nextReviewDate,\r\n    spacedRepetition: updatedQuestion.spacedRepetition\r\n  });\r\n}\r\n\r\nfunction moveToNext() {\r\n  if (isLastQuestion.value) {\r\n    emit('session-complete', reviewResults.value);\r\n  } else {\r\n    currentIndex.value++;\r\n    showAnswer.value = false;\r\n    selectedAnswer.value = null;\r\n  }\r\n}\r\n\r\nfunction formatNextReview(date) {\r\n  const days = Math.round((new Date(date) - new Date()) / (1000 * 60 * 60 * 24));\r\n  return days === 1 ? 'tomorrow' : `${days} days`;\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.spaced-review-container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n}\r\n\r\n.review-header {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.progress-info {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.progress-bar {\r\n  height: 8px;\r\n  background-color: #e0e0e0;\r\n  border-radius: 4px;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.progress-fill {\r\n  height: 100%;\r\n  background-color: #4CAF50;\r\n  border-radius: 4px;\r\n  transition: width 0.3s ease;\r\n}\r\n\r\n.question-card {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 2rem;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.question-text {\r\n  font-size: 1.2rem;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.options, .true-false-options {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n.option-btn, .tf-btn {\r\n  padding: 1rem;\r\n  border: 2px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  background: white;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  text-align: left;\r\n}\r\n\r\n.option-btn:hover, .tf-btn:hover {\r\n  border-color: #2196F3;\r\n}\r\n\r\n.selected {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border-color: #4CAF50;\r\n}\r\n\r\n.incorrect {\r\n  background-color: #f44336;\r\n  color: white;\r\n  border-color: #f44336;\r\n}\r\n\r\n.answer-feedback {\r\n  margin-top: 2rem;\r\n  padding-top: 2rem;\r\n  border-top: 1px solid #e0e0e0;\r\n}\r\n\r\n.feedback-header {\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.feedback-header.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.feedback-header.incorrect {\r\n  color: #f44336;\r\n}\r\n\r\n.next-review-info {\r\n  margin: 1rem 0;\r\n  color: #666;\r\n}\r\n\r\n.explanation {\r\n  background: #f5f5f5;\r\n  padding: 1rem;\r\n  border-radius: 8px;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.next-btn, .finish-btn {\r\n  background: #2196F3;\r\n  color: white;\r\n  padding: 1rem 2rem;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.next-btn:hover, .finish-btn:hover {\r\n  background: #1976D2;\r\n}\r\n\r\n.session-complete {\r\n  text-align: center;\r\n  padding: 2rem;\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.session-stats {\r\n  margin: 2rem 0;\r\n  font-size: 1.2rem;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}