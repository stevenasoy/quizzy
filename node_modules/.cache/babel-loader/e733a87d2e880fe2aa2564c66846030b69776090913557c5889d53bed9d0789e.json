{"ast":null,"code":"import { createElementVNode as _createElementVNode, withModifiers as _withModifiers, withKeys as _withKeys, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, vModelRadio as _vModelRadio, createBlock as _createBlock, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"upload-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"file-upload-section\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"selected-files\"\n};\nconst _hoisted_5 = {\n  class: \"file-name\"\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"questions-section\"\n};\nconst _hoisted_8 = {\n  class: \"question-input\"\n};\nconst _hoisted_9 = {\n  class: \"difficulty-section\"\n};\nconst _hoisted_10 = {\n  class: \"difficulty-selector\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = {\n  key: 1\n};\nconst _hoisted_13 = {\n  key: 2\n};\nconst _hoisted_14 = {\n  key: 3,\n  class: \"error-message\"\n};\nconst _hoisted_15 = {\n  key: 0,\n  class: \"quiz-container\"\n};\nconst _hoisted_16 = {\n  class: \"options\"\n};\nconst _hoisted_17 = [\"id\", \"name\", \"value\", \"onUpdate:modelValue\"];\nconst _hoisted_18 = [\"for\"];\nconst _hoisted_19 = {\n  key: 0,\n  class: \"feedback\"\n};\nconst _hoisted_20 = {\n  class: \"explanation\"\n};\nconst _hoisted_21 = [\"disabled\"];\nexport function render(_ctx, _cache) {\n  const _component_FileErrorDisplay = _resolveComponent(\"FileErrorDisplay\");\n  const _component_FlashcardQuiz = _resolveComponent(\"FlashcardQuiz\");\n  const _component_TrueFalseQuestion = _resolveComponent(\"TrueFalseQuestion\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[15] || (_cache[15] = _createElementVNode(\"h1\", null, \"QUIZZy\", -1 /* HOISTED */)), !_ctx.showQuestions ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[14] || (_cache[14] = _createElementVNode(\"h2\", null, \"Upload Files\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"upload-area\",\n    onDragover: _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _cache[2] || (_cache[2] = _withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"prevent\"])),\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.triggerFileInput && _ctx.triggerFileInput(...args)),\n    role: \"button\",\n    tabindex: \"0\",\n    onKeydown: _cache[4] || (_cache[4] = _withKeys((...args) => _ctx.triggerFileInput && _ctx.triggerFileInput(...args), [\"enter\"]))\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => _ctx.handleFileSelect && _ctx.handleFileSelect(...args)),\n    accept: \".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\",\n    ref: \"fileInput\",\n    class: \"file-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _cache[9] || (_cache[9] = _createElementVNode(\"div\", {\n    class: \"upload-prompt\"\n  }, [_createElementVNode(\"p\", null, \"Drag and drop files here or click to select\"), _createElementVNode(\"p\", null, \"Supported formats: PDF, DOCX, PPTX, TXT\")], -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), _createVNode(_component_FileErrorDisplay, {\n    \"extraction-errors\": _ctx.extractionErrors,\n    \"unsupported-files\": _ctx.unsupportedFiles\n  }, null, 8 /* PROPS */, [\"extraction-errors\", \"unsupported-files\"]), _ctx.selectedFiles.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[10] || (_cache[10] = _createElementVNode(\"h3\", null, \"Selected Files:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.selectedFiles, (file, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"file-item\"\n    }, [_createElementVNode(\"span\", _hoisted_5, _toDisplayString(file.name), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => _ctx.removeFile(index),\n      class: \"remove-btn\",\n      title: \"Remove file\"\n    }, \"Ã—\", 8 /* PROPS */, _hoisted_6)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_7, [_cache[11] || (_cache[11] = _createElementVNode(\"h2\", null, \"Number of Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.questionCount = $event),\n    min: \"1\",\n    max: \"20\",\n    placeholder: \"Enter number of questions\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.questionCount]])])]), _createElementVNode(\"div\", _hoisted_9, [_cache[13] || (_cache[13] = _createElementVNode(\"h2\", null, \"Question Difficulty\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_10, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.selectedDifficulty = $event),\n    class: \"difficulty-dropdown\"\n  }, _cache[12] || (_cache[12] = [_createElementVNode(\"option\", {\n    value: \"easy\"\n  }, \"Easy\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"medium\"\n  }, \"Medium\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"hard\"\n  }, \"Hard\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedDifficulty]])])]), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    disabled: !_ctx.isFormValid || _ctx.isLoading,\n    onClick: _cache[7] || (_cache[7] = (...args) => _ctx.handleSubmit && _ctx.handleSubmit(...args))\n  }, _toDisplayString(_ctx.isLoading ? 'Generating Questions...' : 'Submit'), 9 /* TEXT, PROPS */, _hoisted_11)])) : !_ctx.hasFileErrors && _ctx.flashcardQuestions.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createVNode(_component_FlashcardQuiz, {\n    questions: _ctx.flashcardQuestions,\n    onGoBack: _ctx.resetToMainScreen\n  }, null, 8 /* PROPS */, [\"questions\", \"onGoBack\"])])) : _ctx.hasFileErrors ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createVNode(_component_FileErrorDisplay, {\n    \"extraction-errors\": _ctx.extractionErrors,\n    \"unsupported-files\": _ctx.unsupportedFiles\n  }, null, 8 /* PROPS */, [\"extraction-errors\", \"unsupported-files\"])])) : _createCommentVNode(\"v-if\", true), _ctx.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, _toDisplayString(_ctx.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _ctx.quiz ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_cache[16] || (_cache[16] = _createElementVNode(\"h2\", null, \"Generated Quiz\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.quiz.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"question\"\n    }, [_createElementVNode(\"h3\", null, \"Question \" + _toDisplayString(index + 1) + \": \" + _toDisplayString(question.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_16, [question.type === 'multiple-choice' ? (_openBlock(true), _createElementBlock(_Fragment, {\n      key: 0\n    }, _renderList(question.options, (option, letter) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: letter,\n        class: \"option\"\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"radio\",\n        id: `q${index}-${letter}`,\n        name: `question${index}`,\n        value: letter,\n        \"onUpdate:modelValue\": $event => _ctx.userAnswers[index] = $event\n      }, null, 8 /* PROPS */, _hoisted_17), [[_vModelRadio, _ctx.userAnswers[index]]]), _createElementVNode(\"label\", {\n        for: `q${index}-${letter}`\n      }, _toDisplayString(letter) + \") \" + _toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_18)]);\n    }), 128 /* KEYED_FRAGMENT */)) : question.type === 'true-false' ? (_openBlock(), _createBlock(_component_TrueFalseQuestion, {\n      key: 1,\n      index: index,\n      \"correct-answer\": question.correctAnswer,\n      explanation: question.explanation,\n      \"show-feedback\": _ctx.showAnswers && _ctx.userAnswers[index],\n      \"onUpdate:answer\": $event => _ctx.userAnswers[index] = $event\n    }, null, 8 /* PROPS */, [\"index\", \"correct-answer\", \"explanation\", \"show-feedback\", \"onUpdate:answer\"])) : _createCommentVNode(\"v-if\", true)]), _ctx.showAnswers && _ctx.userAnswers[index] ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [_createElementVNode(\"p\", {\n      class: _normalizeClass({\n        'correct': _ctx.userAnswers[index] === question.correctAnswer,\n        'incorrect': _ctx.userAnswers[index] !== question.correctAnswer\n      })\n    }, _toDisplayString(_ctx.userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!'), 3 /* TEXT, CLASS */), _createElementVNode(\"p\", _hoisted_20, _toDisplayString(question.explanation), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => _ctx.checkAnswers && _ctx.checkAnswers(...args)),\n    disabled: !_ctx.allQuestionsAnswered\n  }, \"Check Answers\", 8 /* PROPS */, _hoisted_21)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_ctx","showQuestions","_hoisted_3","onDragover","_cache","_withModifiers","onDrop","args","handleDrop","onClick","triggerFileInput","role","tabindex","onKeydown","_withKeys","type","onChange","handleFileSelect","accept","ref","_createVNode","_component_FileErrorDisplay","extractionErrors","unsupportedFiles","selectedFiles","length","_hoisted_4","_Fragment","_renderList","file","index","_hoisted_5","_toDisplayString","name","$event","removeFile","title","_hoisted_6","_createCommentVNode","_hoisted_7","_hoisted_8","questionCount","min","max","placeholder","_hoisted_9","_hoisted_10","selectedDifficulty","value","disabled","isFormValid","isLoading","handleSubmit","_hoisted_11","hasFileErrors","flashcardQuestions","_hoisted_12","_component_FlashcardQuiz","questions","onGoBack","resetToMainScreen","_hoisted_13","error","_hoisted_14","quiz","_hoisted_15","question","text","_hoisted_16","options","option","letter","id","userAnswers","_hoisted_17","for","_hoisted_18","_createBlock","_component_TrueFalseQuestion","correctAnswer","explanation","showAnswers","_hoisted_19","_normalizeClass","_hoisted_20","checkAnswers","allQuestionsAnswered","_hoisted_21"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"upload-container\">\r\n      <h1>QUIZZy</h1>\r\n      \r\n      <div v-if=\"!showQuestions\" class=\"file-upload-section\">\r\n        <h2>Upload Files</h2>\r\n        <div class=\"upload-area\" \r\n          @dragover.prevent \r\n          @drop.prevent=\"handleDrop\"\r\n          @click=\"triggerFileInput\"\r\n          role=\"button\"\r\n          tabindex=\"0\"\r\n          @keydown.enter=\"triggerFileInput\"\r\n        >\r\n          <input \r\n            type=\"file\" \r\n            @change=\"handleFileSelect\" \r\n            accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\r\n            ref=\"fileInput\"\r\n            class=\"file-input\"\r\n          >\r\n          <div class=\"upload-prompt\">\r\n            <p>Drag and drop files here or click to select</p>\r\n            <p>Supported formats: PDF, DOCX, PPTX, TXT</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <FileErrorDisplay\r\n          :extraction-errors=\"extractionErrors\"\r\n          :unsupported-files=\"unsupportedFiles\"\r\n        />\r\n\r\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\r\n          <h3>Selected Files:</h3>\r\n          <ul>\r\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\r\n              <span class=\"file-name\">{{ file.name }}</span>\r\n              <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">Ã—</button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"questions-section\">\r\n          <h2>Number of Questions</h2>\r\n          <div class=\"question-input\">\r\n            <input\r\n              type=\"number\"\r\n              v-model=\"questionCount\"\r\n              min=\"1\"\r\n              max=\"20\"\r\n              placeholder=\"Enter number of questions\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"difficulty-section\">\r\n          <h2>Question Difficulty</h2>\r\n          <div class=\"difficulty-selector\">\r\n            <select v-model=\"selectedDifficulty\" class=\"difficulty-dropdown\">\r\n              <option value=\"easy\">Easy</option>\r\n              <option value=\"medium\">Medium</option>\r\n              <option value=\"hard\">Hard</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          class=\"submit-btn\" \r\n          :disabled=\"!isFormValid || isLoading\"\r\n          @click=\"handleSubmit\"\r\n        >\r\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\r\n        </button>\r\n      </div>\r\n\r\n      <div v-else-if=\"!hasFileErrors && flashcardQuestions.length > 0\">\r\n        <FlashcardQuiz\r\n          :questions=\"flashcardQuestions\"\r\n          @go-back=\"resetToMainScreen\"\r\n        />\r\n      </div>\r\n\r\n      <div v-else-if=\"hasFileErrors\">\r\n        <FileErrorDisplay\r\n          :extraction-errors=\"extractionErrors\"\r\n          :unsupported-files=\"unsupportedFiles\"\r\n        />\r\n      </div>\r\n\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        {{ error }}\r\n      </div>\r\n    </div>\r\n\r\n    <template v-if=\"quiz\">\r\n      <div class=\"quiz-container\">\r\n        <h2>Generated Quiz</h2>\r\n        <template v-for=\"(question, index) in quiz.questions\" :key=\"index\">\r\n          <div class=\"question\">\r\n            <h3>Question {{ index + 1 }}: {{ question.text }}</h3>\r\n            <div class=\"options\">\r\n              <template v-if=\"question.type === 'multiple-choice'\">\r\n                <div v-for=\"(option, letter) in question.options\" :key=\"letter\" class=\"option\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    :id=\"`q${index}-${letter}`\"\r\n                    :name=\"`question${index}`\"\r\n                    :value=\"letter\"\r\n                    v-model=\"userAnswers[index]\"\r\n                  />\r\n                  <label :for=\"`q${index}-${letter}`\">{{ letter }}) {{ option }}</label>\r\n                </div>\r\n              </template>\r\n              <template v-else-if=\"question.type === 'true-false'\">\r\n                <TrueFalseQuestion\r\n                  :index=\"index\"\r\n                  :correct-answer=\"question.correctAnswer\"\r\n                  :explanation=\"question.explanation\"\r\n                  :show-feedback=\"showAnswers && userAnswers[index]\"\r\n                  @update:answer=\"userAnswers[index] = $event\"\r\n                />\r\n              </template>\r\n            </div>\r\n            <div v-if=\"showAnswers && userAnswers[index]\" class=\"feedback\">\r\n              <p :class=\"{ 'correct': userAnswers[index] === question.correctAnswer, 'incorrect': userAnswers[index] !== question.correctAnswer }\">\r\n                {{ userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!' }}\r\n              </p>\r\n              <p class=\"explanation\">{{ question.explanation }}</p>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <button @click=\"checkAnswers\" :disabled=\"!allQuestionsAnswered\">Check Answers</button>\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport axios from 'axios';\r\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\r\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\r\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\r\n\r\nconst selectedFiles = ref([]);\r\nconst questionCount = ref('');\r\nconst fileInput = ref(null);\r\nconst generatedQuestions = ref([]);\r\nconst isLoading = ref(false);\r\nconst error = ref('');\r\nconst showQuestions = ref(false);\r\nconst flashcardQuestions = ref([]);\r\nconst quiz = ref(null);\r\nconst userAnswers = ref([]);\r\nconst showAnswers = ref(false);\r\nconst unsupportedFiles = ref([]);\r\nconst extractionErrors = ref([]);\r\nconst selectedDifficulty = ref('medium');\r\n\r\nconst isFormValid = computed(() => {\r\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\r\n});\r\n\r\nconst hasFileErrors = computed(() => {\r\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\r\n});\r\n\r\nconst triggerFileInput = () => {\r\n  fileInput.value.click();\r\n};\r\n\r\nconst handleFileSelect = (event) => {\r\n  const files = Array.from(event.target.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst handleDrop = (event) => {\r\n  const files = Array.from(event.dataTransfer.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst addFiles = (files) => {\r\n  const validTypes = [\r\n    'application/msword',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    'application/vnd.ms-powerpoint',\r\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n    'text/plain',\r\n    'application/pdf',\r\n    'image/png',\r\n    'image/jpeg',\r\n    'image/jpg',\r\n    'image/tiff',\r\n    'image/bmp'\r\n  ];\r\n  \r\n  const validFiles = [];\r\n  const invalidFiles = [];\r\n  \r\n  files.forEach(file => {\r\n    if (validTypes.includes(file.type)) {\r\n      validFiles.push(file);\r\n    } else {\r\n      invalidFiles.push(file);\r\n    }\r\n  });\r\n  \r\n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\r\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\r\n};\r\n\r\nconst removeFile = (index) => {\r\n  selectedFiles.value.splice(index, 1);\r\n};\r\n\r\nconst readFileContent = async (file) => {\r\n  return new Promise((resolve) => {\r\n    if (\r\n      file.type === \"application/pdf\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\r\n      file.type.startsWith('image/')\r\n    ) {\r\n      // PDF, PPTX, DOCX, or Image - send to backend for extraction\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      // Use the correct backend URL\r\n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\r\n      fetch(`${backendUrl}/extract-file`, {\r\n        method: 'POST',\r\n        body: formData\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.text) {\r\n            resolve(data.text);\r\n          } else {\r\n            extractionErrors.value.push({\r\n              fileName: file.name,\r\n              message: data.error || 'Failed to extract text from file'\r\n            });\r\n            resolve(\"[Could not extract file text]\");\r\n          }\r\n        })\r\n        .catch(() => {\r\n          extractionErrors.value.push({\r\n            fileName: file.name,\r\n            message: 'Server error while extracting text'\r\n          });\r\n          resolve(\"[Could not extract file text]\");\r\n        });\r\n    } else if (file.type === \"text/plain\") {\r\n      // Plain text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = () => {\r\n        extractionErrors.value.push({\r\n          fileName: file.name,\r\n          message: 'Error reading text file'\r\n        });\r\n        resolve(\"[Could not read file]\");\r\n      };\r\n      reader.readAsText(file);\r\n    } else {\r\n      resolve(`[${file.name} is not a supported file type.]`);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  if (!isFormValid.value) return;\r\n\r\n  isLoading.value = true;\r\n  error.value = '';\r\n  generatedQuestions.value = [];\r\n  flashcardQuestions.value = [];\r\n\r\n  try {\r\n    // Read all file contents\r\n    const fileContents = await Promise.all(\r\n      selectedFiles.value.map(file => readFileContent(file))\r\n    );\r\n\r\n    // Combine all file contents\r\n    const combinedContent = fileContents.join('\\n\\n');\r\n    console.log('Extracted file content:', combinedContent);\r\n\r\n    // Prepare the prompt for Gemini with difficulty level\r\n    const prompt = `Create a quiz with ${questionCount.value} ${selectedDifficulty.value} difficulty questions based on this text. Format each question exactly as follows:\r\n\r\nFor multiple choice questions:\r\n1. Start with \"Question: [question text]\"\r\n2. List options as:\r\n   A) [option text]\r\n   B) [option text]\r\n   C) [option text]\r\n   D) [option text]\r\n   (Mark correct answer with * after the option)\r\n3. Add \"Explanation: [explanation text]\"\r\n\r\nFor true/false questions:\r\n1. Start with \"True/False: [question text]\"\r\n2. List options as:\r\n   True*\r\n   False\r\n   (or vice versa, with * marking correct answer)\r\n3. Add \"Explanation: [explanation text]\"\r\n\r\nDifficulty Guidelines:\r\n- Easy: Focus on basic facts, definitions, and straightforward concepts\r\n- Medium: Include some analysis and application of concepts\r\n- Hard: Focus on complex analysis, synthesis, and evaluation of concepts\r\n\r\nText: ${combinedContent}`;\r\n\r\n    console.log('Sending request to Gemini API...');\r\n    console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\r\n\r\n    // Call Gemini API\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log('API Response:', response.data);\r\n\r\n    // Process the response for both quiz and flashcards\r\n    const quizText = response.data.candidates[0].content.parts[0].text;\r\n    console.log('Quiz text from API:', quizText);\r\n    \r\n    const processedQuiz = processQuizResponse(quizText);\r\n    console.log('Processed quiz:', processedQuiz);\r\n    \r\n    // Convert quiz questions to flashcard format\r\n    flashcardQuestions.value = processedQuiz.questions.map(q => ({\r\n      text: q.text,\r\n      options: q.type === 'multiple-choice' \r\n        ? Object.entries(q.options).map(([letter, text]) => ({ letter, text }))\r\n        : [\r\n            { letter: 'T', text: 'True' },\r\n            { letter: 'F', text: 'False' }\r\n          ],\r\n      answer: q.type === 'multiple-choice' ? q.correctAnswer : (q.correctAnswer === 'true' ? 'T' : 'F'),\r\n      explanation: q.explanation\r\n    }));\r\n\r\n    console.log('Flashcard questions:', flashcardQuestions.value);\r\n    console.log('Number of flashcard questions:', flashcardQuestions.value.length);\r\n\r\n    // Show the flashcard quiz\r\n    showQuestions.value = true;\r\n    console.log('showQuestions set to:', showQuestions.value);\r\n    console.log('Current state:', {\r\n      showQuestions: showQuestions.value,\r\n      flashcardQuestionsLength: flashcardQuestions.value.length,\r\n      hasQuestions: flashcardQuestions.value.length > 0\r\n    });\r\n\r\n    console.log('Prompt sent to Gemini:', prompt);\r\n    console.log('API Response:', response.data);\r\n    console.log('Quiz text from API:', quizText);\r\n    console.log('Combined file content:', combinedContent);\r\n  } catch (err) {\r\n    console.error('Detailed Error:', err.response ? err.response.data : err);\r\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n\r\nconst resetToMainScreen = () => {\r\n  showQuestions.value = false;\r\n  flashcardQuestions.value = [];\r\n  generatedQuestions.value = [];\r\n  selectedFiles.value = [];\r\n  unsupportedFiles.value = [];\r\n  extractionErrors.value = [];\r\n  questionCount.value = '';\r\n  error.value = '';\r\n  isLoading.value = false;\r\n  if (fileInput.value) {\r\n    fileInput.value.value = '';\r\n  }\r\n};\r\n\r\nconst checkAnswers = () => {\r\n  showAnswers.value = true;\r\n};\r\n\r\nconst allQuestionsAnswered = computed(() => {\r\n  return userAnswers.value.length === quiz.value.questions.length;\r\n});\r\n\r\nconst processQuizResponse = (response) => {\r\n  console.log('Processing quiz response:', response);\r\n  const questions = [];\r\n  const lines = response.split('\\n');\r\n  let currentQuestion = null;\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i].trim();\r\n    if (!line) continue;\r\n\r\n    // Accept more question formats\r\n    if (/^(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\r\n      if (currentQuestion) questions.push(currentQuestion);\r\n      currentQuestion = {\r\n        text: line.replace(/^(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\r\n        type: 'multiple-choice',\r\n        options: {},\r\n        correctAnswer: '',\r\n        explanation: ''\r\n      };\r\n    } else if (/^(True\\\\/False:|True or False:)/i.test(line)) {\r\n      if (currentQuestion) questions.push(currentQuestion);\r\n      currentQuestion = {\r\n        text: line.replace(/^(True\\\\/False:|True or False:)/i, '').trim(),\r\n        type: 'true-false',\r\n        options: { true: 'True', false: 'False' },\r\n        correctAnswer: '',\r\n        explanation: ''\r\n      };\r\n    } else if (currentQuestion) {\r\n      // Accept more option formats\r\n      const optionMatch = line.match(/^([A-Da-d])[).]\\\\s*(.*)/);\r\n      if (optionMatch) {\r\n        const letter = optionMatch[1].toUpperCase();\r\n        let option = optionMatch[2];\r\n        if (option.includes('*')) {\r\n          currentQuestion.correctAnswer = letter;\r\n          option = option.replace('*', '').trim();\r\n        }\r\n        currentQuestion.options[letter] = option;\r\n      } else if (line === 'True*' || line === 'False*') {\r\n        currentQuestion.correctAnswer = line === 'True*' ? 'true' : 'false';\r\n      } else if (line.startsWith('Explanation:')) {\r\n        currentQuestion.explanation = line.replace('Explanation:', '').trim();\r\n      }\r\n    }\r\n  }\r\n  if (currentQuestion) questions.push(currentQuestion);\r\n  return { questions };\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #f5f5f5;\r\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\r\n}\r\n\r\n.upload-container {\r\n  background-color: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  width: 90%;\r\n  max-width: 600px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\nh2 {\r\n  color: #444;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.file-upload-section {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.upload-area {\r\n  border: 2px dashed #ccc;\r\n  border-radius: 8px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  margin-bottom: 1rem;\r\n  outline: none;\r\n}\r\n\r\n.upload-area:hover {\r\n  border-color: #666;\r\n  background-color: #f8f8f8;\r\n}\r\n\r\n.upload-area:focus {\r\n  border-color: #4CAF50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.file-input {\r\n  display: none;\r\n}\r\n\r\n.upload-prompt {\r\n  color: #666;\r\n}\r\n\r\n.upload-prompt p {\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.selected-files {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.selected-files ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.selected-files li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.remove-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.questions-section {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.question-input input {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.submit-btn {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.submit-btn:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.questions-list {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.question-item {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.error-message {\r\n  color: #ff4444;\r\n  margin-top: 1rem;\r\n  text-align: center;\r\n}\r\n\r\n.quiz-container {\r\n  margin-top: 2rem;\r\n  padding: 2rem;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.question {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.options {\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.option {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.feedback {\r\n  margin-top: 0.5rem;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.incorrect {\r\n  color: #ff4444;\r\n}\r\n\r\n.explanation {\r\n  margin-top: 0.5rem;\r\n  margin-left: 1rem;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\nbutton:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.file-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.file-name {\r\n  flex: 1;\r\n  margin-right: 0.5rem;\r\n  word-break: break-word;\r\n}\r\n\r\n.remove-btn {\r\n  flex-shrink: 0;\r\n  width: 24px;\r\n  height: 24px;\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.remove-btn:hover {\r\n  background-color: #ffeeee;\r\n}\r\n\r\n.unsupported-files {\r\n  margin-top: 1rem;\r\n  padding: 1rem;\r\n  background-color: #fff3f3;\r\n  border-radius: 4px;\r\n  border: 1px solid #ffdddd;\r\n}\r\n\r\n.unsupported-files h3 {\r\n  color: #d32f2f;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.unsupported-label {\r\n  color: #d32f2f;\r\n  font-size: 0.9em;\r\n  margin-left: 0.5rem;\r\n}\r\n\r\n.unsupported-files .file-item {\r\n  background-color: #fff;\r\n  border: 1px solid #ffdddd;\r\n}\r\n\r\n.difficulty-section {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.difficulty-selector {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.difficulty-dropdown {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  background-color: white;\r\n  cursor: pointer;\r\n}\r\n\r\n.difficulty-dropdown:focus {\r\n  outline: none;\r\n  border-color: #4CAF50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}