{"ast":null,"code":"import { computed } from 'vue';\nexport default {\n  __name: 'QuizResults',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    },\n    userAnswers: {\n      type: Array,\n      required: true\n    },\n    score: {\n      type: Number,\n      required: true\n    },\n    predictedScore: {\n      type: Number,\n      required: false,\n      default: null\n    }\n  },\n  emits: ['restart', 'go-back'],\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const totalQuestions = computed(() => props.questions.length);\n    const scorePercentage = computed(() => {\n      return Math.round(props.score / totalQuestions.value * 100);\n    });\n    const scoreClass = computed(() => {\n      return scorePercentage.value >= 75 ? 'passing' : 'failing';\n    });\n    function formatAnswer(question, answer) {\n      if (!answer && answer !== false) return 'Not answered';\n      if (question.type === 'multiple-choice') {\n        const optionText = question.options[answer];\n        return optionText ? `${answer}) ${optionText}` : answer;\n      } else if (question.type === 'true-false') {\n        // Handle both string and boolean values\n        const value = String(answer).toLowerCase();\n        return value.charAt(0).toUpperCase() + value.slice(1);\n      }\n      return answer;\n    }\n    function rephraseContent(text, isSupporting, question) {\n      // Clean the text of personal info and formatting\n      let cleaned = text.trim().replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '').replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '').replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '').replace(/\\d{4}\\s*\\d{4}/g, '').replace(/\\([^)]*\\)/g, '').replace(/\\[[^\\]]*\\]/g, '').trim();\n\n      // Extract source material context if available\n      const sourceMaterial = question.sourceMaterial || cleaned;\n      const sourceContext = question.sourceContext || '';\n\n      // Analyze the question content and source material\n      const questionLower = question.text.toLowerCase();\n      const correctAnswer = question.type === 'multiple-choice' ? question.options[question.correctAnswer].toLowerCase() : String(question.correctAnswer).toLowerCase();\n      const userAnswer = question.type === 'multiple-choice' ? question.options[question.userAnswer]?.toLowerCase() : String(question.userAnswer).toLowerCase();\n\n      // Identify key themes and concepts, prioritizing those from source material\n      const themes = {\n        academic: /\\b(academic|education|study|learning|course|curriculum|program)\\b/i,\n        administrative: /\\b(manage|administration|organize|coordinate|supervise|oversee)\\b/i,\n        policy: /\\b(policy|regulation|rule|guideline|requirement|standard)\\b/i,\n        student: /\\b(student|learner|participant|enrollment|attendance)\\b/i,\n        faculty: /\\b(faculty|teacher|instructor|staff|professor)\\b/i,\n        resource: /\\b(resource|facility|equipment|material|tool)\\b/i\n      };\n\n      // Determine themes present in both question and source material\n      const matchedThemes = Object.entries(themes).filter(([theme, pattern]) => {\n        const inQuestion = pattern.test(questionLower);\n        const inSource = pattern.test(sourceMaterial.toLowerCase());\n        return inQuestion || inSource;\n      }).map(([theme]) => theme);\n\n      // Extract relevant source material sentences\n      function getRelevantSourceContext(text) {\n        if (!text) return '';\n        const sentences = text.split(/[.!?]+/).filter(Boolean);\n        return sentences.filter(sentence => matchedThemes.some(theme => themes[theme].test(sentence.toLowerCase()))).join('. ');\n      }\n\n      // Generate theme-specific explanations using source material\n      function getThemeExplanation() {\n        const relevantContext = getRelevantSourceContext(sourceContext || sourceMaterial);\n        const contextSuffix = relevantContext ? `: ${relevantContext}` : '.';\n        if (matchedThemes.includes('academic')) {\n          return isSupporting ? `Based on the course material, this correctly addresses the academic aspects${contextSuffix}` : `According to the course material, the academic requirements include${contextSuffix}`;\n        }\n        if (matchedThemes.includes('administrative')) {\n          return isSupporting ? `The course material emphasizes these administrative responsibilities${contextSuffix}` : `The course material outlines different administrative requirements${contextSuffix}`;\n        }\n        if (matchedThemes.includes('policy')) {\n          return isSupporting ? `This aligns with the policies outlined in the material${contextSuffix}` : `The material specifically states these policy requirements${contextSuffix}`;\n        }\n        if (matchedThemes.includes('student')) {\n          return isSupporting ? `As covered in the material, this addresses student-related aspects${contextSuffix}` : `The material emphasizes these student-focused requirements${contextSuffix}`;\n        }\n        if (matchedThemes.includes('faculty')) {\n          return isSupporting ? `The course material supports this regarding faculty responsibilities${contextSuffix}` : `According to the material, faculty-related requirements include${contextSuffix}`;\n        }\n        if (matchedThemes.includes('resource')) {\n          return isSupporting ? `This matches the resource management aspects covered in the material${contextSuffix}` : `The material specifies these resource-related requirements${contextSuffix}`;\n        }\n\n        // If no specific themes matched, use direct quotes from source\n        return isSupporting ? `This is correct according to the course material${contextSuffix}` : `The course material states${contextSuffix}`;\n      }\n\n      // Generate context-aware explanation\n      let explanation = getThemeExplanation();\n\n      // Add specific details about the answer choice\n      if (question.type === 'multiple-choice') {\n        const relevantOption = isSupporting ? correctAnswer : userAnswer;\n        const sourceEvidence = sourceMaterial.toLowerCase().includes(relevantOption.toLowerCase()) ? ` This is directly supported by the course material.` : ` This can be inferred from the course content.`;\n        explanation += sourceEvidence;\n      }\n\n      // For incorrect answers, add specific guidance from source material\n      if (!isSupporting && cleaned) {\n        explanation += ` To better understand this concept, review the section that states: \"${cleaned}\"`;\n      }\n      return explanation;\n    }\n    function generateExplanation(question, isCorrect) {\n      const explanation = question.explanation || '';\n      if (!explanation) return \"No explanation available.\";\n      if (question.type === 'multiple-choice') {\n        return generateMultipleChoiceExplanation(question, isCorrect);\n      } else {\n        return generateTrueFalseExplanation(question, isCorrect);\n      }\n    }\n    function generateMultipleChoiceExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      const userOption = question.options[question.userAnswer];\n      const correctOption = question.options[question.correctAnswer];\n\n      // Compare the chosen answer with the correct one to explain the difference\n      const explanation = `While \"${userOption}\" might seem reasonable, it's not the complete picture. ${rephraseContent(question.explanation, false, question)} The correct answer, \"${correctOption}\", better reflects the full scope of the position.`;\n      return explanation;\n    }\n    function generateTrueFalseExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      const userChoice = question.userAnswer ? 'true' : 'false';\n      const correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\n\n      // Explain why their understanding needs adjustment\n      return `Your understanding needs a slight adjustment. While you marked this as ${userChoice}, ${rephraseContent(question.explanation, false, question)} This is why the statement is actually ${correctChoice}.`;\n    }\n    const __returned__ = {\n      props,\n      totalQuestions,\n      scorePercentage,\n      scoreClass,\n      formatAnswer,\n      rephraseContent,\n      generateExplanation,\n      generateMultipleChoiceExplanation,\n      generateTrueFalseExplanation,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","props","__props","totalQuestions","questions","length","scorePercentage","Math","round","score","value","scoreClass","formatAnswer","question","answer","type","optionText","options","String","toLowerCase","charAt","toUpperCase","slice","rephraseContent","text","isSupporting","cleaned","trim","replace","sourceMaterial","sourceContext","questionLower","correctAnswer","userAnswer","themes","academic","administrative","policy","student","faculty","resource","matchedThemes","Object","entries","filter","theme","pattern","inQuestion","test","inSource","map","getRelevantSourceContext","sentences","split","Boolean","sentence","some","join","getThemeExplanation","relevantContext","contextSuffix","includes","explanation","relevantOption","sourceEvidence","generateExplanation","isCorrect","generateMultipleChoiceExplanation","generateTrueFalseExplanation","userOption","correctOption","userChoice","correctChoice"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <div class=\"score-display\" :class=\"scoreClass\">\r\n      <div class=\"score-container\">\r\n        <div class=\"score-main\">\r\n          <span class=\"score-value\">{{ score }}</span>\r\n          <span class=\"score-separator\">/</span>\r\n          <span class=\"score-total\">{{ totalQuestions }}</span>\r\n        </div>\r\n        <div class=\"score-percentage\">({{ scorePercentage }}%)</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"score-comparison\" v-if=\"predictedScore\">\r\n      <p>You scored {{ scorePercentage }}%. Predicted score was {{ predictedScore }}%.</p>\r\n      <p v-if=\"scorePercentage >= predictedScore + 10\" class=\"comparison-text success\">\r\n        You outperformed the prediction! Great job!\r\n      </p>\r\n      <p v-else-if=\"scorePercentage >= predictedScore - 10\" class=\"comparison-text neutral\">\r\n        You were close to the prediction!\r\n      </p>\r\n      <p v-else class=\"comparison-text warning\">\r\n        You scored below the prediction. Review the material for improvement.\r\n      </p>\r\n    </div>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Question {{ index + 1 }}</span>\r\n          <span :class=\"['result-status', question.isCorrect ? 'correct' : 'wrong']\">\r\n            {{ question.isCorrect ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\" :class=\"{ 'incorrect': !question.isCorrect }\">\r\n          <div class=\"answer-row\">\r\n            <div class=\"user-answer\">\r\n              <strong>Your answer:</strong> \r\n              <span :class=\"{ 'incorrect-text': !question.isCorrect }\">\r\n                {{ formatAnswer(question, question.userAnswer) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"correct-answer\">\r\n              <strong>Correct answer:</strong>\r\n              <span class=\"correct-text\">{{ formatAnswer(question, question.correctAnswer) }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"explanation-box\" :class=\"{ 'correct': question.isCorrect, 'incorrect': !question.isCorrect }\">\r\n            <p class=\"explanation-label\">Explanation:</p>\r\n            <p class=\"explanation-text\">{{ generateExplanation(question, question.isCorrect) }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"button-group\">\r\n      <button @click=\"$emit('restart')\" class=\"restart-btn\">Redo Quiz</button>\r\n      <button @click=\"$emit('go-back')\" class=\"back-btn\">Back to Main</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  predictedScore: {\r\n    type: Number,\r\n    required: false,\r\n    default: null\r\n  }\r\n});\r\n\r\ndefineEmits(['restart', 'go-back']);\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\nconst scorePercentage = computed(() => {\r\n  return Math.round((props.score / totalQuestions.value) * 100);\r\n});\r\nconst scoreClass = computed(() => {\r\n  return scorePercentage.value >= 75 ? 'passing' : 'failing';\r\n});\r\n\r\nfunction formatAnswer(question, answer) {\r\n  if (!answer && answer !== false) return 'Not answered';\r\n  \r\n  if (question.type === 'multiple-choice') {\r\n    const optionText = question.options[answer];\r\n    return optionText ? `${answer}) ${optionText}` : answer;\r\n  } else if (question.type === 'true-false') {\r\n    // Handle both string and boolean values\r\n    const value = String(answer).toLowerCase();\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n  }\r\n  return answer;\r\n}\r\n\r\nfunction rephraseContent(text, isSupporting, question) {\r\n  // Clean the text of personal info and formatting\r\n  let cleaned = text.trim()\r\n    .replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '')\r\n    .replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '')\r\n    .replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '')\r\n    .replace(/\\d{4}\\s*\\d{4}/g, '')\r\n    .replace(/\\([^)]*\\)/g, '')\r\n    .replace(/\\[[^\\]]*\\]/g, '')\r\n    .trim();\r\n\r\n  // Extract source material context if available\r\n  const sourceMaterial = question.sourceMaterial || cleaned;\r\n  const sourceContext = question.sourceContext || '';\r\n  \r\n  // Analyze the question content and source material\r\n  const questionLower = question.text.toLowerCase();\r\n  const correctAnswer = question.type === 'multiple-choice' \r\n    ? question.options[question.correctAnswer].toLowerCase()\r\n    : String(question.correctAnswer).toLowerCase();\r\n  const userAnswer = question.type === 'multiple-choice'\r\n    ? question.options[question.userAnswer]?.toLowerCase()\r\n    : String(question.userAnswer).toLowerCase();\r\n\r\n  // Identify key themes and concepts, prioritizing those from source material\r\n  const themes = {\r\n    academic: /\\b(academic|education|study|learning|course|curriculum|program)\\b/i,\r\n    administrative: /\\b(manage|administration|organize|coordinate|supervise|oversee)\\b/i,\r\n    policy: /\\b(policy|regulation|rule|guideline|requirement|standard)\\b/i,\r\n    student: /\\b(student|learner|participant|enrollment|attendance)\\b/i,\r\n    faculty: /\\b(faculty|teacher|instructor|staff|professor)\\b/i,\r\n    resource: /\\b(resource|facility|equipment|material|tool)\\b/i\r\n  };\r\n\r\n  // Determine themes present in both question and source material\r\n  const matchedThemes = Object.entries(themes)\r\n    .filter(([theme, pattern]) => {\r\n      const inQuestion = pattern.test(questionLower);\r\n      const inSource = pattern.test(sourceMaterial.toLowerCase());\r\n      return inQuestion || inSource;\r\n    })\r\n    .map(([theme]) => theme);\r\n\r\n  // Extract relevant source material sentences\r\n  function getRelevantSourceContext(text) {\r\n    if (!text) return '';\r\n    const sentences = text.split(/[.!?]+/).filter(Boolean);\r\n    return sentences.filter(sentence => \r\n      matchedThemes.some(theme => \r\n        themes[theme].test(sentence.toLowerCase())\r\n      )\r\n    ).join('. ');\r\n  }\r\n\r\n  // Generate theme-specific explanations using source material\r\n  function getThemeExplanation() {\r\n    const relevantContext = getRelevantSourceContext(sourceContext || sourceMaterial);\r\n    const contextSuffix = relevantContext ? `: ${relevantContext}` : '.';\r\n    \r\n    if (matchedThemes.includes('academic')) {\r\n      return isSupporting\r\n        ? `Based on the course material, this correctly addresses the academic aspects${contextSuffix}`\r\n        : `According to the course material, the academic requirements include${contextSuffix}`;\r\n    }\r\n    if (matchedThemes.includes('administrative')) {\r\n      return isSupporting\r\n        ? `The course material emphasizes these administrative responsibilities${contextSuffix}`\r\n        : `The course material outlines different administrative requirements${contextSuffix}`;\r\n    }\r\n    if (matchedThemes.includes('policy')) {\r\n      return isSupporting\r\n        ? `This aligns with the policies outlined in the material${contextSuffix}`\r\n        : `The material specifically states these policy requirements${contextSuffix}`;\r\n    }\r\n    if (matchedThemes.includes('student')) {\r\n      return isSupporting\r\n        ? `As covered in the material, this addresses student-related aspects${contextSuffix}`\r\n        : `The material emphasizes these student-focused requirements${contextSuffix}`;\r\n    }\r\n    if (matchedThemes.includes('faculty')) {\r\n      return isSupporting\r\n        ? `The course material supports this regarding faculty responsibilities${contextSuffix}`\r\n        : `According to the material, faculty-related requirements include${contextSuffix}`;\r\n    }\r\n    if (matchedThemes.includes('resource')) {\r\n      return isSupporting\r\n        ? `This matches the resource management aspects covered in the material${contextSuffix}`\r\n        : `The material specifies these resource-related requirements${contextSuffix}`;\r\n    }\r\n    \r\n    // If no specific themes matched, use direct quotes from source\r\n    return isSupporting\r\n      ? `This is correct according to the course material${contextSuffix}`\r\n      : `The course material states${contextSuffix}`;\r\n  }\r\n\r\n  // Generate context-aware explanation\r\n  let explanation = getThemeExplanation();\r\n\r\n  // Add specific details about the answer choice\r\n  if (question.type === 'multiple-choice') {\r\n    const relevantOption = isSupporting ? correctAnswer : userAnswer;\r\n    const sourceEvidence = sourceMaterial.toLowerCase().includes(relevantOption.toLowerCase())\r\n      ? ` This is directly supported by the course material.`\r\n      : ` This can be inferred from the course content.`;\r\n      \r\n    explanation += sourceEvidence;\r\n  }\r\n\r\n  // For incorrect answers, add specific guidance from source material\r\n  if (!isSupporting && cleaned) {\r\n    explanation += ` To better understand this concept, review the section that states: \"${cleaned}\"`;\r\n  }\r\n\r\n  return explanation;\r\n}\r\n\r\nfunction generateExplanation(question, isCorrect) {\r\n  const explanation = question.explanation || '';\r\n  if (!explanation) return \"No explanation available.\";\r\n\r\n  if (question.type === 'multiple-choice') {\r\n    return generateMultipleChoiceExplanation(question, isCorrect);\r\n  } else {\r\n    return generateTrueFalseExplanation(question, isCorrect);\r\n  }\r\n}\r\n\r\nfunction generateMultipleChoiceExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userOption = question.options[question.userAnswer];\r\n  const correctOption = question.options[question.correctAnswer];\r\n  \r\n  // Compare the chosen answer with the correct one to explain the difference\r\n  const explanation = `While \"${userOption}\" might seem reasonable, it's not the complete picture. ${rephraseContent(question.explanation, false, question)} The correct answer, \"${correctOption}\", better reflects the full scope of the position.`;\r\n  \r\n  return explanation;\r\n}\r\n\r\nfunction generateTrueFalseExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userChoice = question.userAnswer ? 'true' : 'false';\r\n  const correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\r\n  \r\n  // Explain why their understanding needs adjustment\r\n  return `Your understanding needs a slight adjustment. While you marked this as ${userChoice}, ${rephraseContent(question.explanation, false, question)} This is why the statement is actually ${correctChoice}.`;\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 800px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.score-display.passing {\r\n  background-color: #e8f5e9;\r\n  border: 3px solid #4CAF50;\r\n}\r\n\r\n.score-display.failing {\r\n  background-color: #ffebee;\r\n  border: 3px solid #f44336;\r\n}\r\n\r\n.score-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-main {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-value {\r\n  font-size: 4rem;\r\n  line-height: 1;\r\n  font-weight: 800;\r\n}\r\n\r\n.score-separator {\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n}\r\n\r\n.score-total {\r\n  font-size: 2.5rem;\r\n  opacity: 0.7;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.8rem;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.score-comparison {\r\n  margin: 1.5rem 0;\r\n  padding: 1.5rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n}\r\n\r\n.comparison-text {\r\n  margin-top: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-text.success {\r\n  color: #4CAF50;\r\n}\r\n\r\n.comparison-text.neutral {\r\n  color: #666;\r\n}\r\n\r\n.comparison-text.warning {\r\n  color: #f44336;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n}\r\n\r\n.result-item {\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.question-number {\r\n  font-weight: 600;\r\n  color: #666;\r\n}\r\n\r\n.result-status {\r\n  padding: 0.4rem 1rem;\r\n  border-radius: 20px;\r\n  font-weight: 600;\r\n}\r\n\r\n.result-status.correct {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.result-status.wrong {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.question-text {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  margin-bottom: 1rem;\r\n  line-height: 1.4;\r\n}\r\n\r\n.answer-details {\r\n  background-color: #fff;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.answer-details.incorrect {\r\n  border-color: #ffcdd2;\r\n  background-color: #fff5f5;\r\n}\r\n\r\n.answer-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-answer, .correct-answer {\r\n  padding: 1rem;\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.user-answer strong, .correct-answer strong {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.incorrect-text {\r\n  color: #d32f2f;\r\n}\r\n\r\n.correct-text {\r\n  color: #2e7d32;\r\n}\r\n\r\n.explanation-box {\r\n  margin-top: 1.5rem;\r\n  padding: 1.5rem;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.explanation-box.correct {\r\n  border-left: 4px solid #4CAF50;\r\n}\r\n\r\n.explanation-box.incorrect {\r\n  border-left: 4px solid #ff9800;\r\n}\r\n\r\n.explanation-label {\r\n  font-weight: 600;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.explanation-label.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.explanation-label.incorrect {\r\n  color: #f57c00;\r\n}\r\n\r\n.explanation-text {\r\n  color: #333;\r\n  line-height: 1.6;\r\n  margin: 0;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: center;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.button-group button {\r\n  padding: 0.8rem 2rem;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.restart-btn {\r\n  background: #4CAF50;\r\n}\r\n\r\n.restart-btn:hover {\r\n  background: #388e3c;\r\n}\r\n\r\n.back-btn {\r\n  background: #666;\r\n}\r\n\r\n.back-btn:hover {\r\n  background: #555;\r\n}\r\n</style> "],"mappings":"AAkEA,SAASA,QAAQ,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;IAE9B,MAAMC,KAAK,GAAGC,OAkBZ;IAIF,MAAMC,cAAc,GAAGH,QAAQ,CAAC,MAAMC,KAAK,CAACG,SAAS,CAACC,MAAM,CAAC;IAC7D,MAAMC,eAAe,GAAGN,QAAQ,CAAC,MAAM;MACrC,OAAOO,IAAI,CAACC,KAAK,CAAEP,KAAK,CAACQ,KAAK,GAAGN,cAAc,CAACO,KAAK,GAAI,GAAG,CAAC;IAC/D,CAAC,CAAC;IACF,MAAMC,UAAU,GAAGX,QAAQ,CAAC,MAAM;MAChC,OAAOM,eAAe,CAACI,KAAK,IAAI,EAAE,GAAG,SAAS,GAAG,SAAS;IAC5D,CAAC,CAAC;IAEF,SAASE,YAAYA,CAACC,QAAQ,EAAEC,MAAM,EAAE;MACtC,IAAI,CAACA,MAAM,IAAIA,MAAM,KAAK,KAAK,EAAE,OAAO,cAAc;MAEtD,IAAID,QAAQ,CAACE,IAAI,KAAK,iBAAiB,EAAE;QACvC,MAAMC,UAAU,GAAGH,QAAQ,CAACI,OAAO,CAACH,MAAM,CAAC;QAC3C,OAAOE,UAAU,GAAG,GAAGF,MAAM,KAAKE,UAAU,EAAE,GAAGF,MAAM;MACzD,CAAC,MAAM,IAAID,QAAQ,CAACE,IAAI,KAAK,YAAY,EAAE;QACzC;QACA,MAAML,KAAK,GAAGQ,MAAM,CAACJ,MAAM,CAAC,CAACK,WAAW,CAAC,CAAC;QAC1C,OAAOT,KAAK,CAACU,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGX,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC;MACvD;MACA,OAAOR,MAAM;IACf;IAEA,SAASS,eAAeA,CAACC,IAAI,EAAEC,YAAY,EAAEZ,QAAQ,EAAE;MACrD;MACA,IAAIa,OAAO,GAAGF,IAAI,CAACG,IAAI,CAAC,CAAC,CACtBC,OAAO,CAAC,sDAAsD,EAAE,EAAE,CAAC,CACnEA,OAAO,CAAC,kCAAkC,EAAE,EAAE,CAAC,CAC/CA,OAAO,CAAC,kCAAkC,EAAE,EAAE,CAAC,CAC/CA,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAC7BA,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CACzBA,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAC1BD,IAAI,CAAC,CAAC;;MAET;MACA,MAAME,cAAc,GAAGhB,QAAQ,CAACgB,cAAc,IAAIH,OAAO;MACzD,MAAMI,aAAa,GAAGjB,QAAQ,CAACiB,aAAa,IAAI,EAAE;;MAElD;MACA,MAAMC,aAAa,GAAGlB,QAAQ,CAACW,IAAI,CAACL,WAAW,CAAC,CAAC;MACjD,MAAMa,aAAa,GAAGnB,QAAQ,CAACE,IAAI,KAAK,iBAAiB,GACrDF,QAAQ,CAACI,OAAO,CAACJ,QAAQ,CAACmB,aAAa,CAAC,CAACb,WAAW,CAAC,CAAC,GACtDD,MAAM,CAACL,QAAQ,CAACmB,aAAa,CAAC,CAACb,WAAW,CAAC,CAAC;MAChD,MAAMc,UAAU,GAAGpB,QAAQ,CAACE,IAAI,KAAK,iBAAiB,GAClDF,QAAQ,CAACI,OAAO,CAACJ,QAAQ,CAACoB,UAAU,CAAC,EAAEd,WAAW,CAAC,CAAC,GACpDD,MAAM,CAACL,QAAQ,CAACoB,UAAU,CAAC,CAACd,WAAW,CAAC,CAAC;;MAE7C;MACA,MAAMe,MAAM,GAAG;QACbC,QAAQ,EAAE,oEAAoE;QAC9EC,cAAc,EAAE,oEAAoE;QACpFC,MAAM,EAAE,8DAA8D;QACtEC,OAAO,EAAE,0DAA0D;QACnEC,OAAO,EAAE,mDAAmD;QAC5DC,QAAQ,EAAE;MACZ,CAAC;;MAED;MACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,OAAO,CAACT,MAAM,CAAC,CACzCU,MAAM,CAAC,CAAC,CAACC,KAAK,EAAEC,OAAO,CAAC,KAAK;QAC5B,MAAMC,UAAU,GAAGD,OAAO,CAACE,IAAI,CAACjB,aAAa,CAAC;QAC9C,MAAMkB,QAAQ,GAAGH,OAAO,CAACE,IAAI,CAACnB,cAAc,CAACV,WAAW,CAAC,CAAC,CAAC;QAC3D,OAAO4B,UAAU,IAAIE,QAAQ;MAC/B,CAAC,CAAC,CACDC,GAAG,CAAC,CAAC,CAACL,KAAK,CAAC,KAAKA,KAAK,CAAC;;MAE1B;MACA,SAASM,wBAAwBA,CAAC3B,IAAI,EAAE;QACtC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;QACpB,MAAM4B,SAAS,GAAG5B,IAAI,CAAC6B,KAAK,CAAC,QAAQ,CAAC,CAACT,MAAM,CAACU,OAAO,CAAC;QACtD,OAAOF,SAAS,CAACR,MAAM,CAACW,QAAQ,IAC9Bd,aAAa,CAACe,IAAI,CAACX,KAAK,IACtBX,MAAM,CAACW,KAAK,CAAC,CAACG,IAAI,CAACO,QAAQ,CAACpC,WAAW,CAAC,CAAC,CAC3C,CACF,CAAC,CAACsC,IAAI,CAAC,IAAI,CAAC;MACd;;MAEA;MACA,SAASC,mBAAmBA,CAAA,EAAG;QAC7B,MAAMC,eAAe,GAAGR,wBAAwB,CAACrB,aAAa,IAAID,cAAc,CAAC;QACjF,MAAM+B,aAAa,GAAGD,eAAe,GAAG,KAAKA,eAAe,EAAE,GAAG,GAAG;QAEpE,IAAIlB,aAAa,CAACoB,QAAQ,CAAC,UAAU,CAAC,EAAE;UACtC,OAAOpC,YAAY,GACf,8EAA8EmC,aAAa,EAAE,GAC7F,sEAAsEA,aAAa,EAAE;QAC3F;QACA,IAAInB,aAAa,CAACoB,QAAQ,CAAC,gBAAgB,CAAC,EAAE;UAC5C,OAAOpC,YAAY,GACf,uEAAuEmC,aAAa,EAAE,GACtF,qEAAqEA,aAAa,EAAE;QAC1F;QACA,IAAInB,aAAa,CAACoB,QAAQ,CAAC,QAAQ,CAAC,EAAE;UACpC,OAAOpC,YAAY,GACf,yDAAyDmC,aAAa,EAAE,GACxE,6DAA6DA,aAAa,EAAE;QAClF;QACA,IAAInB,aAAa,CAACoB,QAAQ,CAAC,SAAS,CAAC,EAAE;UACrC,OAAOpC,YAAY,GACf,qEAAqEmC,aAAa,EAAE,GACpF,6DAA6DA,aAAa,EAAE;QAClF;QACA,IAAInB,aAAa,CAACoB,QAAQ,CAAC,SAAS,CAAC,EAAE;UACrC,OAAOpC,YAAY,GACf,uEAAuEmC,aAAa,EAAE,GACtF,kEAAkEA,aAAa,EAAE;QACvF;QACA,IAAInB,aAAa,CAACoB,QAAQ,CAAC,UAAU,CAAC,EAAE;UACtC,OAAOpC,YAAY,GACf,uEAAuEmC,aAAa,EAAE,GACtF,6DAA6DA,aAAa,EAAE;QAClF;;QAEA;QACA,OAAOnC,YAAY,GACf,mDAAmDmC,aAAa,EAAE,GAClE,6BAA6BA,aAAa,EAAE;MAClD;;MAEA;MACA,IAAIE,WAAW,GAAGJ,mBAAmB,CAAC,CAAC;;MAEvC;MACA,IAAI7C,QAAQ,CAACE,IAAI,KAAK,iBAAiB,EAAE;QACvC,MAAMgD,cAAc,GAAGtC,YAAY,GAAGO,aAAa,GAAGC,UAAU;QAChE,MAAM+B,cAAc,GAAGnC,cAAc,CAACV,WAAW,CAAC,CAAC,CAAC0C,QAAQ,CAACE,cAAc,CAAC5C,WAAW,CAAC,CAAC,CAAC,GACtF,qDAAqD,GACrD,gDAAgD;QAEpD2C,WAAW,IAAIE,cAAc;MAC/B;;MAEA;MACA,IAAI,CAACvC,YAAY,IAAIC,OAAO,EAAE;QAC5BoC,WAAW,IAAI,wEAAwEpC,OAAO,GAAG;MACnG;MAEA,OAAOoC,WAAW;IACpB;IAEA,SAASG,mBAAmBA,CAACpD,QAAQ,EAAEqD,SAAS,EAAE;MAChD,MAAMJ,WAAW,GAAGjD,QAAQ,CAACiD,WAAW,IAAI,EAAE;MAC9C,IAAI,CAACA,WAAW,EAAE,OAAO,2BAA2B;MAEpD,IAAIjD,QAAQ,CAACE,IAAI,KAAK,iBAAiB,EAAE;QACvC,OAAOoD,iCAAiC,CAACtD,QAAQ,EAAEqD,SAAS,CAAC;MAC/D,CAAC,MAAM;QACL,OAAOE,4BAA4B,CAACvD,QAAQ,EAAEqD,SAAS,CAAC;MAC1D;IACF;IAEA,SAASC,iCAAiCA,CAACtD,QAAQ,EAAEqD,SAAS,EAAE;MAC9D,IAAIA,SAAS,EAAE;QACb,OAAO3C,eAAe,CAACV,QAAQ,CAACiD,WAAW,EAAE,IAAI,EAAEjD,QAAQ,CAAC;MAC9D;MAEA,MAAMwD,UAAU,GAAGxD,QAAQ,CAACI,OAAO,CAACJ,QAAQ,CAACoB,UAAU,CAAC;MACxD,MAAMqC,aAAa,GAAGzD,QAAQ,CAACI,OAAO,CAACJ,QAAQ,CAACmB,aAAa,CAAC;;MAE9D;MACA,MAAM8B,WAAW,GAAG,UAAUO,UAAU,2DAA2D9C,eAAe,CAACV,QAAQ,CAACiD,WAAW,EAAE,KAAK,EAAEjD,QAAQ,CAAC,yBAAyByD,aAAa,oDAAoD;MAEnP,OAAOR,WAAW;IACpB;IAEA,SAASM,4BAA4BA,CAACvD,QAAQ,EAAEqD,SAAS,EAAE;MACzD,IAAIA,SAAS,EAAE;QACb,OAAO3C,eAAe,CAACV,QAAQ,CAACiD,WAAW,EAAE,IAAI,EAAEjD,QAAQ,CAAC;MAC9D;MAEA,MAAM0D,UAAU,GAAG1D,QAAQ,CAACoB,UAAU,GAAG,MAAM,GAAG,OAAO;MACzD,MAAMuC,aAAa,GAAG3D,QAAQ,CAACmB,aAAa,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO;;MAE1E;MACA,OAAO,0EAA0EuC,UAAU,KAAKhD,eAAe,CAACV,QAAQ,CAACiD,WAAW,EAAE,KAAK,EAAEjD,QAAQ,CAAC,0CAA0C2D,aAAa,GAAG;IAClN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}