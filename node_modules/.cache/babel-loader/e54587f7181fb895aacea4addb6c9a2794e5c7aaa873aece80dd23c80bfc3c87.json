{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"quiz-results\"\n};\nconst _hoisted_2 = {\n  class: \"score-container\"\n};\nconst _hoisted_3 = {\n  class: \"score-main\"\n};\nconst _hoisted_4 = {\n  class: \"score-value\"\n};\nconst _hoisted_5 = {\n  class: \"score-total\"\n};\nconst _hoisted_6 = {\n  class: \"score-percentage\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"score-comparison\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"comparison-text success\"\n};\nconst _hoisted_9 = {\n  key: 1,\n  class: \"comparison-text neutral\"\n};\nconst _hoisted_10 = {\n  key: 2,\n  class: \"comparison-text warning\"\n};\nconst _hoisted_11 = {\n  class: \"detailed-results\"\n};\nconst _hoisted_12 = {\n  class: \"question-header\"\n};\nconst _hoisted_13 = {\n  class: \"question-number\"\n};\nconst _hoisted_14 = {\n  class: \"question-text\"\n};\nconst _hoisted_15 = {\n  class: \"answer-row\"\n};\nconst _hoisted_16 = {\n  class: \"user-answer\"\n};\nconst _hoisted_17 = {\n  class: \"correct-answer\"\n};\nconst _hoisted_18 = {\n  class: \"correct-text\"\n};\nconst _hoisted_19 = {\n  class: \"explanation-text\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Quiz Complete!\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"score-display\", $setup.scoreClass])\n  }, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString($props.score), 1 /* TEXT */), _cache[0] || (_cache[0] = _createElementVNode(\"span\", {\n    class: \"score-separator\"\n  }, \"/\", -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_5, _toDisplayString($setup.totalQuestions), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_6, \"(\" + _toDisplayString($setup.scorePercentage) + \"%)\", 1 /* TEXT */)])], 2 /* CLASS */), $props.predictedScore ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"p\", null, \"You scored \" + _toDisplayString($setup.scorePercentage) + \"%. Predicted score was \" + _toDisplayString($props.predictedScore) + \"%.\", 1 /* TEXT */), $setup.scorePercentage > $props.predictedScore + 5 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \" Excellent! You surpassed the prediction! \")) : Math.abs($setup.scorePercentage - $props.predictedScore) <= 5 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_9, \" You were close to the prediction! \")) : (_openBlock(), _createElementBlock(\"p\", _hoisted_10, \" You scored below the prediction. Review the material for improvement. \"))])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_11, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Detailed Results\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"result-item\"\n    }, [_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"span\", _hoisted_13, \"Question \" + _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"span\", {\n      class: _normalizeClass(['result-status', question.isCorrect ? 'correct' : 'wrong'])\n    }, _toDisplayString(question.isCorrect ? '✓' : '✗'), 3 /* TEXT, CLASS */)]), _createElementVNode(\"p\", _hoisted_14, _toDisplayString(question.text), 1 /* TEXT */), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"answer-details\", {\n        'incorrect': !question.isCorrect\n      }])\n    }, [_createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"div\", _hoisted_16, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Your answer:\", -1 /* HOISTED */)), _createElementVNode(\"span\", {\n      class: _normalizeClass({\n        'incorrect-text': !question.isCorrect\n      })\n    }, _toDisplayString($setup.formatAnswer(question, question.userAnswer)), 3 /* TEXT, CLASS */)]), _createElementVNode(\"div\", _hoisted_17, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Correct answer:\", -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_18, _toDisplayString($setup.formatAnswer(question, question.correctAnswer)), 1 /* TEXT */)])]), _createElementVNode(\"div\", {\n      class: _normalizeClass([\"explanation-box\", {\n        'correct': question.isCorrect,\n        'incorrect': !question.isCorrect\n      }])\n    }, [_cache[3] || (_cache[3] = _createElementVNode(\"p\", {\n      class: \"explanation-label\"\n    }, \"Explanation:\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_19, _toDisplayString($setup.generateExplanation(question, question.isCorrect)), 1 /* TEXT */)], 2 /* CLASS */)], 2 /* CLASS */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"return-hint\"\n  }, [_createElementVNode(\"p\", null, \"You can retake this quiz anytime from the history panel\"), _createElementVNode(\"p\", null, \"Click \\\"Create New Quiz\\\" to start a new quiz with different material\")], -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_normalizeClass","$setup","scoreClass","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$props","score","_hoisted_5","totalQuestions","_hoisted_6","scorePercentage","predictedScore","_hoisted_7","_hoisted_8","Math","abs","_hoisted_9","_hoisted_10","_createCommentVNode","_hoisted_11","_Fragment","_renderList","questions","question","index","_hoisted_12","_hoisted_13","isCorrect","_hoisted_14","text","_hoisted_15","_hoisted_16","formatAnswer","userAnswer","_hoisted_17","_hoisted_18","correctAnswer","_hoisted_19","generateExplanation"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\components\\QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <div class=\"score-display\" :class=\"scoreClass\">\r\n      <div class=\"score-container\">\r\n        <div class=\"score-main\">\r\n          <span class=\"score-value\">{{ score }}</span>\r\n          <span class=\"score-separator\">/</span>\r\n          <span class=\"score-total\">{{ totalQuestions }}</span>\r\n        </div>\r\n        <div class=\"score-percentage\">({{ scorePercentage }}%)</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"score-comparison\" v-if=\"predictedScore\">\r\n      <p>You scored {{ scorePercentage }}%. Predicted score was {{ predictedScore }}%.</p>\r\n      <p v-if=\"scorePercentage > predictedScore + 5\" class=\"comparison-text success\">\r\n        Excellent! You surpassed the prediction!\r\n      </p>\r\n      <p v-else-if=\"Math.abs(scorePercentage - predictedScore) <= 5\" class=\"comparison-text neutral\">\r\n        You were close to the prediction!\r\n      </p>\r\n      <p v-else class=\"comparison-text warning\">\r\n        You scored below the prediction. Review the material for improvement.\r\n      </p>\r\n    </div>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Question {{ index + 1 }}</span>\r\n          <span :class=\"['result-status', question.isCorrect ? 'correct' : 'wrong']\">\r\n            {{ question.isCorrect ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\" :class=\"{ 'incorrect': !question.isCorrect }\">\r\n          <div class=\"answer-row\">\r\n            <div class=\"user-answer\">\r\n              <strong>Your answer:</strong> \r\n              <span :class=\"{ 'incorrect-text': !question.isCorrect }\">\r\n                {{ formatAnswer(question, question.userAnswer) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"correct-answer\">\r\n              <strong>Correct answer:</strong>\r\n              <span class=\"correct-text\">{{ formatAnswer(question, question.correctAnswer) }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"explanation-box\" :class=\"{ 'correct': question.isCorrect, 'incorrect': !question.isCorrect }\">\r\n            <p class=\"explanation-label\">Explanation:</p>\r\n            <p class=\"explanation-text\">{{ generateExplanation(question, question.isCorrect) }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"return-hint\">\r\n      <p>You can retake this quiz anytime from the history panel</p>\r\n      <p>Click \"Create New Quiz\" to start a new quiz with different material</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  predictedScore: {\r\n    type: Number,\r\n    required: false,\r\n    default: null\r\n  }\r\n});\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\nconst scorePercentage = computed(() => {\r\n  return Math.round((props.score / totalQuestions.value) * 100);\r\n});\r\nconst scoreClass = computed(() => {\r\n  return scorePercentage.value >= 75 ? 'passing' : 'failing';\r\n});\r\n\r\nfunction formatAnswer(question, answer) {\r\n  if (!answer && answer !== false) return 'Not answered';\r\n  \r\n  if (question.type === 'multiple-choice') {\r\n    const optionText = question.options[answer];\r\n    return optionText ? `${answer}) ${optionText}` : answer;\r\n  } else if (question.type === 'true-false') {\r\n    // Handle both string and boolean values\r\n    const value = String(answer).toLowerCase();\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n  }\r\n  return answer;\r\n}\r\n\r\nfunction rephraseContent(text, isSupporting, question) {\r\n  // Clean the text of personal info and formatting\r\n  let cleaned = text.trim()\r\n    .replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '')\r\n    .replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '')\r\n    .replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '')\r\n    .replace(/\\d{4}\\s*\\d{4}/g, '')\r\n    .replace(/\\([^)]*\\)/g, '')\r\n    .replace(/\\[[^\\]]*\\]/g, '')\r\n    .trim();\r\n\r\n  // Extract source material context if available\r\n  const sourceMaterial = question.sourceMaterial || cleaned;\r\n  const sourceContext = question.sourceContext || '';\r\n  \r\n  // Analyze the question content and source material\r\n  const questionLower = question.text.toLowerCase();\r\n  const correctAnswer = question.type === 'multiple-choice' \r\n    ? question.options[question.correctAnswer].toLowerCase()\r\n    : String(question.correctAnswer).toLowerCase();\r\n\r\n  // Get specific keywords from the question and answers\r\n  const questionKeywords = questionLower\r\n    .replace(/[.,?!]/g, '')\r\n    .split(/\\s+/)\r\n    .filter(word => word.length > 3)\r\n    .filter(word => !['what', 'which', 'when', 'where', 'why', 'how', 'does', 'did', 'will', 'should', 'could', 'would', 'this', 'that', 'these', 'those', 'have', 'has', 'had'].includes(word));\r\n\r\n  const correctAnswerKeywords = correctAnswer\r\n    .replace(/[.,?!]/g, '')\r\n    .split(/\\s+/)\r\n    .filter(word => word.length > 3);\r\n\r\n  const userAnswerKeywords = question.type === 'multiple-choice' && question.userAnswer !== undefined\r\n    ? question.options[question.userAnswer].toLowerCase()\r\n        .replace(/[.,?!]/g, '')\r\n        .split(/\\s+/)\r\n        .filter(word => word.length > 3)\r\n    : [];\r\n\r\n  // Combine all relevant keywords\r\n  const allKeywords = [...new Set([...questionKeywords, ...correctAnswerKeywords, ...userAnswerKeywords])];\r\n\r\n  // Find the most relevant sentence from the source material\r\n  function findRelevantContext(text, keywords) {\r\n    if (!text) return '';\r\n    \r\n    // Split into sentences and clean them\r\n    const sentences = text.split(/[.!?]+/)\r\n      .map(s => s.trim())\r\n      .filter(s => s.length > 0);\r\n\r\n    // Score each sentence based on keyword matches\r\n    const scoredSentences = sentences.map(sentence => {\r\n      const sentenceLower = sentence.toLowerCase();\r\n      const matchCount = keywords.reduce((count, keyword) => {\r\n        return count + (sentenceLower.includes(keyword.toLowerCase()) ? 1 : 0);\r\n      }, 0);\r\n      return { sentence, score: matchCount };\r\n    });\r\n\r\n    // Sort by score and get the most relevant sentences (max 2)\r\n    const relevantSentences = scoredSentences\r\n      .filter(item => item.score > 0)\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 2)\r\n      .map(item => item.sentence);\r\n\r\n    return relevantSentences.join('. ');\r\n  }\r\n\r\n  // Generate explanation based on the specific question and answer\r\n  function generateSpecificExplanation() {\r\n    const relevantContext = findRelevantContext(sourceContext || sourceMaterial, allKeywords);\r\n    \r\n    if (isSupporting) {\r\n      if (relevantContext) {\r\n        return `Correct! ${relevantContext}`;\r\n      }\r\n      return 'Correct! This aligns with the course material.';\r\n    } else {\r\n      const correctPart = question.type === 'multiple-choice'\r\n        ? `The correct answer is \"${question.options[question.correctAnswer]}\". `\r\n        : `The correct answer is ${question.correctAnswer}. `;\r\n        \r\n      if (relevantContext) {\r\n        return `${correctPart}Here's why: ${relevantContext}`;\r\n      }\r\n      return `${correctPart}Please review this topic in the course material.`;\r\n    }\r\n  }\r\n\r\n  // Generate the explanation\r\n  let explanation = generateSpecificExplanation();\r\n\r\n  // Add specific feedback for incorrect multiple choice answers\r\n  if (question.type === 'multiple-choice' && !isSupporting && question.userAnswer !== undefined) {\r\n    const userChoice = question.options[question.userAnswer];\r\n    explanation += ` You selected \"${userChoice}\", which is incorrect.`;\r\n  }\r\n\r\n  return explanation;\r\n}\r\n\r\nfunction generateExplanation(question, isCorrect) {\r\n  const explanation = question.explanation || '';\r\n  if (!explanation) return \"No explanation available.\";\r\n\r\n  if (question.type === 'multiple-choice') {\r\n    return generateMultipleChoiceExplanation(question, isCorrect);\r\n  } else {\r\n    return generateTrueFalseExplanation(question, isCorrect);\r\n  }\r\n}\r\n\r\nfunction generateMultipleChoiceExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userOption = question.options[question.userAnswer];\r\n  const correctOption = question.options[question.correctAnswer];\r\n  \r\n  // Compare the chosen answer with the correct one to explain the difference\r\n  const explanation = `While \"${userOption}\" might seem reasonable, it's not the complete picture. ${rephraseContent(question.explanation, false, question)} The correct answer, \"${correctOption}\", better reflects the full scope of the position.`;\r\n  \r\n  return explanation;\r\n}\r\n\r\nfunction generateTrueFalseExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userChoice = question.userAnswer ? 'true' : 'false';\r\n  const correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\r\n  \r\n  // Explain why their understanding needs adjustment\r\n  return `Your understanding needs a slight adjustment. While you marked this as ${userChoice}, ${rephraseContent(question.explanation, false, question)} This is why the statement is actually ${correctChoice}.`;\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 800px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.score-display.passing {\r\n  background-color: #e8f5e9;\r\n  border: 3px solid #4CAF50;\r\n}\r\n\r\n.score-display.failing {\r\n  background-color: #ffebee;\r\n  border: 3px solid #f44336;\r\n}\r\n\r\n.score-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-main {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-value {\r\n  font-size: 4rem;\r\n  line-height: 1;\r\n  font-weight: 800;\r\n}\r\n\r\n.score-separator {\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n}\r\n\r\n.score-total {\r\n  font-size: 2.5rem;\r\n  opacity: 0.7;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.8rem;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.score-comparison {\r\n  margin: 1.5rem 0;\r\n  padding: 1.5rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n}\r\n\r\n.comparison-text {\r\n  margin-top: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-text.success {\r\n  color: #4CAF50;\r\n}\r\n\r\n.comparison-text.neutral {\r\n  color: #666;\r\n}\r\n\r\n.comparison-text.warning {\r\n  color: #f44336;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n}\r\n\r\n.result-item {\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.question-number {\r\n  font-weight: 600;\r\n  color: #666;\r\n}\r\n\r\n.result-status {\r\n  padding: 0.4rem 1rem;\r\n  border-radius: 20px;\r\n  font-weight: 600;\r\n}\r\n\r\n.result-status.correct {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.result-status.wrong {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.question-text {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  margin-bottom: 1rem;\r\n  line-height: 1.4;\r\n}\r\n\r\n.answer-details {\r\n  background-color: #fff;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.answer-details.incorrect {\r\n  border-color: #ffcdd2;\r\n  background-color: #fff5f5;\r\n}\r\n\r\n.answer-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-answer, .correct-answer {\r\n  padding: 1rem;\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.user-answer strong, .correct-answer strong {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.incorrect-text {\r\n  color: #d32f2f;\r\n}\r\n\r\n.correct-text {\r\n  color: #2e7d32;\r\n}\r\n\r\n.explanation-box {\r\n  margin-top: 1.5rem;\r\n  padding: 1.5rem;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.explanation-box.correct {\r\n  border-left: 4px solid #4CAF50;\r\n}\r\n\r\n.explanation-box.incorrect {\r\n  border-left: 4px solid #ff9800;\r\n}\r\n\r\n.explanation-label {\r\n  font-weight: 600;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.explanation-label.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.explanation-label.incorrect {\r\n  color: #f57c00;\r\n}\r\n\r\n.explanation-text {\r\n  color: #333;\r\n  line-height: 1.6;\r\n  margin: 0;\r\n}\r\n\r\n.return-hint {\r\n  margin-top: 2rem;\r\n  text-align: center;\r\n  color: #666;\r\n  background: #f5f5f5;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n}\r\n\r\n.return-hint p {\r\n  margin: 0.5rem 0;\r\n  font-size: 0.95rem;\r\n}\r\n\r\n.return-hint p:first-child {\r\n  color: #4CAF50;\r\n  font-weight: 500;\r\n}\r\n\r\n.return-hint p:last-child {\r\n  color: #2196F3;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Remove button styles */\r\n.button-group, .restart-btn, .back-btn {\r\n  display: none;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}