{"ast":null,"code":"import { ref, computed } from 'vue';\nimport axios from 'axios';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedFiles = ref([]);\n    const questionCount = ref('');\n    const fileInput = ref(null);\n    const generatedQuestions = ref([]);\n    const isLoading = ref(false);\n    const error = ref('');\n    const showQuestions = ref(false);\n    const flashcardQuestions = ref([]);\n    const quiz = ref(null);\n    const userAnswers = ref([]);\n    const showAnswers = ref(false);\n    const isFormValid = computed(() => {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    const triggerFileInput = () => {\n      fileInput.value.click();\n    };\n    const handleFileSelect = event => {\n      const files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    const handleDrop = event => {\n      const files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    const addFiles = files => {\n      const validFiles = files.filter(file => {\n        const validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n        return validTypes.includes(file.type);\n      });\n      selectedFiles.value = [...selectedFiles.value, ...validFiles];\n    };\n    const removeFile = index => {\n      selectedFiles.value.splice(index, 1);\n    };\n    const readFileContent = file => {\n      return new Promise((resolve, reject) => {\n        if (file.type === \"application/pdf\" || file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" || file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type.startsWith('image/')) {\n          // PDF, PPTX, DOCX, or Image - send to backend for extraction\n          const formData = new FormData();\n          formData.append('file', file);\n\n          // Use the correct backend URL\n          const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n          fetch(`${backendUrl}/extract-file`, {\n            method: 'POST',\n            body: formData\n          }).then(res => res.json()).then(data => {\n            if (data.text) resolve(data.text);else resolve(\"[Could not extract file text]\");\n          }).catch(() => resolve(\"[Could not extract file text]\"));\n        } else if (file.type === \"text/plain\") {\n          // Plain text\n          const reader = new FileReader();\n          reader.onload = e => resolve(e.target.result);\n          reader.onerror = e => reject(e);\n          reader.readAsText(file);\n        } else {\n          resolve(`[${file.name} is not a supported file type.]`);\n        }\n      });\n    };\n    const handleSubmit = async () => {\n      if (!isFormValid.value) return;\n      isLoading.value = true;\n      error.value = '';\n      generatedQuestions.value = [];\n      flashcardQuestions.value = [];\n      try {\n        // Read all file contents\n        const fileContents = await Promise.all(selectedFiles.value.map(file => readFileContent(file)));\n\n        // Combine all file contents\n        const combinedContent = fileContents.join('\\n\\n');\n        console.log('Extracted file content sent to Gemini:', combinedContent);\n\n        // Prepare the prompt for Gemini\n        const prompt = `Create a quiz with 5 questions based on this text. Include both multiple choice and true/false questions. For each question:\n1. If it's multiple choice:\n   - Provide 4 options (A, B, C, D)\n   - Mark the correct answer with an asterisk (*)\n2. If it's true/false:\n   - Provide two options: True and False\n   - Mark the correct answer with an asterisk (*)\n3. Include a brief explanation for each answer\n\nText: ${combinedContent}`;\n        console.log('Sending request to Gemini API...');\n        console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\n\n        // Call Gemini API\n        const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`, {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024\n          }\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('API Response:', response.data);\n\n        // Parse Gemini's response into flashcard questions\n        const generatedText = response.data.candidates[0].content.parts[0].text;\n        const parsedQuestions = parseFlashcardQuestions(generatedText);\n        flashcardQuestions.value = parsedQuestions;\n        showQuestions.value = true;\n      } catch (err) {\n        console.error('Detailed Error:', err.response ? err.response.data : err);\n        error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    function parseFlashcardQuestions(text) {\n      // Split by 'Question:' and parse each block\n      const blocks = text.split(/\\n?Question:/).map(b => b.trim()).filter(Boolean);\n      const questions = blocks.map(block => {\n        const lines = block.split('\\n').map(l => l.trim());\n        const textLine = lines[0];\n        const options = ['A', 'B', 'C', 'D'].map(letter => {\n          const optLine = lines.find(l => l.startsWith(letter + ')'));\n          return {\n            letter,\n            text: optLine ? optLine.slice(3).trim() : ''\n          };\n        });\n        const answerLine = lines.find(l => l.startsWith('Answer:'));\n        const answer = answerLine ? answerLine.replace('Answer:', '').trim() : '';\n        return {\n          text: textLine,\n          options,\n          answer\n        };\n      }).filter(q => q.text && q.options.every(o => o.text) && q.answer);\n      return questions;\n    }\n    function resetToMainScreen() {\n      showQuestions.value = false;\n      flashcardQuestions.value = [];\n      generatedQuestions.value = [];\n      selectedFiles.value = [];\n      questionCount.value = '';\n    }\n    const checkAnswers = () => {\n      showAnswers.value = true;\n      // Implement the logic to check answers and update quiz.questions\n    };\n    const allQuestionsAnswered = computed(() => {\n      return userAnswers.value.length === quiz.value.questions.length;\n    });\n    const processQuizResponse = response => {\n      const questions = [];\n      const lines = response.split('\\n');\n      let currentQuestion = null;\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n        if (line.startsWith('Question:')) {\n          if (currentQuestion) {\n            questions.push(currentQuestion);\n          }\n          currentQuestion = {\n            text: line.replace('Question:', '').trim(),\n            type: 'multiple-choice',\n            options: {},\n            correctAnswer: '',\n            explanation: ''\n          };\n        } else if (line.startsWith('True/False:')) {\n          if (currentQuestion) {\n            questions.push(currentQuestion);\n          }\n          currentQuestion = {\n            text: line.replace('True/False:', '').trim(),\n            type: 'true-false',\n            options: {\n              true: 'True',\n              false: 'False'\n            },\n            correctAnswer: '',\n            explanation: ''\n          };\n        } else if (currentQuestion) {\n          if (line.match(/^[A-D]\\)/)) {\n            const option = line.substring(2).trim();\n            const letter = line[0];\n            currentQuestion.options[letter] = option;\n            if (option.includes('*')) {\n              currentQuestion.correctAnswer = letter;\n              currentQuestion.options[letter] = option.replace('*', '').trim();\n            }\n          } else if (line.startsWith('True*') || line.startsWith('False*')) {\n            currentQuestion.correctAnswer = line.toLowerCase().includes('true*') ? 'true' : 'false';\n          } else if (line.startsWith('Explanation:')) {\n            currentQuestion.explanation = line.replace('Explanation:', '').trim();\n          }\n        }\n      }\n      if (currentQuestion) {\n        questions.push(currentQuestion);\n      }\n      return {\n        questions\n      };\n    };\n    const generateQuiz = async () => {\n      try {\n        const response = await axios.post('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent', {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }]\n        }, {\n          headers: {\n            'Content-Type': 'application/json',\n            'x-goog-api-key': process.env.VUE_APP_GEMINI_API_KEY\n          }\n        });\n        const quizText = response.data.candidates[0].content.parts[0].text;\n        quiz.value = processQuizResponse(quizText);\n        userAnswers.value = new Array(quiz.value.questions.length).fill('');\n        showAnswers.value = false;\n      } catch (error) {\n        console.error('Error generating quiz:', error);\n        alert('Error generating quiz. Please try again.');\n      }\n    };\n    const __returned__ = {\n      selectedFiles,\n      questionCount,\n      fileInput,\n      generatedQuestions,\n      isLoading,\n      error,\n      showQuestions,\n      flashcardQuestions,\n      quiz,\n      userAnswers,\n      showAnswers,\n      isFormValid,\n      triggerFileInput,\n      handleFileSelect,\n      handleDrop,\n      addFiles,\n      removeFile,\n      readFileContent,\n      handleSubmit,\n      parseFlashcardQuestions,\n      resetToMainScreen,\n      checkAnswers,\n      allQuestionsAnswered,\n      processQuizResponse,\n      generateQuiz,\n      ref,\n      computed,\n      get axios() {\n        return axios;\n      },\n      FlashcardQuiz\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","axios","FlashcardQuiz","selectedFiles","questionCount","fileInput","generatedQuestions","isLoading","error","showQuestions","flashcardQuestions","quiz","userAnswers","showAnswers","isFormValid","value","length","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validFiles","filter","file","validTypes","includes","type","removeFile","index","splice","readFileContent","Promise","resolve","reject","startsWith","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","data","text","catch","reader","FileReader","onload","e","result","onerror","readAsText","name","handleSubmit","fileContents","all","map","combinedContent","join","console","log","prompt","VUE_APP_GEMINI_API_KEY","response","post","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","generatedText","candidates","content","parsedQuestions","parseFlashcardQuestions","err","message","blocks","split","b","trim","Boolean","questions","block","lines","l","textLine","options","letter","optLine","find","slice","answerLine","answer","replace","q","every","o","resetToMainScreen","checkAnswers","allQuestionsAnswered","processQuizResponse","currentQuestion","i","line","push","correctAnswer","explanation","true","false","match","option","substring","toLowerCase","generateQuiz","quizText","fill","alert"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"upload-container\">\r\n      <h1>QUIZZy</h1>\r\n      \r\n      <div v-if=\"!showQuestions\" class=\"file-upload-section\">\r\n        <h2>Upload Files</h2>\r\n        <div class=\"upload-area\" \r\n          @dragover.prevent \r\n          @drop.prevent=\"handleDrop\"\r\n          @click=\"triggerFileInput\"\r\n          role=\"button\"\r\n          tabindex=\"0\"\r\n          @keydown.enter=\"triggerFileInput\"\r\n        >\r\n          <input \r\n            type=\"file\" \r\n            @change=\"handleFileSelect\" \r\n            accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\r\n            ref=\"fileInput\"\r\n            class=\"file-input\"\r\n          >\r\n          <div class=\"upload-prompt\">\r\n            <p>Drag and drop files here or click to select</p>\r\n            <p>Supported formats: PDF, DOCX, PPTX, TXT</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\r\n          <h3>Selected Files:</h3>\r\n          <ul>\r\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\">\r\n              {{ file.name }}\r\n              <button @click=\"removeFile(index)\" class=\"remove-btn\">×</button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"questions-section\">\r\n          <h2>Number of Questions</h2>\r\n          <div class=\"question-input\">\r\n            <input\r\n              type=\"number\"\r\n              v-model=\"questionCount\"\r\n              min=\"1\"\r\n              max=\"20\"\r\n              placeholder=\"Enter number of questions\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          class=\"submit-btn\" \r\n          :disabled=\"!isFormValid || isLoading\"\r\n          @click=\"handleSubmit\"\r\n        >\r\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\r\n        </button>\r\n      </div>\r\n\r\n      <FlashcardQuiz\r\n        v-else\r\n        :questions=\"flashcardQuestions\"\r\n        @go-back=\"resetToMainScreen\"\r\n      />\r\n\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        {{ error }}\r\n      </div>\r\n    </div>\r\n\r\n    <template v-if=\"quiz\">\r\n      <div class=\"quiz-container\">\r\n        <h2>Generated Quiz</h2>\r\n        <div v-for=\"(question, index) in quiz.questions\" :key=\"index\" class=\"question\">\r\n          <h3>Question {{ index + 1 }}: {{ question.text }}</h3>\r\n          <div class=\"options\">\r\n            <div v-if=\"question.type === 'multiple-choice'\" v-for=\"(option, letter) in question.options\" :key=\"letter\" class=\"option\">\r\n              <input\r\n                type=\"radio\"\r\n                :id=\"`q${index}-${letter}`\"\r\n                :name=\"`question${index}`\"\r\n                :value=\"letter\"\r\n                v-model=\"userAnswers[index]\"\r\n              />\r\n              <label :for=\"`q${index}-${letter}`\">{{ letter }}) {{ option }}</label>\r\n            </div>\r\n            <div v-else-if=\"question.type === 'true-false'\" class=\"option\">\r\n              <input\r\n                type=\"radio\"\r\n                :id=\"`q${index}-true`\"\r\n                :name=\"`question${index}`\"\r\n                value=\"true\"\r\n                v-model=\"userAnswers[index]\"\r\n              />\r\n              <label :for=\"`q${index}-true`\">True</label>\r\n              <input\r\n                type=\"radio\"\r\n                :id=\"`q${index}-false`\"\r\n                :name=\"`question${index}`\"\r\n                value=\"false\"\r\n                v-model=\"userAnswers[index]\"\r\n              />\r\n              <label :for=\"`q${index}-false`\">False</label>\r\n            </div>\r\n          </div>\r\n          <div v-if=\"showAnswers && userAnswers[index]\" class=\"feedback\">\r\n            <p :class=\"{ 'correct': userAnswers[index] === question.correctAnswer, 'incorrect': userAnswers[index] !== question.correctAnswer }\">\r\n              {{ userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!' }}\r\n            </p>\r\n            <p class=\"explanation\">{{ question.explanation }}</p>\r\n          </div>\r\n        </div>\r\n        <button @click=\"checkAnswers\" :disabled=\"!allQuestionsAnswered\">Check Answers</button>\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport axios from 'axios';\r\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\r\n\r\nconst selectedFiles = ref([]);\r\nconst questionCount = ref('');\r\nconst fileInput = ref(null);\r\nconst generatedQuestions = ref([]);\r\nconst isLoading = ref(false);\r\nconst error = ref('');\r\nconst showQuestions = ref(false);\r\nconst flashcardQuestions = ref([]);\r\nconst quiz = ref(null);\r\nconst userAnswers = ref([]);\r\nconst showAnswers = ref(false);\r\n\r\nconst isFormValid = computed(() => {\r\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\r\n});\r\n\r\nconst triggerFileInput = () => {\r\n  fileInput.value.click();\r\n};\r\n\r\nconst handleFileSelect = (event) => {\r\n  const files = Array.from(event.target.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst handleDrop = (event) => {\r\n  const files = Array.from(event.dataTransfer.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst addFiles = (files) => {\r\n  const validFiles = files.filter(file => {\r\n    const validTypes = [\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      'application/vnd.ms-powerpoint',\r\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n      'text/plain',\r\n      'application/pdf',\r\n      'image/png',\r\n      'image/jpeg',\r\n      'image/jpg',\r\n      'image/tiff',\r\n      'image/bmp'\r\n    ];\r\n    return validTypes.includes(file.type);\r\n  });\r\n  \r\n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\r\n};\r\n\r\nconst removeFile = (index) => {\r\n  selectedFiles.value.splice(index, 1);\r\n};\r\n\r\nconst readFileContent = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (\r\n      file.type === \"application/pdf\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\r\n      file.type.startsWith('image/')\r\n    ) {\r\n      // PDF, PPTX, DOCX, or Image - send to backend for extraction\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      // Use the correct backend URL\r\n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\r\n      fetch(`${backendUrl}/extract-file`, {\r\n        method: 'POST',\r\n        body: formData\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.text) resolve(data.text);\r\n          else resolve(\"[Could not extract file text]\");\r\n        })\r\n        .catch(() => resolve(\"[Could not extract file text]\"));\r\n    } else if (file.type === \"text/plain\") {\r\n      // Plain text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    } else {\r\n      resolve(`[${file.name} is not a supported file type.]`);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  if (!isFormValid.value) return;\r\n\r\n  isLoading.value = true;\r\n  error.value = '';\r\n  generatedQuestions.value = [];\r\n  flashcardQuestions.value = [];\r\n\r\n  try {\r\n    // Read all file contents\r\n    const fileContents = await Promise.all(\r\n      selectedFiles.value.map(file => readFileContent(file))\r\n    );\r\n\r\n    // Combine all file contents\r\n    const combinedContent = fileContents.join('\\n\\n');\r\n    console.log('Extracted file content sent to Gemini:', combinedContent);\r\n\r\n    // Prepare the prompt for Gemini\r\n    const prompt = `Create a quiz with 5 questions based on this text. Include both multiple choice and true/false questions. For each question:\r\n1. If it's multiple choice:\r\n   - Provide 4 options (A, B, C, D)\r\n   - Mark the correct answer with an asterisk (*)\r\n2. If it's true/false:\r\n   - Provide two options: True and False\r\n   - Mark the correct answer with an asterisk (*)\r\n3. Include a brief explanation for each answer\r\n\r\nText: ${combinedContent}`;\r\n\r\n    console.log('Sending request to Gemini API...');\r\n    console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\r\n\r\n    // Call Gemini API\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log('API Response:', response.data);\r\n\r\n    // Parse Gemini's response into flashcard questions\r\n    const generatedText = response.data.candidates[0].content.parts[0].text;\r\n    const parsedQuestions = parseFlashcardQuestions(generatedText);\r\n    flashcardQuestions.value = parsedQuestions;\r\n    showQuestions.value = true;\r\n  } catch (err) {\r\n    console.error('Detailed Error:', err.response ? err.response.data : err);\r\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n\r\nfunction parseFlashcardQuestions(text) {\r\n  // Split by 'Question:' and parse each block\r\n  const blocks = text.split(/\\n?Question:/).map(b => b.trim()).filter(Boolean);\r\n  const questions = blocks.map(block => {\r\n    const lines = block.split('\\n').map(l => l.trim());\r\n    const textLine = lines[0];\r\n    const options = ['A', 'B', 'C', 'D'].map(letter => {\r\n      const optLine = lines.find(l => l.startsWith(letter + ')'));\r\n      return { letter, text: optLine ? optLine.slice(3).trim() : '' };\r\n    });\r\n    const answerLine = lines.find(l => l.startsWith('Answer:'));\r\n    const answer = answerLine ? answerLine.replace('Answer:', '').trim() : '';\r\n    return {\r\n      text: textLine,\r\n      options,\r\n      answer\r\n    };\r\n  }).filter(q => q.text && q.options.every(o => o.text) && q.answer);\r\n  return questions;\r\n}\r\n\r\nfunction resetToMainScreen() {\r\n  showQuestions.value = false;\r\n  flashcardQuestions.value = [];\r\n  generatedQuestions.value = [];\r\n  selectedFiles.value = [];\r\n  questionCount.value = '';\r\n}\r\n\r\nconst checkAnswers = () => {\r\n  showAnswers.value = true;\r\n  // Implement the logic to check answers and update quiz.questions\r\n};\r\n\r\nconst allQuestionsAnswered = computed(() => {\r\n  return userAnswers.value.length === quiz.value.questions.length;\r\n});\r\n\r\nconst processQuizResponse = (response) => {\r\n  const questions = [];\r\n  const lines = response.split('\\n');\r\n  let currentQuestion = null;\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i].trim();\r\n    if (!line) continue;\r\n\r\n    if (line.startsWith('Question:')) {\r\n      if (currentQuestion) {\r\n        questions.push(currentQuestion);\r\n      }\r\n      currentQuestion = {\r\n        text: line.replace('Question:', '').trim(),\r\n        type: 'multiple-choice',\r\n        options: {},\r\n        correctAnswer: '',\r\n        explanation: ''\r\n      };\r\n    } else if (line.startsWith('True/False:')) {\r\n      if (currentQuestion) {\r\n        questions.push(currentQuestion);\r\n      }\r\n      currentQuestion = {\r\n        text: line.replace('True/False:', '').trim(),\r\n        type: 'true-false',\r\n        options: {\r\n          true: 'True',\r\n          false: 'False'\r\n        },\r\n        correctAnswer: '',\r\n        explanation: ''\r\n      };\r\n    } else if (currentQuestion) {\r\n      if (line.match(/^[A-D]\\)/)) {\r\n        const option = line.substring(2).trim();\r\n        const letter = line[0];\r\n        currentQuestion.options[letter] = option;\r\n        if (option.includes('*')) {\r\n          currentQuestion.correctAnswer = letter;\r\n          currentQuestion.options[letter] = option.replace('*', '').trim();\r\n        }\r\n      } else if (line.startsWith('True*') || line.startsWith('False*')) {\r\n        currentQuestion.correctAnswer = line.toLowerCase().includes('true*') ? 'true' : 'false';\r\n      } else if (line.startsWith('Explanation:')) {\r\n        currentQuestion.explanation = line.replace('Explanation:', '').trim();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (currentQuestion) {\r\n    questions.push(currentQuestion);\r\n  }\r\n\r\n  return { questions };\r\n};\r\n\r\nconst generateQuiz = async () => {\r\n  try {\r\n    const response = await axios.post(\r\n      'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }]\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-goog-api-key': process.env.VUE_APP_GEMINI_API_KEY\r\n        }\r\n      }\r\n    );\r\n\r\n    const quizText = response.data.candidates[0].content.parts[0].text;\r\n    quiz.value = processQuizResponse(quizText);\r\n    userAnswers.value = new Array(quiz.value.questions.length).fill('');\r\n    showAnswers.value = false;\r\n  } catch (error) {\r\n    console.error('Error generating quiz:', error);\r\n    alert('Error generating quiz. Please try again.');\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #f5f5f5;\r\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\r\n}\r\n\r\n.upload-container {\r\n  background-color: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  width: 90%;\r\n  max-width: 600px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\nh2 {\r\n  color: #444;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.file-upload-section {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.upload-area {\r\n  border: 2px dashed #ccc;\r\n  border-radius: 8px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  margin-bottom: 1rem;\r\n  outline: none;\r\n}\r\n\r\n.upload-area:hover {\r\n  border-color: #666;\r\n  background-color: #f8f8f8;\r\n}\r\n\r\n.upload-area:focus {\r\n  border-color: #4CAF50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.file-input {\r\n  display: none;\r\n}\r\n\r\n.upload-prompt {\r\n  color: #666;\r\n}\r\n\r\n.upload-prompt p {\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.selected-files {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.selected-files ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.selected-files li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.remove-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.questions-section {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.question-input input {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.submit-btn {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.submit-btn:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.questions-list {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.question-item {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.error-message {\r\n  color: #ff4444;\r\n  margin-top: 1rem;\r\n  text-align: center;\r\n}\r\n\r\n.quiz-container {\r\n  margin-top: 2rem;\r\n  padding: 2rem;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.question {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.options {\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.option {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.feedback {\r\n  margin-top: 0.5rem;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.incorrect {\r\n  color: #ff4444;\r\n}\r\n\r\n.explanation {\r\n  margin-top: 0.5rem;\r\n  margin-left: 1rem;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\nbutton:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n</style> "],"mappings":"AAwHA,SAASA,GAAG,EAAEC,QAAQ,QAAQ,KAAK;AACnC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,gCAAgC;;;;;;;IAE1D,MAAMC,aAAa,GAAGJ,GAAG,CAAC,EAAE,CAAC;IAC7B,MAAMK,aAAa,GAAGL,GAAG,CAAC,EAAE,CAAC;IAC7B,MAAMM,SAAS,GAAGN,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAMO,kBAAkB,GAAGP,GAAG,CAAC,EAAE,CAAC;IAClC,MAAMQ,SAAS,GAAGR,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMS,KAAK,GAAGT,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMU,aAAa,GAAGV,GAAG,CAAC,KAAK,CAAC;IAChC,MAAMW,kBAAkB,GAAGX,GAAG,CAAC,EAAE,CAAC;IAClC,MAAMY,IAAI,GAAGZ,GAAG,CAAC,IAAI,CAAC;IACtB,MAAMa,WAAW,GAAGb,GAAG,CAAC,EAAE,CAAC;IAC3B,MAAMc,WAAW,GAAGd,GAAG,CAAC,KAAK,CAAC;IAE9B,MAAMe,WAAW,GAAGd,QAAQ,CAAC,MAAM;MACjC,OAAOG,aAAa,CAACY,KAAK,CAACC,MAAM,GAAG,CAAC,IAAIZ,aAAa,CAACW,KAAK,GAAG,CAAC;IAClE,CAAC,CAAC;IAEF,MAAME,gBAAgB,GAAGA,CAAA,KAAM;MAC7BZ,SAAS,CAACU,KAAK,CAACG,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;MAClC,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,MAAM,CAACH,KAAK,CAAC;MAC5CI,QAAQ,CAACJ,KAAK,CAAC;IACjB,CAAC;IAED,MAAMK,UAAU,GAAIN,KAAK,IAAK;MAC5B,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACO,YAAY,CAACN,KAAK,CAAC;MAClDI,QAAQ,CAACJ,KAAK,CAAC;IACjB,CAAC;IAED,MAAMI,QAAQ,GAAIJ,KAAK,IAAK;MAC1B,MAAMO,UAAU,GAAGP,KAAK,CAACQ,MAAM,CAACC,IAAI,IAAI;QACtC,MAAMC,UAAU,GAAG,CACjB,oBAAoB,EACpB,yEAAyE,EACzE,+BAA+B,EAC/B,2EAA2E,EAC3E,YAAY,EACZ,iBAAiB,EACjB,WAAW,EACX,YAAY,EACZ,WAAW,EACX,YAAY,EACZ,WAAW,CACZ;QACD,OAAOA,UAAU,CAACC,QAAQ,CAACF,IAAI,CAACG,IAAI,CAAC;MACvC,CAAC,CAAC;MAEF9B,aAAa,CAACY,KAAK,GAAG,CAAC,GAAGZ,aAAa,CAACY,KAAK,EAAE,GAAGa,UAAU,CAAC;IAC/D,CAAC;IAED,MAAMM,UAAU,GAAIC,KAAK,IAAK;MAC5BhC,aAAa,CAACY,KAAK,CAACqB,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;IACtC,CAAC;IAED,MAAME,eAAe,GAAIP,IAAI,IAAK;MAChC,OAAO,IAAIQ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtC,IACEV,IAAI,CAACG,IAAI,KAAK,iBAAiB,IAC/BH,IAAI,CAACG,IAAI,KAAK,2EAA2E,IACzFH,IAAI,CAACG,IAAI,KAAK,yEAAyE,IACvFH,IAAI,CAACG,IAAI,CAACQ,UAAU,CAAC,QAAQ,CAAC,EAC9B;UACA;UACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;UAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEd,IAAI,CAAC;;UAE7B;UACA,MAAMe,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB,IAAI,uBAAuB;UAC7EC,KAAK,CAAC,GAAGJ,UAAU,eAAe,EAAE;YAClCK,MAAM,EAAE,MAAM;YACdC,IAAI,EAAET;UACR,CAAC,CAAC,CACCU,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;YACZ,IAAIA,IAAI,CAACC,IAAI,EAAEjB,OAAO,CAACgB,IAAI,CAACC,IAAI,CAAC,CAAC,KAC7BjB,OAAO,CAAC,+BAA+B,CAAC;UAC/C,CAAC,CAAC,CACDkB,KAAK,CAAC,MAAMlB,OAAO,CAAC,+BAA+B,CAAC,CAAC;QAC1D,CAAC,MAAM,IAAIT,IAAI,CAACG,IAAI,KAAK,YAAY,EAAE;UACrC;UACA,MAAMyB,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;UAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAKtB,OAAO,CAACsB,CAAC,CAACrC,MAAM,CAACsC,MAAM,CAAC;UAC/CJ,MAAM,CAACK,OAAO,GAAIF,CAAC,IAAKrB,MAAM,CAACqB,CAAC,CAAC;UACjCH,MAAM,CAACM,UAAU,CAAClC,IAAI,CAAC;QACzB,CAAC,MAAM;UACLS,OAAO,CAAC,IAAIT,IAAI,CAACmC,IAAI,iCAAiC,CAAC;QACzD;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACpD,WAAW,CAACC,KAAK,EAAE;MAExBR,SAAS,CAACQ,KAAK,GAAG,IAAI;MACtBP,KAAK,CAACO,KAAK,GAAG,EAAE;MAChBT,kBAAkB,CAACS,KAAK,GAAG,EAAE;MAC7BL,kBAAkB,CAACK,KAAK,GAAG,EAAE;MAE7B,IAAI;QACF;QACA,MAAMoD,YAAY,GAAG,MAAM7B,OAAO,CAAC8B,GAAG,CACpCjE,aAAa,CAACY,KAAK,CAACsD,GAAG,CAACvC,IAAI,IAAIO,eAAe,CAACP,IAAI,CAAC,CACvD,CAAC;;QAED;QACA,MAAMwC,eAAe,GAAGH,YAAY,CAACI,IAAI,CAAC,MAAM,CAAC;QACjDC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEH,eAAe,CAAC;;QAEtE;QACA,MAAMI,MAAM,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQJ,eAAe,EAAE;QAErBE,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/CD,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE3B,OAAO,CAACC,GAAG,CAAC4B,sBAAsB,GAAG,SAAS,GAAG,SAAS,CAAC;;QAEnF;QACA,MAAMC,QAAQ,GAAG,MAAM3E,KAAK,CAAC4E,IAAI,CAC/B,gGAAgG/B,OAAO,CAACC,GAAG,CAAC4B,sBAAsB,EAAE,EACpI;UACEG,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,CAAC;cACNvB,IAAI,EAAEkB;YACR,CAAC;UACH,CAAC,CAAC;UACFM,gBAAgB,EAAE;YAChBC,WAAW,EAAE,GAAG;YAChBC,IAAI,EAAE,EAAE;YACRC,IAAI,EAAE,IAAI;YACVC,eAAe,EAAE;UACnB;QACF,CAAC,EACD;UACEC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CACF,CAAC;QAEDb,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,QAAQ,CAACrB,IAAI,CAAC;;QAE3C;QACA,MAAM+B,aAAa,GAAGV,QAAQ,CAACrB,IAAI,CAACgC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACT,KAAK,CAAC,CAAC,CAAC,CAACvB,IAAI;QACvE,MAAMiC,eAAe,GAAGC,uBAAuB,CAACJ,aAAa,CAAC;QAC9D5E,kBAAkB,CAACK,KAAK,GAAG0E,eAAe;QAC1ChF,aAAa,CAACM,KAAK,GAAG,IAAI;MAC5B,CAAC,CAAC,OAAO4E,GAAG,EAAE;QACZnB,OAAO,CAAChE,KAAK,CAAC,iBAAiB,EAAEmF,GAAG,CAACf,QAAQ,GAAGe,GAAG,CAACf,QAAQ,CAACrB,IAAI,GAAGoC,GAAG,CAAC;QACxEnF,KAAK,CAACO,KAAK,GAAG,+BAA+B4E,GAAG,CAACf,QAAQ,GAAGe,GAAG,CAACf,QAAQ,CAACrB,IAAI,CAAC/C,KAAK,EAAEoF,OAAO,IAAI,eAAe,GAAGD,GAAG,CAACC,OAAO,EAAE;MACjI,CAAC,SAAS;QACRrF,SAAS,CAACQ,KAAK,GAAG,KAAK;MACzB;IACF,CAAC;IAED,SAAS2E,uBAAuBA,CAAClC,IAAI,EAAE;MACrC;MACA,MAAMqC,MAAM,GAAGrC,IAAI,CAACsC,KAAK,CAAC,cAAc,CAAC,CAACzB,GAAG,CAAC0B,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACnE,MAAM,CAACoE,OAAO,CAAC;MAC5E,MAAMC,SAAS,GAAGL,MAAM,CAACxB,GAAG,CAAC8B,KAAK,IAAI;QACpC,MAAMC,KAAK,GAAGD,KAAK,CAACL,KAAK,CAAC,IAAI,CAAC,CAACzB,GAAG,CAACgC,CAAC,IAAIA,CAAC,CAACL,IAAI,CAAC,CAAC,CAAC;QAClD,MAAMM,QAAQ,GAAGF,KAAK,CAAC,CAAC,CAAC;QACzB,MAAMG,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAClC,GAAG,CAACmC,MAAM,IAAI;UACjD,MAAMC,OAAO,GAAGL,KAAK,CAACM,IAAI,CAACL,CAAC,IAAIA,CAAC,CAAC5D,UAAU,CAAC+D,MAAM,GAAG,GAAG,CAAC,CAAC;UAC3D,OAAO;YAAEA,MAAM;YAAEhD,IAAI,EAAEiD,OAAO,GAAGA,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC,CAACX,IAAI,CAAC,CAAC,GAAG;UAAG,CAAC;QACjE,CAAC,CAAC;QACF,MAAMY,UAAU,GAAGR,KAAK,CAACM,IAAI,CAACL,CAAC,IAAIA,CAAC,CAAC5D,UAAU,CAAC,SAAS,CAAC,CAAC;QAC3D,MAAMoE,MAAM,GAAGD,UAAU,GAAGA,UAAU,CAACE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAACd,IAAI,CAAC,CAAC,GAAG,EAAE;QACzE,OAAO;UACLxC,IAAI,EAAE8C,QAAQ;UACdC,OAAO;UACPM;QACF,CAAC;MACH,CAAC,CAAC,CAAChF,MAAM,CAACkF,CAAC,IAAIA,CAAC,CAACvD,IAAI,IAAIuD,CAAC,CAACR,OAAO,CAACS,KAAK,CAACC,CAAC,IAAIA,CAAC,CAACzD,IAAI,CAAC,IAAIuD,CAAC,CAACF,MAAM,CAAC;MAClE,OAAOX,SAAS;IAClB;IAEA,SAASgB,iBAAiBA,CAAA,EAAG;MAC3BzG,aAAa,CAACM,KAAK,GAAG,KAAK;MAC3BL,kBAAkB,CAACK,KAAK,GAAG,EAAE;MAC7BT,kBAAkB,CAACS,KAAK,GAAG,EAAE;MAC7BZ,aAAa,CAACY,KAAK,GAAG,EAAE;MACxBX,aAAa,CAACW,KAAK,GAAG,EAAE;IAC1B;IAEA,MAAMoG,YAAY,GAAGA,CAAA,KAAM;MACzBtG,WAAW,CAACE,KAAK,GAAG,IAAI;MACxB;IACF,CAAC;IAED,MAAMqG,oBAAoB,GAAGpH,QAAQ,CAAC,MAAM;MAC1C,OAAOY,WAAW,CAACG,KAAK,CAACC,MAAM,KAAKL,IAAI,CAACI,KAAK,CAACmF,SAAS,CAAClF,MAAM;IACjE,CAAC,CAAC;IAEF,MAAMqG,mBAAmB,GAAIzC,QAAQ,IAAK;MACxC,MAAMsB,SAAS,GAAG,EAAE;MACpB,MAAME,KAAK,GAAGxB,QAAQ,CAACkB,KAAK,CAAC,IAAI,CAAC;MAClC,IAAIwB,eAAe,GAAG,IAAI;MAE1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,KAAK,CAACpF,MAAM,EAAEuG,CAAC,EAAE,EAAE;QACrC,MAAMC,IAAI,GAAGpB,KAAK,CAACmB,CAAC,CAAC,CAACvB,IAAI,CAAC,CAAC;QAC5B,IAAI,CAACwB,IAAI,EAAE;QAEX,IAAIA,IAAI,CAAC/E,UAAU,CAAC,WAAW,CAAC,EAAE;UAChC,IAAI6E,eAAe,EAAE;YACnBpB,SAAS,CAACuB,IAAI,CAACH,eAAe,CAAC;UACjC;UACAA,eAAe,GAAG;YAChB9D,IAAI,EAAEgE,IAAI,CAACV,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACd,IAAI,CAAC,CAAC;YAC1C/D,IAAI,EAAE,iBAAiB;YACvBsE,OAAO,EAAE,CAAC,CAAC;YACXmB,aAAa,EAAE,EAAE;YACjBC,WAAW,EAAE;UACf,CAAC;QACH,CAAC,MAAM,IAAIH,IAAI,CAAC/E,UAAU,CAAC,aAAa,CAAC,EAAE;UACzC,IAAI6E,eAAe,EAAE;YACnBpB,SAAS,CAACuB,IAAI,CAACH,eAAe,CAAC;UACjC;UACAA,eAAe,GAAG;YAChB9D,IAAI,EAAEgE,IAAI,CAACV,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAACd,IAAI,CAAC,CAAC;YAC5C/D,IAAI,EAAE,YAAY;YAClBsE,OAAO,EAAE;cACPqB,IAAI,EAAE,MAAM;cACZC,KAAK,EAAE;YACT,CAAC;YACDH,aAAa,EAAE,EAAE;YACjBC,WAAW,EAAE;UACf,CAAC;QACH,CAAC,MAAM,IAAIL,eAAe,EAAE;UAC1B,IAAIE,IAAI,CAACM,KAAK,CAAC,UAAU,CAAC,EAAE;YAC1B,MAAMC,MAAM,GAAGP,IAAI,CAACQ,SAAS,CAAC,CAAC,CAAC,CAAChC,IAAI,CAAC,CAAC;YACvC,MAAMQ,MAAM,GAAGgB,IAAI,CAAC,CAAC,CAAC;YACtBF,eAAe,CAACf,OAAO,CAACC,MAAM,CAAC,GAAGuB,MAAM;YACxC,IAAIA,MAAM,CAAC/F,QAAQ,CAAC,GAAG,CAAC,EAAE;cACxBsF,eAAe,CAACI,aAAa,GAAGlB,MAAM;cACtCc,eAAe,CAACf,OAAO,CAACC,MAAM,CAAC,GAAGuB,MAAM,CAACjB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACd,IAAI,CAAC,CAAC;YAClE;UACF,CAAC,MAAM,IAAIwB,IAAI,CAAC/E,UAAU,CAAC,OAAO,CAAC,IAAI+E,IAAI,CAAC/E,UAAU,CAAC,QAAQ,CAAC,EAAE;YAChE6E,eAAe,CAACI,aAAa,GAAGF,IAAI,CAACS,WAAW,CAAC,CAAC,CAACjG,QAAQ,CAAC,OAAO,CAAC,GAAG,MAAM,GAAG,OAAO;UACzF,CAAC,MAAM,IAAIwF,IAAI,CAAC/E,UAAU,CAAC,cAAc,CAAC,EAAE;YAC1C6E,eAAe,CAACK,WAAW,GAAGH,IAAI,CAACV,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAACd,IAAI,CAAC,CAAC;UACvE;QACF;MACF;MAEA,IAAIsB,eAAe,EAAE;QACnBpB,SAAS,CAACuB,IAAI,CAACH,eAAe,CAAC;MACjC;MAEA,OAAO;QAAEpB;MAAU,CAAC;IACtB,CAAC;IAED,MAAMgC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMtD,QAAQ,GAAG,MAAM3E,KAAK,CAAC4E,IAAI,CAC/B,oFAAoF,EACpF;UACEC,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,CAAC;cACNvB,IAAI,EAAEkB;YACR,CAAC;UACH,CAAC;QACH,CAAC,EACD;UACEW,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,gBAAgB,EAAEvC,OAAO,CAACC,GAAG,CAAC4B;UAChC;QACF,CACF,CAAC;QAED,MAAMwD,QAAQ,GAAGvD,QAAQ,CAACrB,IAAI,CAACgC,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACT,KAAK,CAAC,CAAC,CAAC,CAACvB,IAAI;QAClE7C,IAAI,CAACI,KAAK,GAAGsG,mBAAmB,CAACc,QAAQ,CAAC;QAC1CvH,WAAW,CAACG,KAAK,GAAG,IAAIO,KAAK,CAACX,IAAI,CAACI,KAAK,CAACmF,SAAS,CAAClF,MAAM,CAAC,CAACoH,IAAI,CAAC,EAAE,CAAC;QACnEvH,WAAW,CAACE,KAAK,GAAG,KAAK;MAC3B,CAAC,CAAC,OAAOP,KAAK,EAAE;QACdgE,OAAO,CAAChE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C6H,KAAK,CAAC,0CAA0C,CAAC;MACnD;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}