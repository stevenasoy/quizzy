{"ast":null,"code":"import _toConsumableArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { computed } from 'vue';\nimport { getScoreClass } from '../algorithms/score-classification';\nexport default {\n  __name: 'StudyStats',\n  props: {\n    quizHistory: {\n      type: Array,\n      required: true\n    }\n  },\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var props = __props;\n\n    // Computed statistics\n    var averageScore = computed(function () {\n      if (props.quizHistory.length === 0) return 0;\n      var total = props.quizHistory.reduce(function (sum, quiz) {\n        return sum + quiz.actualScore * 100;\n      }, 0);\n      return Math.round(total / props.quizHistory.length);\n    });\n    var bestScore = computed(function () {\n      if (props.quizHistory.length === 0) return 0;\n      var best = Math.max.apply(Math, _toConsumableArray(props.quizHistory.map(function (quiz) {\n        return quiz.actualScore * 100;\n      })));\n      return Math.round(best);\n    });\n    var totalQuestions = computed(function () {\n      return props.quizHistory.reduce(function (sum, quiz) {\n        return sum + quiz.questionCount;\n      }, 0);\n    });\n    var recentQuizzes = computed(function () {\n      return _toConsumableArray(props.quizHistory).sort(function (a, b) {\n        return new Date(b.date) - new Date(a.date);\n      }).slice(0, 5);\n    });\n\n    // Monthly activity computation\n    var monthlyActivity = computed(function () {\n      var months = [];\n      var now = new Date();\n      var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n      // Create a map of dates to count unique sessions\n      var sessionMap = new Map();\n      props.quizHistory.forEach(function (quiz) {\n        var date = new Date(quiz.date);\n        var monthKey = \"\".concat(date.getFullYear(), \"-\").concat(date.getMonth());\n        sessionMap.set(monthKey, (sessionMap.get(monthKey) || 0) + 1);\n      });\n\n      // Get the current month and year\n      var currentYear = now.getFullYear();\n      var currentMonth = now.getMonth();\n\n      // Generate last 12 months data\n      for (var i = 11; i >= 0; i--) {\n        var monthIndex = currentMonth - i;\n        var year = currentYear;\n        if (monthIndex < 0) {\n          monthIndex += 12;\n          year--;\n        }\n        var monthKey = \"\".concat(year, \"-\").concat(monthIndex);\n        var sessions = sessionMap.get(monthKey) || 0;\n        months.push({\n          name: monthNames[monthIndex],\n          year: year,\n          sessions: sessions,\n          activityLevel: sessions === 0 ? 0 : Math.min(4, Math.ceil(sessions / 2))\n        });\n      }\n      return months;\n    });\n\n    // Helper function to format dates\n    var formatDate = function formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    };\n    var __returned__ = {\n      props: props,\n      averageScore: averageScore,\n      bestScore: bestScore,\n      totalQuestions: totalQuestions,\n      recentQuizzes: recentQuizzes,\n      monthlyActivity: monthlyActivity,\n      formatDate: formatDate,\n      computed: computed,\n      get getScoreClass() {\n        return getScoreClass;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","getScoreClass","props","__props","averageScore","quizHistory","length","total","reduce","sum","quiz","actualScore","Math","round","bestScore","best","max","apply","_toConsumableArray","map","totalQuestions","questionCount","recentQuizzes","sort","a","b","Date","date","slice","monthlyActivity","months","now","monthNames","sessionMap","Map","forEach","monthKey","concat","getFullYear","getMonth","set","get","currentYear","currentMonth","i","monthIndex","year","sessions","push","name","activityLevel","min","ceil","formatDate","toLocaleDateString"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/StudyStats.vue"],"sourcesContent":["<template>\r\n  <div class=\"study-stats\">\r\n    <h2>Study Statistics</h2>\r\n    \r\n    <div class=\"stats-grid\">\r\n      <div class=\"stat-card\">\r\n        <h3>Total Quizzes</h3>\r\n        <div class=\"stat-value\">{{ quizHistory.length }}</div>\r\n      </div>\r\n      \r\n      <div class=\"stat-card\">\r\n        <h3>Average Score</h3>\r\n        <div class=\"stat-value\">{{ averageScore }}%</div>\r\n      </div>\r\n      \r\n      <div class=\"stat-card\">\r\n        <h3>Best Score</h3>\r\n        <div class=\"stat-value\">{{ bestScore }}%</div>\r\n      </div>\r\n      \r\n      <div class=\"stat-card\">\r\n        <h3>Total Questions</h3>\r\n        <div class=\"stat-value\">{{ totalQuestions }}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"activity-calendar\">\r\n      <h3>Monthly Activity</h3>\r\n      <div class=\"months-grid\">\r\n        <div v-for=\"(month, monthIndex) in monthlyActivity\" \r\n             :key=\"monthIndex\" \r\n             class=\"month-card\">\r\n          <div class=\"month-header\">{{ month.name }}</div>\r\n          <div class=\"month-activity\"\r\n               :class=\"[\r\n                 `activity-${month.activityLevel}`,\r\n                 { 'has-activity': month.sessions > 0 }\r\n               ]\"\r\n               :title=\"`${month.sessions} quiz session${month.sessions !== 1 ? 's' : ''} in ${month.name}`\">\r\n            {{ month.sessions }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"calendar-legend\">\r\n        <div class=\"legend-item\">Less</div>\r\n        <div class=\"legend-squares\">\r\n          <div class=\"legend-square\"></div>\r\n          <div class=\"legend-square activity-1\"></div>\r\n          <div class=\"legend-square activity-2\"></div>\r\n          <div class=\"legend-square activity-3\"></div>\r\n          <div class=\"legend-square activity-4\"></div>\r\n        </div>\r\n        <div class=\"legend-item\">More</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"performance-chart\" v-if=\"quizHistory.length > 0\">\r\n      <h3>Recent Performance</h3>\r\n      <div class=\"score-bars\">\r\n        <div v-for=\"(quiz, index) in recentQuizzes\" \r\n             :key=\"index\" \r\n             class=\"score-bar-container\">\r\n          <div class=\"score-bar\" \r\n               :style=\"{ height: `${quiz.actualScore * 100}%` }\"\r\n               :class=\"getScoreClass(quiz.actualScore * 100)\">\r\n            <span class=\"score-label\">{{ Math.round(quiz.actualScore * 100) }}%</span>\r\n          </div>\r\n          <div class=\"quiz-date\">{{ formatDate(quiz.date) }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\nimport { getScoreClass } from '../algorithms/score-classification';\r\n\r\nconst props = defineProps({\r\n  quizHistory: {\r\n    type: Array,\r\n    required: true\r\n  }\r\n});\r\n\r\n// Computed statistics\r\nconst averageScore = computed(() => {\r\n  if (props.quizHistory.length === 0) return 0;\r\n  const total = props.quizHistory.reduce((sum, quiz) => sum + quiz.actualScore * 100, 0);\r\n  return Math.round(total / props.quizHistory.length);\r\n});\r\n\r\nconst bestScore = computed(() => {\r\n  if (props.quizHistory.length === 0) return 0;\r\n  const best = Math.max(...props.quizHistory.map(quiz => quiz.actualScore * 100));\r\n  return Math.round(best);\r\n});\r\n\r\nconst totalQuestions = computed(() => {\r\n  return props.quizHistory.reduce((sum, quiz) => sum + quiz.questionCount, 0);\r\n});\r\n\r\nconst recentQuizzes = computed(() => {\r\n  return [...props.quizHistory]\r\n    .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n    .slice(0, 5);\r\n});\r\n\r\n// Monthly activity computation\r\nconst monthlyActivity = computed(() => {\r\n  const months = [];\r\n  const now = new Date();\r\n  const monthNames = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n\r\n  // Create a map of dates to count unique sessions\r\n  const sessionMap = new Map();\r\n  props.quizHistory.forEach(quiz => {\r\n    const date = new Date(quiz.date);\r\n    const monthKey = `${date.getFullYear()}-${date.getMonth()}`;\r\n    sessionMap.set(monthKey, (sessionMap.get(monthKey) || 0) + 1);\r\n  });\r\n\r\n  // Get the current month and year\r\n  const currentYear = now.getFullYear();\r\n  const currentMonth = now.getMonth();\r\n\r\n  // Generate last 12 months data\r\n  for (let i = 11; i >= 0; i--) {\r\n    let monthIndex = currentMonth - i;\r\n    let year = currentYear;\r\n    \r\n    if (monthIndex < 0) {\r\n      monthIndex += 12;\r\n      year--;\r\n    }\r\n\r\n    const monthKey = `${year}-${monthIndex}`;\r\n    const sessions = sessionMap.get(monthKey) || 0;\r\n    \r\n    months.push({\r\n      name: monthNames[monthIndex],\r\n      year: year,\r\n      sessions: sessions,\r\n      activityLevel: sessions === 0 ? 0 : Math.min(4, Math.ceil(sessions / 2))\r\n    });\r\n  }\r\n\r\n  return months;\r\n});\r\n\r\n// Helper function to format dates\r\nconst formatDate = (date) => {\r\n  return new Date(date).toLocaleDateString();\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.study-stats {\r\n  padding: 2rem;\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 1.5rem;\r\n  margin: 2rem 0;\r\n}\r\n\r\n.stat-card {\r\n  background-color: #f8f9fa;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n  transition: transform 0.2s;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.stat-card h3 {\r\n  color: #666;\r\n  font-size: 1rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  color: #2196F3;\r\n}\r\n\r\n/* Updated Activity Calendar Styles */\r\n.activity-calendar {\r\n  margin: 3rem 0;\r\n  padding: 1.5rem;\r\n  background-color: #f8f9fa;\r\n  border-radius: 12px;\r\n}\r\n\r\n.months-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(6, 1fr);\r\n  grid-template-rows: repeat(2, 1fr);\r\n  gap: 1rem;\r\n  margin: 1.5rem 0;\r\n}\r\n\r\n.month-card {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 0.5rem;\r\n  text-align: center;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.month-header {\r\n  font-size: 0.8rem;\r\n  color: #666;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.month-activity {\r\n  width: 100%;\r\n  aspect-ratio: 1;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  color: white;\r\n  background-color: #ebedf0;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.month-activity:hover {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.month-activity.has-activity {\r\n  color: white;\r\n}\r\n\r\n.activity-0 { background-color: #ebedf0; color: #666; }\r\n.activity-1 { background-color: #9be9a8; }\r\n.activity-2 { background-color: #40c463; }\r\n.activity-3 { background-color: #30a14e; }\r\n.activity-4 { background-color: #216e39; }\r\n\r\n.calendar-legend {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  margin-top: 1rem;\r\n  font-size: 0.8rem;\r\n  color: #666;\r\n}\r\n\r\n.legend-squares {\r\n  display: flex;\r\n  gap: 2px;\r\n}\r\n\r\n.legend-square {\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 2px;\r\n  background-color: #ebedf0;\r\n  border: 1px solid rgba(27, 31, 35, 0.06);\r\n}\r\n\r\n/* Performance Chart Styles */\r\n.performance-chart {\r\n  margin-top: 3rem;\r\n}\r\n\r\n.score-bars {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n  height: 200px;\r\n  margin-top: 1.5rem;\r\n  padding: 1rem 0;\r\n}\r\n\r\n.score-bar-container {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 0 0.5rem;\r\n}\r\n\r\n.score-bar {\r\n  width: 40px;\r\n  min-height: 4px;\r\n  border-radius: 4px;\r\n  position: relative;\r\n  transition: height 0.3s ease;\r\n}\r\n\r\n.score-bar.excellent {\r\n  background-color: #4CAF50;\r\n}\r\n\r\n.score-bar.good {\r\n  background-color: #2196F3;\r\n}\r\n\r\n.score-bar.average {\r\n  background-color: #FF9800;\r\n}\r\n\r\n.score-bar.needs-improvement {\r\n  background-color: #f44336;\r\n}\r\n\r\n.score-label {\r\n  position: absolute;\r\n  top: -25px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  font-size: 0.8rem;\r\n  color: #666;\r\n}\r\n\r\n.quiz-date {\r\n  margin-top: 0.5rem;\r\n  font-size: 0.8rem;\r\n  color: #666;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}