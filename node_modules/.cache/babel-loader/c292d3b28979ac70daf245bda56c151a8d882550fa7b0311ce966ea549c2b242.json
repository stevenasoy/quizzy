{"ast":null,"code":"import { ref, computed } from 'vue';\nimport axios from 'axios';\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedFiles = ref([]);\n    const questionCount = ref('');\n    const fileInput = ref(null);\n    const generatedQuestions = ref([]);\n    const isLoading = ref(false);\n    const error = ref('');\n    const showQuestions = ref(false);\n    const quiz = ref(null);\n    const userAnswers = ref([]);\n    const showAnswers = ref(false);\n    const unsupportedFiles = ref([]);\n    const extractionErrors = ref([]);\n    const selectedDifficulty = ref('medium');\n\n    // Adaptive quiz state\n    const predictedScore = ref(null);\n    const quizStarted = ref(false);\n    const currentQuestionIndex = ref(0);\n    const userResponses = ref([]); // {question, userAnswer, correct, difficulty}\n    const adaptiveQuestions = ref([]); // pool of questions for adaptive flow\n    const adaptiveDifficulty = ref('medium');\n    const actualScore = ref(null);\n    const quizSummary = ref('');\n\n    // Add these new refs for answer handling\n    const currentAnswer = ref(null);\n    const quizFinished = ref(false);\n    const isFormValid = computed(() => {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n\n    // Used in template for error display conditions\n    const hasFileErrors = computed(() => {\n      return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n    });\n    const triggerFileInput = () => {\n      fileInput.value.click();\n    };\n    const handleFileSelect = event => {\n      const files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    const handleDrop = event => {\n      const files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    const addFiles = files => {\n      const validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n      const validFiles = [];\n      const invalidFiles = [];\n      files.forEach(file => {\n        if (validTypes.includes(file.type)) {\n          validFiles.push(file);\n        } else {\n          invalidFiles.push(file);\n        }\n      });\n      selectedFiles.value = [...selectedFiles.value, ...validFiles];\n      unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n    };\n    const removeFile = index => {\n      selectedFiles.value.splice(index, 1);\n    };\n    const readFileContent = async file => {\n      return new Promise(resolve => {\n        if (file.type === \"application/pdf\" || file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" || file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type.startsWith('image/')) {\n          // PDF, PPTX, DOCX, or Image - send to backend for extraction\n          const formData = new FormData();\n          formData.append('file', file);\n\n          // Use the correct backend URL\n          const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n          fetch(`${backendUrl}/extract-file`, {\n            method: 'POST',\n            body: formData\n          }).then(res => res.json()).then(data => {\n            if (data.text) {\n              resolve(data.text);\n            } else {\n              extractionErrors.value.push({\n                fileName: file.name,\n                message: data.error || 'Failed to extract text from file'\n              });\n              resolve(\"[Could not extract file text]\");\n            }\n          }).catch(() => {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: 'Server error while extracting text'\n            });\n            resolve(\"[Could not extract file text]\");\n          });\n        } else if (file.type === \"text/plain\") {\n          // Plain text\n          const reader = new FileReader();\n          reader.onload = e => resolve(e.target.result);\n          reader.onerror = () => {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: 'Error reading text file'\n            });\n            resolve(\"[Could not read file]\");\n          };\n          reader.readAsText(file);\n        } else {\n          resolve(`[${file.name} is not a supported file type.]`);\n        }\n      });\n    };\n    function predictScore(contentCoverage, difficultyLevel) {\n      // Example coefficients for linear regression\n      const a = 0.5;\n      const b = -10;\n      const c = 90;\n      return Math.max(0, Math.min(100, Math.round(a * contentCoverage + b * difficultyLevel + c)));\n    }\n    function getDifficultyLevelValue(diff) {\n      if (diff === 'easy') return 1;\n      if (diff === 'medium') return 2;\n      if (diff === 'hard') return 3;\n      return 2;\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    function analyzeContentForCoverage(content) {\n      // For now, just return 100 (simulate full coverage)\n      // Later: implement keyword/topic extraction and compare to questions\n      return 100;\n    }\n    const handleSubmit = async () => {\n      if (!isFormValid.value) return;\n      isLoading.value = true;\n      error.value = '';\n      generatedQuestions.value = [];\n      predictedScore.value = null;\n      quizStarted.value = false;\n      currentQuestionIndex.value = 0;\n      userResponses.value = [];\n      adaptiveQuestions.value = [];\n      actualScore.value = null;\n      quizSummary.value = '';\n      try {\n        // Read all file contents\n        const fileContents = await Promise.all(selectedFiles.value.map(file => readFileContent(file)));\n\n        // Combine all file contents\n        const combinedContent = fileContents.join('\\n\\n');\n        console.log('Extracted file content:', combinedContent);\n\n        // Prepare the prompt for Gemini with difficulty level\n        const prompt = `Create a quiz with ${questionCount.value} easy, medium, and hard questions based on this text. Format each question exactly as follows:\n\nFor multiple choice questions:\n1. Start with \"Question: [question text]\"\n2. List options as:\n   A) [option text]\n   B) [option text]\n   C) [option text]\n   D) [option text]\n   (Mark correct answer with * after the option)\n3. Add \"Explanation: [explanation text]\"\n4. Add \"Difficulty: [easy|medium|hard]\"\n\nFor true/false questions:\n1. Start with \"True/False: [question text]\"\n2. List options as:\n   True*\n   False\n   (or vice versa, with * marking correct answer)\n3. Add \"Explanation: [explanation text]\"\n4. Add \"Difficulty: [easy|medium|hard]\"\n\nText: ${combinedContent}`;\n\n        // Call Gemini API\n        const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`, {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 2048\n          }\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const quizText = response.data.candidates[0].content.parts[0].text;\n        const processedQuiz = processQuizResponse(quizText);\n        // Store all questions for adaptive flow\n        adaptiveQuestions.value = processedQuiz.questions;\n\n        // Predict score using linear regression\n        const contentCoverage = analyzeContentForCoverage(combinedContent);\n        const diffValue = getDifficultyLevelValue(selectedDifficulty.value);\n        predictedScore.value = predictScore(contentCoverage, diffValue);\n\n        // Show predicted score and Start Quiz button\n        showQuestions.value = false;\n        quizStarted.value = false;\n      } catch (err) {\n        error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const startAdaptiveQuiz = () => {\n      quizStarted.value = true;\n      showQuestions.value = false;\n      currentQuestionIndex.value = 0;\n      userResponses.value = [];\n      adaptiveDifficulty.value = selectedDifficulty.value;\n    };\n    const getCurrentAdaptiveQuestion = computed(() => {\n      const pool = adaptiveQuestions.value.filter(q => q.difficulty === adaptiveDifficulty.value);\n      let question;\n      if (pool.length === 0) {\n        question = adaptiveQuestions.value[currentQuestionIndex.value];\n      } else {\n        // Find one not yet answered\n        question = pool.find(q => !userResponses.value.find(r => r.text === q.text)) || adaptiveQuestions.value[currentQuestionIndex.value];\n      }\n      return question;\n    });\n    const submitAdaptiveAnswer = answer => {\n      const question = getCurrentAdaptiveQuestion.value;\n      currentAnswer.value = answer;\n\n      // Store response\n      userResponses.value.push({\n        text: question.text,\n        userAnswer: answer,\n        correct: question.type === 'multiple-choice' ? answer === question.correctAnswer : answer === question.correctAnswer.toLowerCase(),\n        difficulty: question.difficulty\n      });\n\n      // Move to next question or finish\n      if (currentQuestionIndex.value + 1 >= Number(questionCount.value)) {\n        finishAdaptiveQuiz();\n      } else {\n        currentQuestionIndex.value++;\n        currentAnswer.value = null;\n      }\n    };\n    const finishAdaptiveQuiz = () => {\n      quizStarted.value = false;\n      quizFinished.value = true;\n\n      // Calculate score\n      const correctCount = userResponses.value.filter(r => r.correct).length;\n      actualScore.value = Math.round(correctCount / userResponses.value.length * 100);\n\n      // Generate summary\n      let strong = [],\n        weak = [];\n      for (const diff of ['easy', 'medium', 'hard']) {\n        const total = userResponses.value.filter(r => r.difficulty === diff).length;\n        const correct = userResponses.value.filter(r => r.difficulty === diff && r.correct).length;\n        if (total > 0) {\n          if (correct / total >= 0.8) strong.push(diff);else if (correct / total < 0.5) weak.push(diff);\n        }\n      }\n      let summary = '';\n      if (actualScore.value === 100) {\n        summary = \"Perfect score! You've mastered the material!\";\n      } else {\n        summary = `You did well on: ${strong.join(', ') || 'none'}\\nAreas to improve: ${weak.join(', ') || 'none'}`;\n      }\n      quizSummary.value = summary;\n    };\n    const resetToMainScreen = () => {\n      showQuestions.value = false;\n      selectedFiles.value = [];\n      unsupportedFiles.value = [];\n      extractionErrors.value = [];\n      questionCount.value = '';\n      error.value = '';\n      isLoading.value = false;\n      predictedScore.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      currentQuestionIndex.value = 0;\n      userResponses.value = [];\n      adaptiveQuestions.value = [];\n      actualScore.value = null;\n      quizSummary.value = '';\n      currentAnswer.value = null;\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n    const checkAnswers = () => {\n      showAnswers.value = true;\n    };\n    const allQuestionsAnswered = computed(() => {\n      return userAnswers.value.length === quiz.value.questions.length;\n    });\n    const processQuizResponse = response => {\n      const questions = [];\n      const lines = response.split('\\n');\n      let currentQuestion = null;\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n        if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n          if (currentQuestion) questions.push(currentQuestion);\n          currentQuestion = {\n            text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n            type: 'multiple-choice',\n            options: {},\n            correctAnswer: '',\n            explanation: '',\n            difficulty: 'medium'\n          };\n        } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n          if (currentQuestion) questions.push(currentQuestion);\n          currentQuestion = {\n            text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n            type: 'true-false',\n            options: {\n              true: 'True',\n              false: 'False'\n            },\n            correctAnswer: '',\n            explanation: '',\n            difficulty: 'medium'\n          };\n        } else if (currentQuestion) {\n          const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n          if (optionMatch) {\n            const letter = optionMatch[1].toUpperCase();\n            let option = optionMatch[2];\n            if (option.includes('*')) {\n              currentQuestion.correctAnswer = letter;\n              option = option.replace('*', '').trim();\n            }\n            currentQuestion.options[letter] = option;\n          } else if (line === 'True*' || line === 'False*') {\n            currentQuestion.correctAnswer = line === 'True*' ? 'true' : 'false';\n          } else if (line.startsWith('Explanation:')) {\n            currentQuestion.explanation = line.replace('Explanation:', '').trim();\n          } else if (line.startsWith('Difficulty:')) {\n            const diff = line.replace('Difficulty:', '').trim().toLowerCase();\n            if (['easy', 'medium', 'hard'].includes(diff)) {\n              currentQuestion.difficulty = diff;\n            }\n          }\n        }\n      }\n      if (currentQuestion) questions.push(currentQuestion);\n      return {\n        questions\n      };\n    };\n\n    // Add new computed properties for QuizResults component\n    const formatQuestionsForResults = computed(() => {\n      return adaptiveQuestions.value.slice(0, userResponses.value.length).map(q => ({\n        text: q.text,\n        answer: q.type === 'multiple-choice' ? q.correctAnswer : q.correctAnswer.toString()\n      }));\n    });\n    const formatUserAnswersForResults = computed(() => {\n      return userResponses.value.map(r => r.userAnswer);\n    });\n    const correctAnswersCount = computed(() => {\n      return userResponses.value.filter(r => r.correct).length;\n    });\n\n    // Add restartQuiz function\n    const restartQuiz = () => {\n      quizStarted.value = true;\n      quizFinished.value = false;\n      currentQuestionIndex.value = 0;\n      userResponses.value = [];\n      currentAnswer.value = null;\n    };\n    const __returned__ = {\n      selectedFiles,\n      questionCount,\n      fileInput,\n      generatedQuestions,\n      isLoading,\n      error,\n      showQuestions,\n      quiz,\n      userAnswers,\n      showAnswers,\n      unsupportedFiles,\n      extractionErrors,\n      selectedDifficulty,\n      predictedScore,\n      quizStarted,\n      currentQuestionIndex,\n      userResponses,\n      adaptiveQuestions,\n      adaptiveDifficulty,\n      actualScore,\n      quizSummary,\n      currentAnswer,\n      quizFinished,\n      isFormValid,\n      hasFileErrors,\n      triggerFileInput,\n      handleFileSelect,\n      handleDrop,\n      addFiles,\n      removeFile,\n      readFileContent,\n      predictScore,\n      getDifficultyLevelValue,\n      analyzeContentForCoverage,\n      handleSubmit,\n      startAdaptiveQuiz,\n      getCurrentAdaptiveQuestion,\n      submitAdaptiveAnswer,\n      finishAdaptiveQuiz,\n      resetToMainScreen,\n      checkAnswers,\n      allQuestionsAnswered,\n      processQuizResponse,\n      formatQuestionsForResults,\n      formatUserAnswersForResults,\n      correctAnswersCount,\n      restartQuiz,\n      ref,\n      computed,\n      get axios() {\n        return axios;\n      },\n      TrueFalseQuestion,\n      FileErrorDisplay,\n      QuizResults\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","axios","TrueFalseQuestion","FileErrorDisplay","QuizResults","selectedFiles","questionCount","fileInput","generatedQuestions","isLoading","error","showQuestions","quiz","userAnswers","showAnswers","unsupportedFiles","extractionErrors","selectedDifficulty","predictedScore","quizStarted","currentQuestionIndex","userResponses","adaptiveQuestions","adaptiveDifficulty","actualScore","quizSummary","currentAnswer","quizFinished","isFormValid","value","length","hasFileErrors","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validTypes","validFiles","invalidFiles","forEach","file","includes","type","push","removeFile","index","splice","readFileContent","Promise","resolve","startsWith","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","data","text","fileName","name","message","catch","reader","FileReader","onload","e","result","onerror","readAsText","predictScore","contentCoverage","difficultyLevel","a","b","c","Math","max","min","round","getDifficultyLevelValue","diff","analyzeContentForCoverage","content","handleSubmit","fileContents","all","map","combinedContent","join","console","log","prompt","response","post","VUE_APP_GEMINI_API_KEY","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","quizText","candidates","processedQuiz","processQuizResponse","questions","diffValue","err","startAdaptiveQuiz","getCurrentAdaptiveQuestion","pool","filter","q","difficulty","question","find","r","submitAdaptiveAnswer","answer","userAnswer","correct","correctAnswer","toLowerCase","Number","finishAdaptiveQuiz","correctCount","strong","weak","total","summary","resetToMainScreen","checkAnswers","allQuestionsAnswered","lines","split","currentQuestion","i","line","trim","test","replace","options","explanation","true","false","optionMatch","match","letter","toUpperCase","option","formatQuestionsForResults","slice","toString","formatUserAnswersForResults","correctAnswersCount","restartQuiz"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"upload-container\">\n      <h1>QUIZZy</h1>\n      \n      <div v-if=\"!showQuestions && !quizStarted && predictedScore === null\" class=\"file-upload-section\">\n        <h2>Upload Files</h2>\n        <div class=\"upload-area\" \n          @dragover.prevent \n          @drop.prevent=\"handleDrop\"\n          @click=\"triggerFileInput\"\n          role=\"button\"\n          tabindex=\"0\"\n          @keydown.enter=\"triggerFileInput\"\n        >\n          <input \n            type=\"file\" \n            @change=\"handleFileSelect\" \n            accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\n            ref=\"fileInput\"\n            class=\"file-input\"\n          >\n          <div class=\"upload-prompt\">\n            <p>Drag and drop files here or click to select</p>\n            <p>Supported formats: PDF, DOCX, PPTX, TXT</p>\n          </div>\n        </div>\n        \n        <div v-if=\"hasFileErrors\" class=\"error-section\">\n          <FileErrorDisplay\n            :extraction-errors=\"extractionErrors\"\n            :unsupported-files=\"unsupportedFiles\"\n          />\n        </div>\n\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n          <h3>Selected Files:</h3>\n          <ul>\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n              <span class=\"file-name\">{{ file.name }}</span>\n              <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">×</button>\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"questions-section\">\n          <h2>Number of Questions</h2>\n          <div class=\"question-input\">\n            <input\n              type=\"number\"\n              v-model=\"questionCount\"\n              min=\"1\"\n              max=\"20\"\n              placeholder=\"Enter number of questions\"\n            />\n          </div>\n        </div>\n\n        <div class=\"difficulty-section\">\n          <h2>Question Difficulty</h2>\n          <div class=\"difficulty-selector\">\n            <select v-model=\"selectedDifficulty\" class=\"difficulty-dropdown\">\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </div>\n        </div>\n\n        <button \n          class=\"submit-btn\" \n          :disabled=\"!isFormValid || isLoading\"\n          @click=\"handleSubmit\"\n        >\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n        </button>\n      </div>\n\n      <div v-if=\"predictedScore !== null && !quizStarted\">\n        <h2>Predicted Score: {{ predictedScore }}% based on your study material and question difficulty.</h2>\n        <button class=\"submit-btn\" @click=\"startAdaptiveQuiz\">Start Quiz</button>\n      </div>\n\n      <div v-if=\"quizStarted && !quizFinished\">\n        <div v-if=\"getCurrentAdaptiveQuestion\">\n          <div class=\"quiz-progress\">\n            <div class=\"progress-bar\">\n              <div \n                class=\"progress-fill\"\n                :style=\"{ width: `${(currentQuestionIndex + 1) * 100 / Number(questionCount)}%` }\"\n              ></div>\n            </div>\n            <span class=\"progress-text\">Question {{ currentQuestionIndex + 1 }} of {{ questionCount }}</span>\n          </div>\n          \n          <div class=\"question-item\">\n            <h3>{{ getCurrentAdaptiveQuestion.text }}</h3>\n            <div v-if=\"getCurrentAdaptiveQuestion.type === 'multiple-choice'\" class=\"options\">\n              <button \n                v-for=\"(option, letter) in getCurrentAdaptiveQuestion.options\" \n                :key=\"letter\"\n                class=\"option-btn\"\n                :class=\"{ 'selected': currentAnswer === letter }\"\n                @click=\"submitAdaptiveAnswer(letter)\"\n              >\n                {{ letter }}) {{ option }}\n              </button>\n            </div>\n            <div v-else-if=\"getCurrentAdaptiveQuestion.type === 'true-false'\" class=\"options\">\n              <button \n                v-for=\"option in ['true', 'false']\" \n                :key=\"option\"\n                class=\"option-btn\"\n                :class=\"{ 'selected': currentAnswer === option }\"\n                @click=\"submitAdaptiveAnswer(option)\"\n              >\n                {{ option.charAt(0).toUpperCase() + option.slice(1) }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <QuizResults\n        v-if=\"quizFinished\"\n        :questions=\"formatQuestionsForResults\"\n        :user-answers=\"formatUserAnswersForResults\"\n        :score=\"correctAnswersCount\"\n        @restart=\"restartQuiz\"\n        @go-back=\"resetToMainScreen\"\n      />\n\n      <div v-if=\"actualScore !== null\">\n        <h2>You scored {{ actualScore }}%. Predicted score was {{ predictedScore }}%.</h2>\n        <div v-if=\"actualScore === 100\">\n          <h3>Perfect score! You've mastered the material!</h3>\n        </div>\n        <div v-else>\n          <p v-if=\"actualScore >= predictedScore - 10 && actualScore <= predictedScore + 10\">You were close!</p>\n          <p v-if=\"actualScore > predictedScore + 10\">You outperformed the prediction! Great job!</p>\n          <p v-if=\"actualScore < predictedScore - 10\">You scored below the prediction. Review the material for improvement.</p>\n        </div>\n        <pre>{{ quizSummary }}</pre>\n        <button class=\"submit-btn\" @click=\"resetToMainScreen\">Back to Main</button>\n      </div>\n\n      <div v-if=\"error\" class=\"error-message\">\n        {{ error }}\n      </div>\n    </div>\n\n    <template v-if=\"quiz\">\n      <div class=\"quiz-container\">\n        <h2>Generated Quiz</h2>\n        <template v-for=\"(question, index) in quiz.questions\" :key=\"index\">\n          <div class=\"question\">\n            <h3>Question {{ index + 1 }}: {{ question.text }}</h3>\n            <div class=\"options\">\n              <template v-if=\"question.type === 'multiple-choice'\">\n                <div v-for=\"(option, letter) in question.options\" :key=\"letter\" class=\"option\">\n                  <input\n                    type=\"radio\"\n                    :id=\"`q${index}-${letter}`\"\n                    :name=\"`question${index}`\"\n                    :value=\"letter\"\n                    v-model=\"userAnswers[index]\"\n                  />\n                  <label :for=\"`q${index}-${letter}`\">{{ letter }}) {{ option }}</label>\n                </div>\n              </template>\n              <template v-else-if=\"question.type === 'true-false'\">\n                <TrueFalseQuestion\n                  :index=\"index\"\n                  :correct-answer=\"question.correctAnswer\"\n                  :explanation=\"question.explanation\"\n                  :show-feedback=\"showAnswers && userAnswers[index]\"\n                  @update:answer=\"userAnswers[index] = $event\"\n                />\n              </template>\n            </div>\n            <div v-if=\"showAnswers && userAnswers[index]\" class=\"feedback\">\n              <p :class=\"{ 'correct': userAnswers[index] === question.correctAnswer, 'incorrect': userAnswers[index] !== question.correctAnswer }\">\n                {{ userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!' }}\n              </p>\n              <p class=\"explanation\">{{ question.explanation }}</p>\n            </div>\n          </div>\n        </template>\n        <button @click=\"checkAnswers\" :disabled=\"!allQuestionsAnswered\">Check Answers</button>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\n\nconst selectedFiles = ref([]);\nconst questionCount = ref('');\nconst fileInput = ref(null);\nconst generatedQuestions = ref([]);\nconst isLoading = ref(false);\nconst error = ref('');\nconst showQuestions = ref(false);\nconst quiz = ref(null);\nconst userAnswers = ref([]);\nconst showAnswers = ref(false);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\nconst selectedDifficulty = ref('medium');\n\n// Adaptive quiz state\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst currentQuestionIndex = ref(0);\nconst userResponses = ref([]); // {question, userAnswer, correct, difficulty}\nconst adaptiveQuestions = ref([]); // pool of questions for adaptive flow\nconst adaptiveDifficulty = ref('medium');\nconst actualScore = ref(null);\nconst quizSummary = ref('');\n\n// Add these new refs for answer handling\nconst currentAnswer = ref(null);\nconst quizFinished = ref(false);\n\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\n// Used in template for error display conditions\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\nconst readFileContent = async (file) => {\n  return new Promise((resolve) => {\n    if (\n      file.type === \"application/pdf\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n      file.type.startsWith('image/')\n    ) {\n      // PDF, PPTX, DOCX, or Image - send to backend for extraction\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Use the correct backend URL\n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n            resolve(\"[Could not extract file text]\");\n          }\n        })\n        .catch(() => {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: 'Server error while extracting text'\n          });\n          resolve(\"[Could not extract file text]\");\n        });\n    } else if (file.type === \"text/plain\") {\n      // Plain text\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = () => {\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: 'Error reading text file'\n        });\n        resolve(\"[Could not read file]\");\n      };\n      reader.readAsText(file);\n    } else {\n      resolve(`[${file.name} is not a supported file type.]`);\n    }\n  });\n};\n\nfunction predictScore(contentCoverage, difficultyLevel) {\n  // Example coefficients for linear regression\n  const a = 0.5;\n  const b = -10;\n  const c = 90;\n  return Math.max(0, Math.min(100, Math.round(a * contentCoverage + b * difficultyLevel + c)));\n}\n\nfunction getDifficultyLevelValue(diff) {\n  if (diff === 'easy') return 1;\n  if (diff === 'medium') return 2;\n  if (diff === 'hard') return 3;\n  return 2;\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction analyzeContentForCoverage(content) {\n  // For now, just return 100 (simulate full coverage)\n  // Later: implement keyword/topic extraction and compare to questions\n  return 100;\n}\n\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  generatedQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveQuestions.value = [];\n  actualScore.value = null;\n  quizSummary.value = '';\n\n  try {\n    // Read all file contents\n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    // Combine all file contents\n    const combinedContent = fileContents.join('\\n\\n');\n    console.log('Extracted file content:', combinedContent);\n\n    // Prepare the prompt for Gemini with difficulty level\n    const prompt = `Create a quiz with ${questionCount.value} easy, medium, and hard questions based on this text. Format each question exactly as follows:\n\nFor multiple choice questions:\n1. Start with \"Question: [question text]\"\n2. List options as:\n   A) [option text]\n   B) [option text]\n   C) [option text]\n   D) [option text]\n   (Mark correct answer with * after the option)\n3. Add \"Explanation: [explanation text]\"\n4. Add \"Difficulty: [easy|medium|hard]\"\n\nFor true/false questions:\n1. Start with \"True/False: [question text]\"\n2. List options as:\n   True*\n   False\n   (or vice versa, with * marking correct answer)\n3. Add \"Explanation: [explanation text]\"\n4. Add \"Difficulty: [easy|medium|hard]\"\n\nText: ${combinedContent}`;\n\n    // Call Gemini API\n    const response = await axios.post(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n      {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 2048,\n        }\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    const quizText = response.data.candidates[0].content.parts[0].text;\n    const processedQuiz = processQuizResponse(quizText);\n    // Store all questions for adaptive flow\n    adaptiveQuestions.value = processedQuiz.questions;\n\n    // Predict score using linear regression\n    const contentCoverage = analyzeContentForCoverage(combinedContent);\n    const diffValue = getDifficultyLevelValue(selectedDifficulty.value);\n    predictedScore.value = predictScore(contentCoverage, diffValue);\n\n    // Show predicted score and Start Quiz button\n    showQuestions.value = false;\n    quizStarted.value = false;\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startAdaptiveQuiz = () => {\n  quizStarted.value = true;\n  showQuestions.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveDifficulty.value = selectedDifficulty.value;\n};\n\nconst getCurrentAdaptiveQuestion = computed(() => {\n  const pool = adaptiveQuestions.value.filter(q => q.difficulty === adaptiveDifficulty.value);\n  let question;\n  \n  if (pool.length === 0) {\n    question = adaptiveQuestions.value[currentQuestionIndex.value];\n  } else {\n    // Find one not yet answered\n    question = pool.find(q => !userResponses.value.find(r => r.text === q.text)) \n            || adaptiveQuestions.value[currentQuestionIndex.value];\n  }\n  \n  return question;\n});\n\nconst submitAdaptiveAnswer = (answer) => {\n  const question = getCurrentAdaptiveQuestion.value;\n  currentAnswer.value = answer;\n  \n  // Store response\n  userResponses.value.push({\n    text: question.text,\n    userAnswer: answer,\n    correct: question.type === 'multiple-choice' \n      ? answer === question.correctAnswer\n      : answer === question.correctAnswer.toLowerCase(),\n    difficulty: question.difficulty\n  });\n\n  // Move to next question or finish\n  if (currentQuestionIndex.value + 1 >= Number(questionCount.value)) {\n    finishAdaptiveQuiz();\n  } else {\n    currentQuestionIndex.value++;\n    currentAnswer.value = null;\n  }\n};\n\nconst finishAdaptiveQuiz = () => {\n  quizStarted.value = false;\n  quizFinished.value = true;\n  \n  // Calculate score\n  const correctCount = userResponses.value.filter(r => r.correct).length;\n  actualScore.value = Math.round((correctCount / userResponses.value.length) * 100);\n  \n  // Generate summary\n  let strong = [], weak = [];\n  for (const diff of ['easy', 'medium', 'hard']) {\n    const total = userResponses.value.filter(r => r.difficulty === diff).length;\n    const correct = userResponses.value.filter(r => r.difficulty === diff && r.correct).length;\n    if (total > 0) {\n      if (correct / total >= 0.8) strong.push(diff);\n      else if (correct / total < 0.5) weak.push(diff);\n    }\n  }\n  let summary = '';\n  if (actualScore.value === 100) {\n    summary = \"Perfect score! You've mastered the material!\";\n  } else {\n    summary = `You did well on: ${strong.join(', ') || 'none'}\\nAreas to improve: ${weak.join(', ') || 'none'}`;\n  }\n  quizSummary.value = summary;\n};\n\nconst resetToMainScreen = () => {\n  showQuestions.value = false;\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveQuestions.value = [];\n  actualScore.value = null;\n  quizSummary.value = '';\n  currentAnswer.value = null;\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\nconst checkAnswers = () => {\n  showAnswers.value = true;\n};\n\nconst allQuestionsAnswered = computed(() => {\n  return userAnswers.value.length === quiz.value.questions.length;\n});\n\nconst processQuizResponse = (response) => {\n  const questions = [];\n  const lines = response.split('\\n');\n  let currentQuestion = null;\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n        type: 'multiple-choice',\n        options: {},\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n    } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n        type: 'true-false',\n        options: { true: 'True', false: 'False' },\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n    } else if (currentQuestion) {\n      const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n      if (optionMatch) {\n        const letter = optionMatch[1].toUpperCase();\n        let option = optionMatch[2];\n        if (option.includes('*')) {\n          currentQuestion.correctAnswer = letter;\n          option = option.replace('*', '').trim();\n        }\n        currentQuestion.options[letter] = option;\n      } else if (line === 'True*' || line === 'False*') {\n        currentQuestion.correctAnswer = line === 'True*' ? 'true' : 'false';\n      } else if (line.startsWith('Explanation:')) {\n        currentQuestion.explanation = line.replace('Explanation:', '').trim();\n      } else if (line.startsWith('Difficulty:')) {\n        const diff = line.replace('Difficulty:', '').trim().toLowerCase();\n        if (['easy', 'medium', 'hard'].includes(diff)) {\n          currentQuestion.difficulty = diff;\n        }\n      }\n    }\n  }\n  if (currentQuestion) questions.push(currentQuestion);\n  return { questions };\n};\n\n// Add new computed properties for QuizResults component\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.slice(0, userResponses.value.length).map(q => ({\n    text: q.text,\n    answer: q.type === 'multiple-choice' ? q.correctAnswer : q.correctAnswer.toString()\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Add restartQuiz function\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  currentAnswer.value = null;\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.upload-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 90%;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.option {\n  margin-bottom: 0.5rem;\n}\n\n.feedback {\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.correct {\n  color: #4CAF50;\n}\n\n.incorrect {\n  color: #ff4444;\n}\n\n.explanation {\n  margin-top: 0.5rem;\n  margin-left: 1rem;\n}\n\nbutton {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\nbutton:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.file-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.file-name {\n  flex: 1;\n  margin-right: 0.5rem;\n  word-break: break-word;\n}\n\n.remove-btn {\n  flex-shrink: 0;\n  width: 24px;\n  height: 24px;\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: background-color 0.2s;\n}\n\n.remove-btn:hover {\n  background-color: #ffeeee;\n}\n\n.unsupported-files {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #fff3f3;\n  border-radius: 4px;\n  border: 1px solid #ffdddd;\n}\n\n.unsupported-files h3 {\n  color: #d32f2f;\n  margin-bottom: 0.5rem;\n}\n\n.unsupported-label {\n  color: #d32f2f;\n  font-size: 0.9em;\n  margin-left: 0.5rem;\n}\n\n.unsupported-files .file-item {\n  background-color: #fff;\n  border: 1px solid #ffdddd;\n}\n\n.difficulty-section {\n  margin-top: 2rem;\n}\n\n.difficulty-selector {\n  margin-bottom: 1rem;\n}\n\n.difficulty-dropdown {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n  cursor: pointer;\n}\n\n.difficulty-dropdown:focus {\n  outline: none;\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.option-btn {\n  width: 100%;\n  padding: 1rem;\n  margin: 0.5rem 0;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.3s ease;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #4CAF50;\n  background-color: #f5f5f5;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #E3F2FD;\n  color: #333;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #333;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #333;\n}\n\n.option-btn:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n}\n\n.feedback {\n  margin-top: 1rem;\n  padding: 1rem;\n  border-radius: 4px;\n  background-color: #f5f5f5;\n}\n\n.feedback p {\n  margin: 0.5rem 0;\n}\n\n.feedback .correct {\n  color: #4CAF50;\n  font-weight: bold;\n}\n\n.feedback .incorrect {\n  color: #f44336;\n  font-weight: bold;\n}\n\n.explanation {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: white;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n}\n\n.next-btn {\n  margin-top: 1rem;\n  padding: 0.8rem 1.5rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s;\n}\n\n.next-btn:hover {\n  background-color: #45a049;\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #E3F2FD;\n  color: #333;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}