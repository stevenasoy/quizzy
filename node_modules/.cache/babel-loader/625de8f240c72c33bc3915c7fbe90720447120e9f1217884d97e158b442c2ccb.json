{"ast":null,"code":"import { computed } from 'vue';\nexport default {\n  __name: 'QuizResults',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    },\n    userAnswers: {\n      type: Array,\n      required: true\n    },\n    score: {\n      type: Number,\n      required: true\n    },\n    predictedScore: {\n      type: Number,\n      required: false,\n      default: null\n    }\n  },\n  emits: ['restart', 'go-back'],\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const totalQuestions = computed(() => props.questions.length);\n    const scorePercentage = computed(() => {\n      return Math.round(props.score / totalQuestions.value * 100);\n    });\n    const scoreClass = computed(() => {\n      return scorePercentage.value >= 75 ? 'passing' : 'failing';\n    });\n    function formatAnswer(question, answer) {\n      if (!answer && answer !== false) return 'Not answered';\n      if (question.type === 'multiple-choice') {\n        const optionText = question.options[answer];\n        return optionText ? `${answer}) ${optionText}` : answer;\n      } else if (question.type === 'true-false') {\n        // Handle both string and boolean values\n        const value = String(answer).toLowerCase();\n        return value.charAt(0).toUpperCase() + value.slice(1);\n      }\n      return answer;\n    }\n    function rephraseContent(text, isSupporting, questionType = 'multiple-choice') {\n      // Clean and normalize the text\n      let cleaned = text.trim().replace(/^(however|moreover|furthermore|therefore|thus|hence|consequently),?\\s*/i, '').replace(/[\"\"\"]/g, '\"').trim();\n\n      // Remove personal information and email addresses\n      cleaned = cleaned.replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '').replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '').replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '');\n\n      // Capitalize first letter if needed\n      cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);\n\n      // Define phrases based on question type and whether it's supporting or contradicting\n      const contextPhrases = {\n        'multiple-choice': {\n          supporting: [\"This option is correct because \", \"The answer is accurate as \", \"This choice is right since \", \"This is the best answer because \"],\n          contradicting: [\"This option is incorrect because \", \"This choice is inaccurate since \", \"This isn't the right answer as \", \"This option doesn't fit because \"]\n        },\n        'true-false': {\n          supporting: [\"This statement is true because \", \"The statement is accurate since \", \"This is correct because \", \"The statement holds true as \"],\n          contradicting: [\"This statement is false because \", \"The statement is inaccurate since \", \"This is incorrect because \", \"The statement doesn't hold true as \"]\n        }\n      };\n\n      // Select appropriate phrases based on question type\n      const phrases = contextPhrases[questionType] || contextPhrases['multiple-choice'];\n      const selectedPhrases = isSupporting ? phrases.supporting : phrases.contradicting;\n      const selectedPhrase = selectedPhrases[Math.floor(Math.random() * selectedPhrases.length)];\n\n      // Split into sentences and clean up\n      const sentences = cleaned.split(/(?<=[.!?])\\s+/);\n      const relevantSentences = sentences.filter(s => s.length > 0).map(s => s.trim()).filter(s => !s.includes('@') && !s.match(/\\+\\d{2}/));\n      if (relevantSentences.length === 0) {\n        return isSupporting ? \"The correct answer is supported by the material.\" : \"This answer contradicts the information in the material.\";\n      }\n\n      // Use the first relevant sentence\n      return `${selectedPhrase}${relevantSentences[0]}`;\n    }\n    function generateExplanation(question, isCorrect) {\n      const explanation = question.explanation || '';\n      if (!explanation) return \"No explanation available.\";\n      if (question.type === 'multiple-choice') {\n        return generateMultipleChoiceExplanation(question, isCorrect);\n      } else {\n        return generateTrueFalseExplanation(question, isCorrect);\n      }\n    }\n    function generateMultipleChoiceExplanation(question, isCorrect) {\n      let explanation = rephraseContent(question.explanation, true, 'multiple-choice');\n\n      // If the answer was incorrect, add specific feedback about their choice\n      if (!isCorrect) {\n        const userOption = question.options[question.userAnswer];\n        explanation += `\\n\\nYou chose \"${userOption}\". ${rephraseContent(question.explanation, false, 'multiple-choice')}`;\n      }\n      return explanation;\n    }\n    function generateTrueFalseExplanation(question, isCorrect) {\n      let explanation = rephraseContent(question.explanation, isCorrect, 'true-false');\n\n      // If the answer was incorrect, add specific feedback about their choice\n      if (!isCorrect) {\n        explanation += `\\n\\n${rephraseContent(question.explanation, false, 'true-false')}`;\n      }\n      return explanation;\n    }\n    const __returned__ = {\n      props,\n      totalQuestions,\n      scorePercentage,\n      scoreClass,\n      formatAnswer,\n      rephraseContent,\n      generateExplanation,\n      generateMultipleChoiceExplanation,\n      generateTrueFalseExplanation,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","props","__props","totalQuestions","questions","length","scorePercentage","Math","round","score","value","scoreClass","formatAnswer","question","answer","type","optionText","options","String","toLowerCase","charAt","toUpperCase","slice","rephraseContent","text","isSupporting","questionType","cleaned","trim","replace","contextPhrases","supporting","contradicting","phrases","selectedPhrases","selectedPhrase","floor","random","sentences","split","relevantSentences","filter","s","map","includes","match","generateExplanation","isCorrect","explanation","generateMultipleChoiceExplanation","generateTrueFalseExplanation","userOption","userAnswer"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <div class=\"score-display\" :class=\"scoreClass\">\r\n      <div class=\"score-container\">\r\n        <div class=\"score-main\">\r\n          <span class=\"score-value\">{{ score }}</span>\r\n          <span class=\"score-separator\">/</span>\r\n          <span class=\"score-total\">{{ totalQuestions }}</span>\r\n        </div>\r\n        <div class=\"score-percentage\">({{ scorePercentage }}%)</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"score-comparison\" v-if=\"predictedScore\">\r\n      <p>You scored {{ scorePercentage }}%. Predicted score was {{ predictedScore }}%.</p>\r\n      <p v-if=\"scorePercentage >= predictedScore + 10\" class=\"comparison-text success\">\r\n        You outperformed the prediction! Great job!\r\n      </p>\r\n      <p v-else-if=\"scorePercentage >= predictedScore - 10\" class=\"comparison-text neutral\">\r\n        You were close to the prediction!\r\n      </p>\r\n      <p v-else class=\"comparison-text warning\">\r\n        You scored below the prediction. Review the material for improvement.\r\n      </p>\r\n    </div>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Question {{ index + 1 }}</span>\r\n          <span :class=\"['result-status', question.isCorrect ? 'correct' : 'wrong']\">\r\n            {{ question.isCorrect ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\" :class=\"{ 'incorrect': !question.isCorrect }\">\r\n          <div class=\"answer-row\">\r\n            <div class=\"user-answer\">\r\n              <strong>Your answer:</strong> \r\n              <span :class=\"{ 'incorrect-text': !question.isCorrect }\">\r\n                {{ formatAnswer(question, question.userAnswer) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"correct-answer\">\r\n              <strong>Correct answer:</strong>\r\n              <span class=\"correct-text\">{{ formatAnswer(question, question.correctAnswer) }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"explanation-box\" :class=\"{ 'correct': question.isCorrect, 'incorrect': !question.isCorrect }\">\r\n            <p class=\"explanation-label\">Explanation:</p>\r\n            <p class=\"explanation-text\">{{ generateExplanation(question, question.isCorrect) }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"button-group\">\r\n      <button @click=\"$emit('restart')\" class=\"restart-btn\">Redo Quiz</button>\r\n      <button @click=\"$emit('go-back')\" class=\"back-btn\">Back to Main</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  predictedScore: {\r\n    type: Number,\r\n    required: false,\r\n    default: null\r\n  }\r\n});\r\n\r\ndefineEmits(['restart', 'go-back']);\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\nconst scorePercentage = computed(() => {\r\n  return Math.round((props.score / totalQuestions.value) * 100);\r\n});\r\nconst scoreClass = computed(() => {\r\n  return scorePercentage.value >= 75 ? 'passing' : 'failing';\r\n});\r\n\r\nfunction formatAnswer(question, answer) {\r\n  if (!answer && answer !== false) return 'Not answered';\r\n  \r\n  if (question.type === 'multiple-choice') {\r\n    const optionText = question.options[answer];\r\n    return optionText ? `${answer}) ${optionText}` : answer;\r\n  } else if (question.type === 'true-false') {\r\n    // Handle both string and boolean values\r\n    const value = String(answer).toLowerCase();\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n  }\r\n  return answer;\r\n}\r\n\r\nfunction rephraseContent(text, isSupporting, questionType = 'multiple-choice') {\r\n  // Clean and normalize the text\r\n  let cleaned = text.trim()\r\n    .replace(/^(however|moreover|furthermore|therefore|thus|hence|consequently),?\\s*/i, '')\r\n    .replace(/[\"\"\"]/g, '\"')\r\n    .trim();\r\n\r\n  // Remove personal information and email addresses\r\n  cleaned = cleaned.replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '')\r\n    .replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '')\r\n    .replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '');\r\n\r\n  // Capitalize first letter if needed\r\n  cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);\r\n\r\n  // Define phrases based on question type and whether it's supporting or contradicting\r\n  const contextPhrases = {\r\n    'multiple-choice': {\r\n      supporting: [\r\n        \"This option is correct because \",\r\n        \"The answer is accurate as \",\r\n        \"This choice is right since \",\r\n        \"This is the best answer because \"\r\n      ],\r\n      contradicting: [\r\n        \"This option is incorrect because \",\r\n        \"This choice is inaccurate since \",\r\n        \"This isn't the right answer as \",\r\n        \"This option doesn't fit because \"\r\n      ]\r\n    },\r\n    'true-false': {\r\n      supporting: [\r\n        \"This statement is true because \",\r\n        \"The statement is accurate since \",\r\n        \"This is correct because \",\r\n        \"The statement holds true as \"\r\n      ],\r\n      contradicting: [\r\n        \"This statement is false because \",\r\n        \"The statement is inaccurate since \",\r\n        \"This is incorrect because \",\r\n        \"The statement doesn't hold true as \"\r\n      ]\r\n    }\r\n  };\r\n\r\n  // Select appropriate phrases based on question type\r\n  const phrases = contextPhrases[questionType] || contextPhrases['multiple-choice'];\r\n  const selectedPhrases = isSupporting ? phrases.supporting : phrases.contradicting;\r\n  const selectedPhrase = selectedPhrases[Math.floor(Math.random() * selectedPhrases.length)];\r\n\r\n  // Split into sentences and clean up\r\n  const sentences = cleaned.split(/(?<=[.!?])\\s+/);\r\n  const relevantSentences = sentences\r\n    .filter(s => s.length > 0)\r\n    .map(s => s.trim())\r\n    .filter(s => !s.includes('@') && !s.match(/\\+\\d{2}/));\r\n\r\n  if (relevantSentences.length === 0) {\r\n    return isSupporting ? \r\n      \"The correct answer is supported by the material.\" :\r\n      \"This answer contradicts the information in the material.\";\r\n  }\r\n\r\n  // Use the first relevant sentence\r\n  return `${selectedPhrase}${relevantSentences[0]}`;\r\n}\r\n\r\nfunction generateExplanation(question, isCorrect) {\r\n  const explanation = question.explanation || '';\r\n  if (!explanation) return \"No explanation available.\";\r\n\r\n  if (question.type === 'multiple-choice') {\r\n    return generateMultipleChoiceExplanation(question, isCorrect);\r\n  } else {\r\n    return generateTrueFalseExplanation(question, isCorrect);\r\n  }\r\n}\r\n\r\nfunction generateMultipleChoiceExplanation(question, isCorrect) {\r\n  let explanation = rephraseContent(question.explanation, true, 'multiple-choice');\r\n\r\n  // If the answer was incorrect, add specific feedback about their choice\r\n  if (!isCorrect) {\r\n    const userOption = question.options[question.userAnswer];\r\n    explanation += `\\n\\nYou chose \"${userOption}\". ${rephraseContent(question.explanation, false, 'multiple-choice')}`;\r\n  }\r\n  \r\n  return explanation;\r\n}\r\n\r\nfunction generateTrueFalseExplanation(question, isCorrect) {\r\n  let explanation = rephraseContent(question.explanation, isCorrect, 'true-false');\r\n\r\n  // If the answer was incorrect, add specific feedback about their choice\r\n  if (!isCorrect) {\r\n    explanation += `\\n\\n${rephraseContent(question.explanation, false, 'true-false')}`;\r\n  }\r\n  \r\n  return explanation;\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 800px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.score-display.passing {\r\n  background-color: #e8f5e9;\r\n  border: 3px solid #4CAF50;\r\n}\r\n\r\n.score-display.failing {\r\n  background-color: #ffebee;\r\n  border: 3px solid #f44336;\r\n}\r\n\r\n.score-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-main {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-value {\r\n  font-size: 4rem;\r\n  line-height: 1;\r\n  font-weight: 800;\r\n}\r\n\r\n.score-separator {\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n}\r\n\r\n.score-total {\r\n  font-size: 2.5rem;\r\n  opacity: 0.7;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.8rem;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.score-comparison {\r\n  margin: 1.5rem 0;\r\n  padding: 1.5rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n}\r\n\r\n.comparison-text {\r\n  margin-top: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-text.success {\r\n  color: #4CAF50;\r\n}\r\n\r\n.comparison-text.neutral {\r\n  color: #666;\r\n}\r\n\r\n.comparison-text.warning {\r\n  color: #f44336;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n}\r\n\r\n.result-item {\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.question-number {\r\n  font-weight: 600;\r\n  color: #666;\r\n}\r\n\r\n.result-status {\r\n  padding: 0.4rem 1rem;\r\n  border-radius: 20px;\r\n  font-weight: 600;\r\n}\r\n\r\n.result-status.correct {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.result-status.wrong {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.question-text {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  margin-bottom: 1rem;\r\n  line-height: 1.4;\r\n}\r\n\r\n.answer-details {\r\n  background-color: #fff;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.answer-details.incorrect {\r\n  border-color: #ffcdd2;\r\n  background-color: #fff5f5;\r\n}\r\n\r\n.answer-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-answer, .correct-answer {\r\n  padding: 1rem;\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.user-answer strong, .correct-answer strong {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.incorrect-text {\r\n  color: #d32f2f;\r\n}\r\n\r\n.correct-text {\r\n  color: #2e7d32;\r\n}\r\n\r\n.explanation-box {\r\n  margin-top: 1.5rem;\r\n  padding: 1.5rem;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.explanation-box.correct {\r\n  border-left: 4px solid #4CAF50;\r\n}\r\n\r\n.explanation-box.incorrect {\r\n  border-left: 4px solid #ff9800;\r\n}\r\n\r\n.explanation-label {\r\n  font-weight: 600;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.explanation-label.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.explanation-label.incorrect {\r\n  color: #f57c00;\r\n}\r\n\r\n.explanation-text {\r\n  color: #333;\r\n  line-height: 1.6;\r\n  margin: 0;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: center;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.button-group button {\r\n  padding: 0.8rem 2rem;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.restart-btn {\r\n  background: #4CAF50;\r\n}\r\n\r\n.restart-btn:hover {\r\n  background: #388e3c;\r\n}\r\n\r\n.back-btn {\r\n  background: #666;\r\n}\r\n\r\n.back-btn:hover {\r\n  background: #555;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}