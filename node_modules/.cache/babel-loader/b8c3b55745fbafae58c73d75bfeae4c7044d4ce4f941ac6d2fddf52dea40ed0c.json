{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\r\n * Content Processing Algorithms Module\r\n */\n\n/**\r\n * Scores term frequency in content\r\n * @param {string} content - Content to analyze\r\n * @param {string[]} terms - Terms to look for\r\n * @returns {Object} Term frequency scores\r\n */\nexport function scoreTermFrequency(content, terms) {\n  var scores = {};\n  var normalizedContent = content.toLowerCase();\n  terms.forEach(function (term) {\n    var regex = new RegExp(\"\\\\b\".concat(term, \"\\\\b\"), 'g');\n    var matches = normalizedContent.match(regex);\n    scores[term] = matches ? matches.length : 0;\n  });\n  return scores;\n}\n\n/**\r\n * Finds exact phrase matches in content\r\n * @param {string} content - Content to search in\r\n * @param {string} phrase - Phrase to match\r\n * @returns {Array} Array of matches with their positions\r\n */\nexport function findExactPhraseMatches(content, phrase) {\n  var matches = [];\n  var pos = content.toLowerCase().indexOf(phrase.toLowerCase());\n  while (pos !== -1) {\n    matches.push({\n      position: pos,\n      context: content.substr(Math.max(0, pos - 50), 100)\n    });\n    pos = content.toLowerCase().indexOf(phrase.toLowerCase(), pos + 1);\n  }\n  return matches;\n}\n\n/**\r\n * Ranks content relevance based on multiple factors\r\n * @param {string} content - Content to analyze\r\n * @param {Object} criteria - Ranking criteria\r\n * @returns {number} Relevance score\r\n */\nexport function rankContentRelevance(content, criteria) {\n  var relevanceScore = 0;\n\n  // Score exact phrase matches\n  if (criteria.phrase) {\n    var exactMatches = findExactPhraseMatches(content, criteria.phrase);\n    relevanceScore += exactMatches.length * 15;\n  }\n\n  // Score keyword matches\n  if (criteria.keywords) {\n    var termScores = scoreTermFrequency(content, criteria.keywords);\n    relevanceScore += Object.values(termScores).reduce(function (a, b) {\n      return a + b;\n    }, 0) * 2;\n  }\n  return Math.min(relevanceScore, 100);\n}\n\n/**\r\n * Analyzes content-to-question ratio\r\n * @param {string} content - Content to analyze\r\n * @param {number} questionCount - Number of questions\r\n * @returns {Object} Analysis results\r\n */\nexport function analyzeContentQuestionRatio(content, questionCount) {\n  var contentLength = content.length;\n  var averageContentPerQuestion = 500; // baseline characters per question\n  var expectedQuestions = Math.ceil(contentLength / averageContentPerQuestion);\n  return {\n    contentLength: contentLength,\n    expectedQuestions: expectedQuestions,\n    actualQuestions: questionCount,\n    ratio: questionCount / expectedQuestions,\n    isAdequate: questionCount <= expectedQuestions\n  };\n}\n\n/**\r\n * Estimates content coverage\r\n * @param {string} content - Content to analyze\r\n * @param {Array} questions - Array of questions\r\n * @returns {Object} Coverage analysis\r\n */\nexport function estimateContentCoverage(content, questions) {\n  var contentParagraphs = content.split(/\\n\\s*\\n/);\n  var coveredParagraphs = new Set();\n  questions.forEach(function (question) {\n    contentParagraphs.forEach(function (paragraph, index) {\n      if (paragraph.toLowerCase().includes(question.text.toLowerCase())) {\n        coveredParagraphs.add(index);\n      }\n    });\n  });\n  return {\n    totalParagraphs: contentParagraphs.length,\n    coveredParagraphs: coveredParagraphs.size,\n    coveragePercentage: coveredParagraphs.size / contentParagraphs.length * 100\n  };\n}","map":{"version":3,"names":["scoreTermFrequency","content","terms","scores","normalizedContent","toLowerCase","forEach","term","regex","RegExp","concat","matches","match","length","findExactPhraseMatches","phrase","pos","indexOf","push","position","context","substr","Math","max","rankContentRelevance","criteria","relevanceScore","exactMatches","keywords","termScores","Object","values","reduce","a","b","min","analyzeContentQuestionRatio","questionCount","contentLength","averageContentPerQuestion","expectedQuestions","ceil","actualQuestions","ratio","isAdequate","estimateContentCoverage","questions","contentParagraphs","split","coveredParagraphs","Set","question","paragraph","index","includes","text","add","totalParagraphs","size","coveragePercentage"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/content-processing/index.js"],"sourcesContent":["/**\r\n * Content Processing Algorithms Module\r\n */\r\n\r\n/**\r\n * Scores term frequency in content\r\n * @param {string} content - Content to analyze\r\n * @param {string[]} terms - Terms to look for\r\n * @returns {Object} Term frequency scores\r\n */\r\nexport function scoreTermFrequency(content, terms) {\r\n  const scores = {};\r\n  const normalizedContent = content.toLowerCase();\r\n  \r\n  terms.forEach(term => {\r\n    const regex = new RegExp(`\\\\b${term}\\\\b`, 'g');\r\n    const matches = normalizedContent.match(regex);\r\n    scores[term] = matches ? matches.length : 0;\r\n  });\r\n  \r\n  return scores;\r\n}\r\n\r\n/**\r\n * Finds exact phrase matches in content\r\n * @param {string} content - Content to search in\r\n * @param {string} phrase - Phrase to match\r\n * @returns {Array} Array of matches with their positions\r\n */\r\nexport function findExactPhraseMatches(content, phrase) {\r\n  const matches = [];\r\n  let pos = content.toLowerCase().indexOf(phrase.toLowerCase());\r\n  \r\n  while (pos !== -1) {\r\n    matches.push({\r\n      position: pos,\r\n      context: content.substr(Math.max(0, pos - 50), 100)\r\n    });\r\n    pos = content.toLowerCase().indexOf(phrase.toLowerCase(), pos + 1);\r\n  }\r\n  \r\n  return matches;\r\n}\r\n\r\n/**\r\n * Ranks content relevance based on multiple factors\r\n * @param {string} content - Content to analyze\r\n * @param {Object} criteria - Ranking criteria\r\n * @returns {number} Relevance score\r\n */\r\nexport function rankContentRelevance(content, criteria) {\r\n  let relevanceScore = 0;\r\n  \r\n  // Score exact phrase matches\r\n  if (criteria.phrase) {\r\n    const exactMatches = findExactPhraseMatches(content, criteria.phrase);\r\n    relevanceScore += exactMatches.length * 15;\r\n  }\r\n  \r\n  // Score keyword matches\r\n  if (criteria.keywords) {\r\n    const termScores = scoreTermFrequency(content, criteria.keywords);\r\n    relevanceScore += Object.values(termScores).reduce((a, b) => a + b, 0) * 2;\r\n  }\r\n  \r\n  return Math.min(relevanceScore, 100);\r\n}\r\n\r\n/**\r\n * Analyzes content-to-question ratio\r\n * @param {string} content - Content to analyze\r\n * @param {number} questionCount - Number of questions\r\n * @returns {Object} Analysis results\r\n */\r\nexport function analyzeContentQuestionRatio(content, questionCount) {\r\n  const contentLength = content.length;\r\n  const averageContentPerQuestion = 500; // baseline characters per question\r\n  const expectedQuestions = Math.ceil(contentLength / averageContentPerQuestion);\r\n  \r\n  return {\r\n    contentLength,\r\n    expectedQuestions,\r\n    actualQuestions: questionCount,\r\n    ratio: questionCount / expectedQuestions,\r\n    isAdequate: questionCount <= expectedQuestions\r\n  };\r\n}\r\n\r\n/**\r\n * Estimates content coverage\r\n * @param {string} content - Content to analyze\r\n * @param {Array} questions - Array of questions\r\n * @returns {Object} Coverage analysis\r\n */\r\nexport function estimateContentCoverage(content, questions) {\r\n  const contentParagraphs = content.split(/\\n\\s*\\n/);\r\n  const coveredParagraphs = new Set();\r\n  \r\n  questions.forEach(question => {\r\n    contentParagraphs.forEach((paragraph, index) => {\r\n      if (paragraph.toLowerCase().includes(question.text.toLowerCase())) {\r\n        coveredParagraphs.add(index);\r\n      }\r\n    });\r\n  });\r\n  \r\n  return {\r\n    totalParagraphs: contentParagraphs.length,\r\n    coveredParagraphs: coveredParagraphs.size,\r\n    coveragePercentage: (coveredParagraphs.size / contentParagraphs.length) * 100\r\n  };\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}