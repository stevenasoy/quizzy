{"ast":null,"code":"import _slicedToArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\r\n * Question Management Module\r\n */\n\n/**\r\n * Implements Fisher-Yates shuffle algorithm\r\n * @param {Array} array - Array to shuffle\r\n * @returns {Array} Shuffled array\r\n */\nexport function shuffleQuestions(array) {\n  var shuffled = _toConsumableArray(array);\n  for (var i = shuffled.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var _ref = [shuffled[j], shuffled[i]];\n    shuffled[i] = _ref[0];\n    shuffled[j] = _ref[1];\n  }\n  return shuffled;\n}\n\n/**\r\n * Distributes questions by difficulty\r\n * @param {Array} questions - Array of questions\r\n * @param {number} targetCount - Desired number of questions\r\n * @returns {Array} Balanced question set\r\n */\nexport function distributeByDifficulty(questions, targetCount) {\n  // Default distribution\n  var distribution = {\n    easy: 0.4,\n    medium: 0.4,\n    hard: 0.2\n  };\n\n  // Calculate targets for each difficulty\n  var targets = {\n    easy: Math.round(targetCount * distribution.easy),\n    medium: Math.round(targetCount * distribution.medium),\n    hard: Math.round(targetCount * distribution.hard)\n  };\n  var selectedQuestions = [];\n\n  // Select questions by difficulty\n  Object.entries(targets).forEach(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      difficulty = _ref3[0],\n      count = _ref3[1];\n    var difficultyQuestions = questions.filter(function (q) {\n      return q.difficulty === difficulty && !selectedQuestions.includes(q);\n    });\n\n    // Shuffle to randomize selection\n    var shuffled = shuffleQuestions(difficultyQuestions);\n    selectedQuestions.push.apply(selectedQuestions, _toConsumableArray(shuffled.slice(0, count)));\n  });\n\n  // If we don't have enough questions of the right difficulties,\n  // fill in with whatever questions are available\n  while (selectedQuestions.length < targetCount && questions.length > selectedQuestions.length) {\n    var remainingQuestions = questions.filter(function (q) {\n      return !selectedQuestions.includes(q);\n    });\n    var shuffled = shuffleQuestions(remainingQuestions);\n    selectedQuestions.push(shuffled[0]);\n  }\n  return selectedQuestions;\n}","map":{"version":3,"names":["shuffleQuestions","array","shuffled","_toConsumableArray","i","length","j","Math","floor","random","_ref","distributeByDifficulty","questions","targetCount","distribution","easy","medium","hard","targets","round","selectedQuestions","Object","entries","forEach","_ref2","_ref3","_slicedToArray","difficulty","count","difficultyQuestions","filter","q","includes","push","apply","slice","remainingQuestions"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/question-management/index.js"],"sourcesContent":["/**\r\n * Question Management Module\r\n */\r\n\r\n/**\r\n * Implements Fisher-Yates shuffle algorithm\r\n * @param {Array} array - Array to shuffle\r\n * @returns {Array} Shuffled array\r\n */\r\nexport function shuffleQuestions(array) {\r\n  const shuffled = [...array];\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n}\r\n\r\n/**\r\n * Distributes questions by difficulty\r\n * @param {Array} questions - Array of questions\r\n * @param {number} targetCount - Desired number of questions\r\n * @returns {Array} Balanced question set\r\n */\r\nexport function distributeByDifficulty(questions, targetCount) {\r\n  // Default distribution\r\n  const distribution = { easy: 0.4, medium: 0.4, hard: 0.2 };\r\n  \r\n  // Calculate targets for each difficulty\r\n  const targets = {\r\n    easy: Math.round(targetCount * distribution.easy),\r\n    medium: Math.round(targetCount * distribution.medium),\r\n    hard: Math.round(targetCount * distribution.hard)\r\n  };\r\n  \r\n  const selectedQuestions = [];\r\n  \r\n  // Select questions by difficulty\r\n  Object.entries(targets).forEach(([difficulty, count]) => {\r\n    const difficultyQuestions = questions.filter(q => \r\n      q.difficulty === difficulty && !selectedQuestions.includes(q)\r\n    );\r\n    \r\n    // Shuffle to randomize selection\r\n    const shuffled = shuffleQuestions(difficultyQuestions);\r\n    selectedQuestions.push(...shuffled.slice(0, count));\r\n  });\r\n  \r\n  // If we don't have enough questions of the right difficulties,\r\n  // fill in with whatever questions are available\r\n  while (selectedQuestions.length < targetCount && questions.length > selectedQuestions.length) {\r\n    const remainingQuestions = questions.filter(q => !selectedQuestions.includes(q));\r\n    const shuffled = shuffleQuestions(remainingQuestions);\r\n    selectedQuestions.push(shuffled[0]);\r\n  }\r\n  \r\n  return selectedQuestions;\r\n}\r\n\r\n "],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAgBA,CAACC,KAAK,EAAE;EACtC,IAAMC,QAAQ,GAAAC,kBAAA,CAAOF,KAAK,CAAC;EAC3B,KAAK,IAAIG,CAAC,GAAGF,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5C,IAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;IAAC,IAAAM,IAAA,GACjB,CAACR,QAAQ,CAACI,CAAC,CAAC,EAAEJ,QAAQ,CAACE,CAAC,CAAC,CAAC;IAAtDF,QAAQ,CAACE,CAAC,CAAC,GAAAM,IAAA;IAAER,QAAQ,CAACI,CAAC,CAAC,GAAAI,IAAA;EAC3B;EACA,OAAOR,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,sBAAsBA,CAACC,SAAS,EAAEC,WAAW,EAAE;EAC7D;EACA,IAAMC,YAAY,GAAG;IAAEC,IAAI,EAAE,GAAG;IAAEC,MAAM,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC;;EAE1D;EACA,IAAMC,OAAO,GAAG;IACdH,IAAI,EAAER,IAAI,CAACY,KAAK,CAACN,WAAW,GAAGC,YAAY,CAACC,IAAI,CAAC;IACjDC,MAAM,EAAET,IAAI,CAACY,KAAK,CAACN,WAAW,GAAGC,YAAY,CAACE,MAAM,CAAC;IACrDC,IAAI,EAAEV,IAAI,CAACY,KAAK,CAACN,WAAW,GAAGC,YAAY,CAACG,IAAI;EAClD,CAAC;EAED,IAAMG,iBAAiB,GAAG,EAAE;;EAE5B;EACAC,MAAM,CAACC,OAAO,CAACJ,OAAO,CAAC,CAACK,OAAO,CAAC,UAAAC,KAAA,EAAyB;IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,KAAA;MAAvBG,UAAU,GAAAF,KAAA;MAAEG,KAAK,GAAAH,KAAA;IACjD,IAAMI,mBAAmB,GAAGjB,SAAS,CAACkB,MAAM,CAAC,UAAAC,CAAC;MAAA,OAC5CA,CAAC,CAACJ,UAAU,KAAKA,UAAU,IAAI,CAACP,iBAAiB,CAACY,QAAQ,CAACD,CAAC,CAAC;IAAA,CAC/D,CAAC;;IAED;IACA,IAAM7B,QAAQ,GAAGF,gBAAgB,CAAC6B,mBAAmB,CAAC;IACtDT,iBAAiB,CAACa,IAAI,CAAAC,KAAA,CAAtBd,iBAAiB,EAAAjB,kBAAA,CAASD,QAAQ,CAACiC,KAAK,CAAC,CAAC,EAAEP,KAAK,CAAC,EAAC;EACrD,CAAC,CAAC;;EAEF;EACA;EACA,OAAOR,iBAAiB,CAACf,MAAM,GAAGQ,WAAW,IAAID,SAAS,CAACP,MAAM,GAAGe,iBAAiB,CAACf,MAAM,EAAE;IAC5F,IAAM+B,kBAAkB,GAAGxB,SAAS,CAACkB,MAAM,CAAC,UAAAC,CAAC;MAAA,OAAI,CAACX,iBAAiB,CAACY,QAAQ,CAACD,CAAC,CAAC;IAAA,EAAC;IAChF,IAAM7B,QAAQ,GAAGF,gBAAgB,CAACoC,kBAAkB,CAAC;IACrDhB,iBAAiB,CAACa,IAAI,CAAC/B,QAAQ,CAAC,CAAC,CAAC,CAAC;EACrC;EAEA,OAAOkB,iBAAiB;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}