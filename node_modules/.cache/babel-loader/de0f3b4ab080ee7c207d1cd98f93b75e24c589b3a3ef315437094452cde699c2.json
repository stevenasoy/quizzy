{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, withModifiers as _withModifiers, withKeys as _withKeys, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, normalizeClass as _normalizeClass, createBlock as _createBlock, createStaticVNode as _createStaticVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"app-container\"\n};\nvar _hoisted_2 = {\n  \"class\": \"main-content\"\n};\nvar _hoisted_3 = {\n  \"class\": \"upload-container\"\n};\nvar _hoisted_4 = {\n  key: 0,\n  \"class\": \"quiz-details-container\"\n};\nvar _hoisted_5 = {\n  key: 1,\n  \"class\": \"file-upload-section\"\n};\nvar _hoisted_6 = {\n  key: 0,\n  \"class\": \"error-section\"\n};\nvar _hoisted_7 = {\n  key: 1,\n  \"class\": \"selected-files\"\n};\nvar _hoisted_8 = {\n  \"class\": \"file-name\"\n};\nvar _hoisted_9 = [\"onClick\"];\nvar _hoisted_10 = {\n  \"class\": \"questions-section\"\n};\nvar _hoisted_11 = {\n  \"class\": \"question-input\"\n};\nvar _hoisted_12 = [\"disabled\"];\nvar _hoisted_13 = {\n  key: 2\n};\nvar _hoisted_14 = {\n  \"class\": \"predicted-score-container\"\n};\nvar _hoisted_15 = {\n  \"class\": \"score-prediction\"\n};\nvar _hoisted_16 = {\n  \"class\": \"predicted-value\"\n};\nvar _hoisted_17 = {\n  \"class\": \"prediction-explanation\"\n};\nvar _hoisted_18 = {\n  key: 5,\n  \"class\": \"error-message\"\n};\nvar _hoisted_19 = {\n  key: 0,\n  \"class\": \"loading-overlay\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"Sidebar\"], {\n    \"quiz-history\": $setup.quizHistory,\n    onCreateQuiz: $setup.handleCreateQuiz,\n    onRetakeQuiz: $setup.handleRetakeQuiz,\n    onClearHistory: $setup.clearHistory,\n    onSelectQuiz: $setup.handleQuizSelect\n  }, null, 8 /* PROPS */, [\"quiz-history\"]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[9] || (_cache[9] = _createElementVNode(\"h1\", null, \"QUIZZy\", -1 /* HOISTED */)), $setup.selectedQuiz ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode($setup[\"QuizHistoryDetails\"], {\n    quiz: $setup.selectedQuiz,\n    onRetakeQuiz: $setup.handleRetakeQuiz,\n    onClose: _cache[0] || (_cache[0] = function ($event) {\n      return $setup.selectedQuiz = null;\n    })\n  }, null, 8 /* PROPS */, [\"quiz\"])])) : !$setup.quizStarted && !$setup.quizFinished && $setup.predictedScore === null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_cache[6] || (_cache[6] = _createElementVNode(\"h2\", null, \"Upload Files\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    \"class\": \"upload-area\",\n    onDragover: _cache[1] || (_cache[1] = _withModifiers(function () {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleDrop, [\"prevent\"]),\n    onClick: $setup.triggerFileInput,\n    role: \"button\",\n    tabindex: \"0\",\n    onKeydown: _withKeys($setup.triggerFileInput, [\"enter\"])\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: $setup.handleFileSelect,\n    accept: \".pdf,.docx,.pptx,.txt\",\n    ref: \"fileInput\",\n    \"class\": \"file-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _cache[3] || (_cache[3] = _createStaticVNode(\"<div class=\\\"upload-prompt\\\" data-v-7ba5bd90><p data-v-7ba5bd90>Drag and drop files here or click to select</p><div class=\\\"supported-formats\\\" data-v-7ba5bd90><p data-v-7ba5bd90>Supported formats:</p><ul data-v-7ba5bd90><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìÑ</span> Documents (PDF, DOCX)</li><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìä</span> Presentations (PPTX)</li><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìù</span> Text files (TXT)</li></ul></div></div>\", 1))], 32 /* NEED_HYDRATION */), $setup.hasFileErrors ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createVNode($setup[\"FileErrorDisplay\"], {\n    \"extraction-errors\": $setup.extractionErrors,\n    \"unsupported-files\": $setup.unsupportedFiles\n  }, null, 8 /* PROPS */, [\"extraction-errors\", \"unsupported-files\"])])) : _createCommentVNode(\"v-if\", true), $setup.selectedFiles.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Selected Files:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedFiles, function (file, index) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      \"class\": \"file-item\"\n    }, [_createElementVNode(\"span\", _hoisted_8, _toDisplayString(file.name), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: function onClick($event) {\n        return $setup.removeFile(index);\n      },\n      \"class\": \"remove-btn\",\n      title: \"Remove file\"\n    }, \"√ó\", 8 /* PROPS */, _hoisted_9)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_10, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Number of Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n      return $setup.questionCount = $event;\n    }),\n    min: \"1\",\n    max: \"20\",\n    placeholder: \"Enter number of questions\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.questionCount]])])]), _createElementVNode(\"button\", {\n    \"class\": \"submit-btn\",\n    disabled: !$setup.isFormValid || $setup.isLoading,\n    onClick: $setup.handleSubmit\n  }, _toDisplayString($setup.isLoading ? 'Generating Questions...' : 'Submit'), 9 /* TEXT, PROPS */, _hoisted_12)])) : _createCommentVNode(\"v-if\", true), $setup.predictedScore !== null && !$setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Ready to Start!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"div\", {\n    \"class\": _normalizeClass([\"score-circle\", $setup.getPredictedScoreClass])\n  }, [_createElementVNode(\"span\", _hoisted_16, _toDisplayString($setup.predictedScore) + \"%\", 1 /* TEXT */), _cache[7] || (_cache[7] = _createElementVNode(\"span\", {\n    \"class\": \"prediction-label\"\n  }, \"Predicted Score\", -1 /* HOISTED */))], 2 /* CLASS */)]), _createElementVNode(\"p\", _hoisted_17, \" Based on your study material, we predict you'll score around \" + _toDisplayString($setup.predictedScore) + \"%. \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    \"class\": \"start-quiz-btn\",\n    onClick: $setup.startQuiz\n  }, \"Start Quiz\")])])) : _createCommentVNode(\"v-if\", true), $setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createBlock($setup[\"FlashcardQuiz\"], {\n    key: 3,\n    questions: $setup.adaptiveQuestions,\n    \"total-questions\": Number($setup.questionCount),\n    onQuizCompleted: $setup.handleQuizComplete\n  }, null, 8 /* PROPS */, [\"questions\", \"total-questions\"])) : _createCommentVNode(\"v-if\", true), $setup.quizFinished ? (_openBlock(), _createBlock($setup[\"QuizResults\"], {\n    key: 4,\n    questions: $setup.formatQuestionsForResults,\n    \"user-answers\": $setup.formatUserAnswersForResults,\n    score: $setup.correctAnswersCount,\n    \"predicted-score\": $setup.predictedScore,\n    onRestart: $setup.restartQuiz,\n    onGoBack: $setup.resetToMainScreen\n  }, null, 8 /* PROPS */, [\"questions\", \"user-answers\", \"score\", \"predicted-score\"])) : _createCommentVNode(\"v-if\", true), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])]), _createCommentVNode(\" Loading Overlay \"), $setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, _cache[10] || (_cache[10] = [_createElementVNode(\"div\", {\n    \"class\": \"loading-content\"\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"typewriter\"\n  }, \"Generating quiz\"), _createElementVNode(\"div\", {\n    \"class\": \"dots\"\n  }, [_createElementVNode(\"span\", null, \".\"), _createElementVNode(\"span\", null, \".\"), _createElementVNode(\"span\", null, \".\")])], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createVNode","$setup","quizHistory","onCreateQuiz","handleCreateQuiz","onRetakeQuiz","handleRetakeQuiz","onClearHistory","clearHistory","onSelectQuiz","handleQuizSelect","_createElementVNode","_hoisted_2","_hoisted_3","selectedQuiz","_hoisted_4","quiz","onClose","_cache","$event","quizStarted","quizFinished","predictedScore","_hoisted_5","onDragover","_withModifiers","onDrop","handleDrop","onClick","triggerFileInput","role","tabindex","onKeydown","_withKeys","type","onChange","handleFileSelect","accept","ref","hasFileErrors","_hoisted_6","extractionErrors","unsupportedFiles","selectedFiles","length","_hoisted_7","_Fragment","_renderList","file","index","key","_hoisted_8","_toDisplayString","name","removeFile","title","_hoisted_9","_hoisted_10","_hoisted_11","questionCount","min","max","placeholder","disabled","isFormValid","isLoading","handleSubmit","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_normalizeClass","getPredictedScoreClass","_hoisted_16","_hoisted_17","startQuiz","_createBlock","questions","adaptiveQuestions","Number","onQuizCompleted","handleQuizComplete","formatQuestionsForResults","formatUserAnswersForResults","score","correctAnswersCount","onRestart","restartQuiz","onGoBack","resetToMainScreen","error","_hoisted_18","_createCommentVNode","_hoisted_19"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <Sidebar \n      :quiz-history=\"quizHistory\" \n      @create-quiz=\"handleCreateQuiz\"\n      @retake-quiz=\"handleRetakeQuiz\"\n      @clear-history=\"clearHistory\"\n      @select-quiz=\"handleQuizSelect\"\n    />\n    <div class=\"main-content\">\n      <div class=\"upload-container\">\n        <h1>QUIZZy</h1>\n        \n        <div v-if=\"selectedQuiz\" class=\"quiz-details-container\">\n          <QuizHistoryDetails\n            :quiz=\"selectedQuiz\"\n            @retake-quiz=\"handleRetakeQuiz\"\n            @close=\"selectedQuiz = null\"\n          />\n        </div>\n\n        <div v-else-if=\"!quizStarted && !quizFinished && predictedScore === null\" class=\"file-upload-section\">\n          <h2>Upload Files</h2>\n          <div class=\"upload-area\" \n            @dragover.prevent \n            @drop.prevent=\"handleDrop\"\n            @click=\"triggerFileInput\"\n            role=\"button\"\n            tabindex=\"0\"\n            @keydown.enter=\"triggerFileInput\"\n          >\n            <input \n              type=\"file\" \n              @change=\"handleFileSelect\" \n              accept=\".pdf,.docx,.pptx,.txt\"\n              ref=\"fileInput\"\n              class=\"file-input\"\n            >\n            <div class=\"upload-prompt\">\n              <p>Drag and drop files here or click to select</p>\n              <div class=\"supported-formats\">\n                <p>Supported formats:</p>\n                <ul>\n                  <li><span class=\"format-icon\">üìÑ</span> Documents (PDF, DOCX)</li>\n                  <li><span class=\"format-icon\">üìä</span> Presentations (PPTX)</li>\n                  <li><span class=\"format-icon\">üìù</span> Text files (TXT)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"hasFileErrors\" class=\"error-section\">\n            <FileErrorDisplay\n              :extraction-errors=\"extractionErrors\"\n              :unsupported-files=\"unsupportedFiles\"\n            />\n          </div>\n\n          <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n            <h3>Selected Files:</h3>\n            <ul>\n              <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n                <span class=\"file-name\">{{ file.name }}</span>\n                <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">√ó</button>\n              </li>\n            </ul>\n          </div>\n\n          <div class=\"questions-section\">\n            <h2>Number of Questions</h2>\n            <div class=\"question-input\">\n              <input\n                type=\"number\"\n                v-model=\"questionCount\"\n                min=\"1\"\n                max=\"20\"\n                placeholder=\"Enter number of questions\"\n              />\n            </div>\n          </div>\n\n          <button \n            class=\"submit-btn\" \n            :disabled=\"!isFormValid || isLoading\"\n            @click=\"handleSubmit\"\n          >\n            {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n          </button>\n        </div>\n\n        <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n          <div class=\"predicted-score-container\">\n            <h2>Ready to Start!</h2>\n            <div class=\"score-prediction\">\n              <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n                <span class=\"predicted-value\">{{ predictedScore }}%</span>\n                <span class=\"prediction-label\">Predicted Score</span>\n              </div>\n            </div>\n            <p class=\"prediction-explanation\">\n              Based on your study material, we predict you'll score around {{ predictedScore }}%.\n            </p>\n            <button class=\"start-quiz-btn\" @click=\"startQuiz\">Start Quiz</button>\n          </div>\n        </div>\n\n        <FlashcardQuiz\n          v-if=\"quizStarted && !quizFinished\"\n          :questions=\"adaptiveQuestions\"\n          :total-questions=\"Number(questionCount)\"\n          @quiz-completed=\"handleQuizComplete\"\n        />\n\n        <QuizResults\n          v-if=\"quizFinished\"\n          :questions=\"formatQuestionsForResults\"\n          :user-answers=\"formatUserAnswersForResults\"\n          :score=\"correctAnswersCount\"\n          :predicted-score=\"predictedScore\"\n          @restart=\"restartQuiz\"\n          @go-back=\"resetToMainScreen\"\n        />\n\n        <div v-if=\"error\" class=\"error-message\">\n          {{ error }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading Overlay -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <div class=\"loading-content\">\n        <div class=\"typewriter\">Generating quiz</div>\n        <div class=\"dots\">\n          <span>.</span>\n          <span>.</span>\n          <span>.</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport QuizHistoryDetails from './components/QuizHistoryDetails.vue';\n\n// File handling state\nconst selectedFiles = ref([]);\nconst fileInput = ref(null);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\n\n// Quiz state\nconst questionCount = ref('');\nconst isLoading = ref(false);\nconst error = ref('');\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst quizFinished = ref(false);\nconst adaptiveQuestions = ref([]);\nconst userResponses = ref([]);\nconst extractedContent = ref('');\nconst selectedQuiz = ref(null);\n\n// Add quiz history state\nconst quizHistory = ref([]);\n\n// Add isRetaking flag to track retakes\nconst isRetaking = ref(false);\nconst retakeIndex = ref(-1);\n\n// Load quiz history from localStorage on mount\nonMounted(() => {\n  const savedHistory = localStorage.getItem('quizHistory');\n  if (savedHistory) {\n    quizHistory.value = JSON.parse(savedHistory);\n  }\n});\n\n// Computed properties\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n\n// File handling methods\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\n// Quiz handling methods\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  userResponses.value = [];\n  extractedContent.value = '';\n  extractionErrors.value = [];\n\n  try {\n    console.log('Processing files:', selectedFiles.value.map(f => ({ name: f.name, type: f.type })));\n    \n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    const validContents = fileContents.filter(content => content && content.trim().length > 0);\n    console.log('Number of files with valid content:', validContents.length);\n    \n    if (validContents.length === 0) {\n      throw new Error('No valid content could be extracted from the selected files.');\n    }\n\n    extractedContent.value = validContents.join('\\n\\n');\n    console.log('Total content length:', extractedContent.value.length);\n    \n    if (extractedContent.value.trim().length < 50) {\n      throw new Error('The extracted content is too short to generate meaningful questions.');\n    }\n\n    const requestedQuestionCount = Number(questionCount.value);\n    console.log('Requesting questions:', requestedQuestionCount);\n    \n    const questions = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    \n    if (!questions || questions.length === 0) {\n      throw new Error('No valid questions could be generated.');\n    }\n\n    console.log('Generated questions:', questions.length);\n    adaptiveQuestions.value = questions;\n    predictedScore.value = calculatePredictedScore();\n\n  } catch (err) {\n    console.error('Error in handleSubmit:', err);\n    error.value = err.message || 'An unexpected error occurred while generating questions.';\n    adaptiveQuestions.value = [];\n    predictedScore.value = null;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n};\n\nconst handleQuizComplete = (responses) => {\n  userResponses.value = responses;\n  // Update the adaptiveQuestions with user answers\n  adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => ({\n    ...question,\n    userAnswer: responses[index]?.userAnswer,\n    isCorrect: responses[index]?.correct\n  }));\n  quizFinished.value = true;\n  saveQuizResults();\n};\n\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  userResponses.value = [];\n};\n\nconst resetToMainScreen = () => {\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\n// Helper functions\nasync function readFileContent(file) {\n  return new Promise((resolve) => {\n    try {\n      console.log('File type:', file.type);\n      console.log('File name:', file.name);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n      .then(res => res.json())\n      .then(data => {\n        if (data.text) {\n          resolve(data.text);\n        } else {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: data.error || 'Failed to extract text from file'\n          });\n          resolve('');\n        }\n      })\n      .catch(error => {\n        console.error('Error processing file:', error);\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: `Error processing file: ${error.message}`\n        });\n        resolve('');\n      });\n    } catch (error) {\n      console.error('Error preparing file:', error);\n      extractionErrors.value.push({\n        fileName: file.name,\n        message: `Error preparing file: ${error.message}`\n      });\n      resolve('');\n    }\n  });\n}\n\nasync function generateQuestions(content, count) {\n  const maxRetries = 3;\n  let retryCount = 0;\n  let allQuestions = [];\n\n  while (retryCount < maxRetries && allQuestions.length < count) {\n    try {\n      const remainingCount = count - allQuestions.length;\n      const strategy = retryCount % 3;\n      let prompt = `Generate exactly ${remainingCount} questions. DO NOT use markdown formatting or asterisks for emphasis.\nFOLLOW THIS EXACT FORMAT WITH NO DEVIATIONS:\n\nFor Multiple Choice Questions:\nQuestion: What is the question text?\nA) First option\nB) Second option\nC) Third option\nD) Fourth option\nAnswer: A* (or B*, C*, D* - add asterisk to correct answer)\nDifficulty: easy (or medium or hard)\n\nFor True/False Questions:\nTrue/False: What is the question text?\nAnswer: True* (or False* - add asterisk to correct answer)\nDifficulty: easy (or medium or hard)\n\nREQUIREMENTS:\n1. Use the exact format shown above\n2. Do not add any extra formatting or text\n3. Do not use markdown\n4. Do not use bold or italics\n5. Each question must end with a difficulty level\n6. Questions must be based on this content:\n\n${content}\n\nSTRATEGY: `;\n\n      switch (strategy) {\n        case 0:\n          prompt += 'Create a mix of multiple-choice and true/false questions that directly test understanding of the content.';\n          break;\n        case 1:\n          prompt += 'Create questions that focus on what is NOT mentioned or opposite relationships in the content.';\n          break;\n        case 2:\n          prompt += 'Create questions that test application and inference of the concepts mentioned in the content.';\n          break;\n      }\n\n      const response = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n        {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7 + (retryCount * 0.1),\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 2048,\n          }\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (!response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {\n        throw new Error('Invalid response format from Gemini API');\n      }\n\n      const responseText = response.data.candidates[0].content.parts[0].text\n        .replace(/\\*\\*/g, '') // Remove markdown bold\n        .replace(/\\*/g, '*')  // Normalize asterisks\n        .replace(/[\"\"]/g, '\"'); // Normalize quotes\n\n      console.log('Generated response:', responseText);\n\n      const newQuestions = processQuizResponse(responseText, content).questions;\n      \n      if (newQuestions.length === 0) {\n        console.error('No valid questions parsed from response');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        continue;\n      }\n\n      const uniqueNewQuestions = newQuestions.filter(newQ => \n        !allQuestions.some(existingQ => isSimilarQuestion(newQ, existingQ))\n      );\n\n      allQuestions = [...allQuestions, ...uniqueNewQuestions];\n      \n      if (allQuestions.length >= count) {\n        return allQuestions.slice(0, count);\n      }\n\n      retryCount++;\n\n    } catch (error) {\n      console.error(`Attempt ${retryCount + 1} failed:`, error);\n      retryCount++;\n      \n      if (error.response?.status === 429) {\n        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n      } else if (retryCount === maxRetries) {\n        throw new Error(`Failed to generate enough unique questions after ${maxRetries} attempts. ${error.response?.data?.error?.message || error.message}`);\n      } else {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  if (allQuestions.length < count) {\n    throw new Error(`Could only generate ${allQuestions.length} unique questions out of ${count} requested. Please try with different content or reduce the number of questions.`);\n  }\n\n  return allQuestions;\n}\n\nfunction processQuizResponse(response, content) {\n  const questions = [];\n  let currentQuestion = null;\n  \n  // Split by double newlines to separate questions\n  const sections = response.split(/\\n\\s*\\n/);\n  \n  for (const section of sections) {\n    const lines = section.split('\\n');\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (!line) continue;\n\n      // Check for question start\n      if (line.startsWith('Question:') || line.startsWith('True/False:')) {\n        if (currentQuestion) {\n          questions.push(currentQuestion);\n        }\n\n        const isMultipleChoice = line.startsWith('Question:');\n        currentQuestion = {\n          text: line.replace(/^(Question:|True\\/False:)/i, '').trim(),\n          type: isMultipleChoice ? 'multiple-choice' : 'true-false',\n          options: isMultipleChoice ? {} : { 'true': 'True', 'false': 'False' },\n          correctAnswer: '',\n          explanation: '',\n          difficulty: 'medium'\n        };\n        continue;\n      }\n\n      if (!currentQuestion) continue;\n\n      // Handle options for multiple choice\n      if (currentQuestion.type === 'multiple-choice') {\n        const optionMatch = line.match(/^([A-D])[).]\\s*(.*)/i);\n        if (optionMatch) {\n          const letter = optionMatch[1].toUpperCase();\n          let option = optionMatch[2].trim();\n          currentQuestion.options[letter] = option;\n        }\n        \n        // Check for answer line\n        if (line.startsWith('Answer:')) {\n          const answerMatch = line.match(/Answer:\\s*([A-D])\\*/i);\n          if (answerMatch) {\n            currentQuestion.correctAnswer = answerMatch[1].toUpperCase();\n          }\n        }\n      }\n\n      // Handle true/false answer\n      if (currentQuestion.type === 'true-false' && line.startsWith('Answer:')) {\n        const answer = line.toLowerCase();\n        if (answer.includes('true*')) {\n          currentQuestion.correctAnswer = 'true';\n        } else if (answer.includes('false*')) {\n          currentQuestion.correctAnswer = 'false';\n        }\n      }\n\n      // Handle difficulty\n      if (line.startsWith('Difficulty:')) {\n        const difficulty = line.substring(11).trim().toLowerCase();\n        if (['easy', 'medium', 'hard'].includes(difficulty)) {\n          currentQuestion.difficulty = difficulty;\n        }\n      }\n    }\n  }\n\n  // Add the last question if exists\n  if (currentQuestion) {\n    questions.push(currentQuestion);\n  }\n\n  // Validate questions\n  const validQuestions = questions.filter(q => {\n    // Basic validation\n    if (!q.text || !q.type) return false;\n\n    // Validate multiple choice questions\n    if (q.type === 'multiple-choice') {\n      const hasEnoughOptions = Object.keys(q.options).length >= 2;\n      const hasCorrectAnswer = !!q.correctAnswer && !!q.options[q.correctAnswer];\n      return hasEnoughOptions && hasCorrectAnswer;\n    }\n\n    // Validate true/false questions\n    if (q.type === 'true-false') {\n      return q.correctAnswer === 'true' || q.correctAnswer === 'false';\n    }\n\n    return false;\n  });\n\n  if (validQuestions.length === 0) {\n    console.error('Raw response:', response);\n    console.error('Parsed questions:', questions);\n    throw new Error('No valid questions could be generated from the content.');\n  }\n\n  // Add explanations from content\n  validQuestions.forEach(q => findExplanationFromContent(q, content));\n\n  return { questions: validQuestions };\n}\n\nfunction findExplanationFromContent(question, content) {\n  // Split content into paragraphs\n  const paragraphs = content.split(/\\n\\s*\\n/);\n  \n  // Create search terms from the question and answer\n  const searchTerms = [\n    ...question.text.toLowerCase().replace(/[.,?!]/g, '').split(' '),\n    ...(question.type === 'multiple-choice' && question.options[question.correctAnswer] \n      ? question.options[question.correctAnswer].toLowerCase().split(' ') \n      : [])\n  ].filter(word => word.length > 3);\n  \n  // Find relevant paragraphs with scoring\n  const relevantParagraphs = paragraphs.map(paragraph => {\n    const normalizedParagraph = paragraph.toLowerCase();\n    let score = 0;\n    \n    // Score exact phrase matches higher\n    if (normalizedParagraph.includes(question.text.toLowerCase())) {\n      score += 15;\n    }\n    \n    // Score keyword matches\n    searchTerms.forEach(term => {\n      if (normalizedParagraph.includes(term)) {\n        score += 2;\n      }\n    });\n\n    return {\n      text: paragraph.trim(),\n      score\n    };\n  }).filter(p => p.score > 0)\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 1); // Get most relevant paragraph\n\n  if (relevantParagraphs.length > 0) {\n    question.explanation = relevantParagraphs[0].text;\n  } else {\n    // Basic fallback explanations\n    if (question.type === 'true-false') {\n      const isTrue = question.correctAnswer === 'true';\n      question.explanation = `This statement is ${isTrue ? 'true' : 'false'} based on the provided content.`;\n    } else {\n      const correctOption = question.options[question.correctAnswer];\n      question.explanation = `The correct answer is \"${correctOption}\" according to the material.`;\n    }\n  }\n}\n\nfunction selectQuestions(questions) {\n  // First, shuffle all questions\n  const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);\n  \n  // Remove duplicates while preserving order\n  const uniqueQuestions = shuffledQuestions.filter((question, index, self) => \n    index === self.findIndex((q) => \n      q.text.toLowerCase().replace(/[^\\w\\s]/g, '') === \n      question.text.toLowerCase().replace(/[^\\w\\s]/g, '')\n    )\n  );\n\n  // Return all unique questions if we don't have enough\n  if (uniqueQuestions.length <= Number(questionCount.value)) {\n    return uniqueQuestions;\n  }\n\n  // Select the requested number of questions while maintaining difficulty distribution\n  const targetPerDifficulty = Math.ceil(Number(questionCount.value) / 3);\n  const selectedQuestions = [];\n  const difficultyCount = { easy: 0, medium: 0, hard: 0 };\n\n  // First pass: try to get equal distribution\n  uniqueQuestions.forEach(question => {\n    const difficulty = question.difficulty || 'medium';\n    if (difficultyCount[difficulty] < targetPerDifficulty && \n        selectedQuestions.length < Number(questionCount.value)) {\n      selectedQuestions.push(question);\n      difficultyCount[difficulty]++;\n    }\n  });\n\n  // Second pass: fill remaining slots if any\n  if (selectedQuestions.length < Number(questionCount.value)) {\n    uniqueQuestions.forEach(question => {\n      if (!selectedQuestions.includes(question) && \n          selectedQuestions.length < Number(questionCount.value)) {\n        selectedQuestions.push(question);\n      }\n    });\n  }\n\n  return selectedQuestions;\n}\n\nfunction calculatePredictedScore() {\n  const contentCoverage = analyzeContentForCoverage();\n  const contentComplexity = analyzeContentComplexity();\n  const questionDiversity = analyzeQuestionDiversity();\n  \n  // Weight factors\n  const coverageWeight = 0.4;\n  const complexityWeight = 0.3;\n  const diversityWeight = 0.3;\n  \n  // Calculate weighted score\n  const predictedScore = (\n    contentCoverage * coverageWeight +\n    contentComplexity * complexityWeight +\n    questionDiversity * diversityWeight\n  );\n  \n  return Math.max(0, Math.min(100, Math.round(predictedScore)));\n}\n\nfunction analyzeContentForCoverage() {\n  // Analyze how well the content matches with generated questions\n  const totalContent = extractedContent.value.length;\n  if (totalContent === 0) return 0;\n  \n  // Calculate coverage based on content length and number of questions\n  const averageContentPerQuestion = 500; // baseline characters per question\n  const expectedQuestions = Math.ceil(totalContent / averageContentPerQuestion);\n  const actualQuestions = Number(questionCount.value);\n  \n  const coverage = Math.min(actualQuestions / expectedQuestions, 1) * 100;\n  return coverage;\n}\n\nfunction analyzeContentComplexity() {\n  const content = extractedContent.value.toLowerCase();\n  \n  // Define complexity indicators\n  const complexityIndicators = [\n    'analyze', 'compare', 'contrast', 'evaluate', 'explain',\n    'describe', 'discuss', 'examine', 'interpret', 'justify',\n    'therefore', 'however', 'although', 'furthermore', 'consequently'\n  ];\n  \n  // Count complexity indicators\n  let complexityScore = 0;\n  complexityIndicators.forEach(indicator => {\n    const regex = new RegExp(indicator, 'g');\n    const matches = content.match(regex);\n    if (matches) {\n      complexityScore += matches.length;\n    }\n  });\n  \n  // Normalize score to 0-100 range\n  const normalizedScore = Math.min(complexityScore * 5, 100);\n  return normalizedScore;\n}\n\nfunction analyzeQuestionDiversity() {\n  if (!adaptiveQuestions.value.length) return 0;\n  \n  // Count different types of questions\n  const types = new Set(adaptiveQuestions.value.map(q => q.type));\n  const typesDiversity = (types.size / 2) * 50; // 2 is max types (multiple-choice and true-false)\n  \n  // Analyze question text similarity to ensure diverse topics\n  const questionTexts = adaptiveQuestions.value.map(q => q.text.toLowerCase());\n  let uniqueTopics = 0;\n  const processedKeywords = new Set();\n  \n  questionTexts.forEach(text => {\n    const keywords = text.split(' ')\n      .filter(word => word.length > 4) // Consider only significant words\n      .map(word => word.replace(/[^a-z]/g, '')); // Clean up words\n      \n    keywords.forEach(keyword => {\n      if (!processedKeywords.has(keyword)) {\n        uniqueTopics++;\n        processedKeywords.add(keyword);\n      }\n    });\n  });\n  \n  const topicsDiversity = Math.min(uniqueTopics / questionTexts.length * 50, 50);\n  \n  return typesDiversity + topicsDiversity;\n}\n\n// Results formatting\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    options: q.options,\n    userAnswer: userResponses.value[index]?.userAnswer,\n    correctAnswer: q.correctAnswer,\n    explanation: q.explanation,\n    isCorrect: userResponses.value[index]?.correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update the calculateScore function\nconst calculateScore = () => {\n  if (!userResponses.value.length) return 0;\n  const correctAnswers = userResponses.value.filter(r => r.correct).length;\n  return Math.round((correctAnswers / userResponses.value.length) * 100);\n};\n\n// Update the saveQuizResults function to handle retakes\nconst saveQuizResults = () => {\n  const quizResult = {\n    fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n    questionCount: Number(questionCount.value),\n    predictedScore: predictedScore.value,\n    actualScore: calculateScore(),\n    date: new Date(),\n    fileContent: extractedContent.value,\n    questions: adaptiveQuestions.value.map((q, index) => ({\n      text: q.text,\n      type: q.type,\n      options: q.options,\n      userAnswer: userResponses.value[index]?.userAnswer,\n      correctAnswer: q.correctAnswer,\n      isCorrect: userResponses.value[index]?.correct,\n      explanation: q.explanation\n    }))\n  };\n  \n  if (isRetaking.value && retakeIndex.value !== -1) {\n    // Update existing record\n    quizHistory.value[retakeIndex.value] = {\n      ...quizHistory.value[retakeIndex.value],\n      actualScore: quizResult.actualScore,\n      date: quizResult.date,\n      questions: quizResult.questions\n    };\n  } else {\n    // Add new record\n    quizHistory.value.unshift(quizResult);\n  }\n  \n  localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n  \n  // Reset retake flags\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Update the handleRetakeQuiz function to set retake flags\nconst handleRetakeQuiz = async (quizToRetake) => {\n  // Find the index of the quiz being retaken\n  retakeIndex.value = quizHistory.value.findIndex(quiz => \n    quiz.fileName === quizToRetake.fileName && \n    quiz.questionCount === quizToRetake.questionCount &&\n    quiz.fileContent === quizToRetake.fileContent\n  );\n  \n  if (retakeIndex.value === -1) {\n    console.error('Could not find original quiz to retake');\n    return;\n  }\n  \n  isRetaking.value = true;\n  \n  // Reset quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  \n  // Set the question count from the previous quiz\n  questionCount.value = quizToRetake.questionCount.toString();\n  \n  // Create a dummy file with the same name\n  const file = new File([''], quizToRetake.fileName, {\n    type: 'text/plain'\n  });\n  \n  // Set the selected file and content\n  selectedFiles.value = [file];\n  extractedContent.value = quizToRetake.fileContent;\n  \n  // Generate new quiz using the stored content\n  try {\n    isLoading.value = true;\n    const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n    \n    const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    const processedQuiz = processQuizResponse(response, extractedContent.value);\n    \n    adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n    predictedScore.value = calculatePredictedScore();\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response?.data?.error?.message || err.message}`;\n    // Reset retake flags on error\n    isRetaking.value = false;\n    retakeIndex.value = -1;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Update handleCreateQuiz to reset retake flags\nconst handleCreateQuiz = () => {\n  // Reset the quiz state\n  selectedQuiz.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  selectedFiles.value = [];\n  questionCount.value = '';\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Add the clearHistory function\nconst clearHistory = () => {\n  if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n    quizHistory.value = [];\n    localStorage.removeItem('quizHistory');\n  }\n};\n\n// Helper function to check if two questions are too similar\nfunction isSimilarQuestion(q1, q2) {\n  // Convert both questions to lowercase and remove punctuation\n  const normalize = text => text.toLowerCase().replace(/[^\\w\\s]/g, '');\n  const q1Text = normalize(q1.text);\n  const q2Text = normalize(q2.text);\n\n  // If the questions are exactly the same, they're similar\n  if (q1Text === q2Text) return true;\n\n  // If they're different types (MC vs T/F), they're not similar\n  if (q1.type !== q2.type) return false;\n\n  // For multiple choice questions, check if the options are too similar\n  if (q1.type === 'multiple-choice' && q2.type === 'multiple-choice') {\n    const q1Options = Object.values(q1.options).map(normalize);\n    const q2Options = Object.values(q2.options).map(normalize);\n    const commonOptions = q1Options.filter(opt => q2Options.includes(opt));\n    if (commonOptions.length >= 3) return true; // If 3 or more options are the same, consider them similar\n  }\n\n  // Check for word overlap ratio\n  const q1Words = new Set(q1Text.split(/\\s+/));\n  const q2Words = new Set(q2Text.split(/\\s+/));\n  const commonWords = new Set([...q1Words].filter(x => q2Words.has(x)));\n  const overlapRatio = commonWords.size / Math.min(q1Words.size, q2Words.size);\n\n  return overlapRatio > 0.7; // If more than 70% of words overlap, consider them similar\n}\n\n// Add function to handle quiz selection\nconst handleQuizSelect = (quiz) => {\n  selectedQuiz.value = quiz;\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px; /* Same as sidebar width */\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: #f5f5f5;\n  overflow-y: auto;\n}\n\n.upload-container {\n  width: 90%;\n  max-width: 800px;\n  margin: 0 auto;\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.85);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(2px);\n}\n\n.loading-content {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 2rem;\n  color: #333;\n  font-weight: 500;\n}\n\n.typewriter {\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(14) infinite;\n  border-right: 3px solid #4CAF50;\n}\n\n.dots {\n  display: flex;\n}\n\n.dots span {\n  opacity: 0;\n  animation: dot 1.5s infinite;\n  animation-fill-mode: both;\n}\n\n.dots span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.dots span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0%, 90%, 100% {\n    width: 0;\n  }\n  30%, 60% {\n    width: 14ch;\n  }\n}\n\n@keyframes dot {\n  0%, 100% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n\n.quiz-details-container {\n  width: 100%;\n  max-width: 800px;\n  margin: 0 auto;\n  position: relative;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}