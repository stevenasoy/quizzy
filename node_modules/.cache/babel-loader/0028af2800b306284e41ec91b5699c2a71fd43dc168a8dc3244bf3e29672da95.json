{"ast":null,"code":"import _objectSpread from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\n\n// File handling state\n\nexport default {\n  __name: 'App',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var selectedFiles = ref([]);\n    var fileInput = ref(null);\n    var unsupportedFiles = ref([]);\n    var extractionErrors = ref([]);\n\n    // Quiz state\n    var questionCount = ref('');\n    var isLoading = ref(false);\n    var error = ref('');\n    var predictedScore = ref(null);\n    var quizStarted = ref(false);\n    var quizFinished = ref(false);\n    var adaptiveQuestions = ref([]);\n    var userResponses = ref([]);\n    var extractedContent = ref('');\n\n    // Add quiz history state\n    var quizHistory = ref([]);\n\n    // Add isRetaking flag to track retakes\n    var isRetaking = ref(false);\n    var retakeIndex = ref(-1);\n\n    // Load quiz history from localStorage on mount\n    onMounted(function () {\n      var savedHistory = localStorage.getItem('quizHistory');\n      if (savedHistory) {\n        quizHistory.value = JSON.parse(savedHistory);\n      }\n    });\n\n    // Computed properties\n    var isFormValid = computed(function () {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    var hasFileErrors = computed(function () {\n      return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n    });\n    var getPredictedScoreClass = computed(function () {\n      if (predictedScore.value >= 80) return 'high';\n      if (predictedScore.value >= 60) return 'medium';\n      return 'low';\n    });\n\n    // File handling methods\n    var triggerFileInput = function triggerFileInput() {\n      fileInput.value.click();\n    };\n    var handleFileSelect = function handleFileSelect(event) {\n      var files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    var handleDrop = function handleDrop(event) {\n      var files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    var addFiles = function addFiles(files) {\n      var validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n      var validFiles = [];\n      var invalidFiles = [];\n      files.forEach(function (file) {\n        if (validTypes.includes(file.type)) {\n          validFiles.push(file);\n        } else {\n          invalidFiles.push(file);\n        }\n      });\n      selectedFiles.value = [].concat(_toConsumableArray(selectedFiles.value), validFiles);\n      unsupportedFiles.value = [].concat(_toConsumableArray(unsupportedFiles.value), invalidFiles);\n    };\n    var removeFile = function removeFile(index) {\n      selectedFiles.value.splice(index, 1);\n    };\n\n    // Quiz handling methods\n    var handleSubmit = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var fileContents, validContents, requestedQuestionCount, response, processedQuiz;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (isFormValid.value) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              isLoading.value = true;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n              quizStarted.value = false;\n              userResponses.value = [];\n              extractedContent.value = '';\n              extractionErrors.value = []; // Clear previous errors\n              _context.prev = 10;\n              console.log('Processing files:', selectedFiles.value.map(function (f) {\n                return {\n                  name: f.name,\n                  type: f.type\n                };\n              }));\n              _context.next = 14;\n              return Promise.all(selectedFiles.value.map(function (file) {\n                return readFileContent(file);\n              }));\n            case 14:\n              fileContents = _context.sent;\n              // Filter out empty content and join\n              validContents = fileContents.filter(function (content) {\n                return content && content.trim().length > 0;\n              });\n              console.log('Number of files with valid content:', validContents.length);\n              if (!(validContents.length === 0)) {\n                _context.next = 19;\n                break;\n              }\n              throw new Error('No valid content could be extracted from the selected files. Please check if the files contain readable text.');\n            case 19:\n              extractedContent.value = validContents.join('\\n\\n');\n              console.log('Total content length:', extractedContent.value.length);\n              if (!(extractedContent.value.trim().length < 50)) {\n                _context.next = 23;\n                break;\n              }\n              throw new Error('The extracted content is too short to generate meaningful questions. Please provide more content (at least 50 characters).');\n            case 23:\n              requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n              console.log('Requesting questions:', requestedQuestionCount);\n              _context.next = 27;\n              return generateQuestions(extractedContent.value, requestedQuestionCount);\n            case 27:\n              response = _context.sent;\n              if (response) {\n                _context.next = 30;\n                break;\n              }\n              throw new Error('No response received from the question generation service.');\n            case 30:\n              processedQuiz = processQuizResponse(response, extractedContent.value);\n              if (!(!processedQuiz || !processedQuiz.questions || processedQuiz.questions.length === 0)) {\n                _context.next = 33;\n                break;\n              }\n              throw new Error('No valid questions could be generated. Please check if the content is suitable for question generation.');\n            case 33:\n              console.log('Generated questions:', processedQuiz.questions.length);\n              adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n              if (!(adaptiveQuestions.value.length === 0)) {\n                _context.next = 37;\n                break;\n              }\n              throw new Error('Failed to select appropriate questions from the generated set.');\n            case 37:\n              predictedScore.value = calculatePredictedScore();\n              _context.next = 46;\n              break;\n            case 40:\n              _context.prev = 40;\n              _context.t0 = _context[\"catch\"](10);\n              console.error('Error in handleSubmit:', _context.t0);\n              error.value = _context.t0.message || 'An unexpected error occurred while generating questions.';\n              // Reset quiz state on error\n              adaptiveQuestions.value = [];\n              predictedScore.value = null;\n            case 46:\n              _context.prev = 46;\n              isLoading.value = false;\n              return _context.finish(46);\n            case 49:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[10, 40, 46, 49]]);\n      }));\n      return function handleSubmit() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var startQuiz = function startQuiz() {\n      quizStarted.value = true;\n      quizFinished.value = false;\n    };\n    var handleQuizComplete = function handleQuizComplete(responses) {\n      userResponses.value = responses;\n      // Update the adaptiveQuestions with user answers\n      adaptiveQuestions.value = adaptiveQuestions.value.map(function (question, index) {\n        var _responses$index, _responses$index2;\n        return _objectSpread(_objectSpread({}, question), {}, {\n          userAnswer: (_responses$index = responses[index]) === null || _responses$index === void 0 ? void 0 : _responses$index.userAnswer,\n          isCorrect: (_responses$index2 = responses[index]) === null || _responses$index2 === void 0 ? void 0 : _responses$index2.correct\n        });\n      });\n      quizFinished.value = true;\n      saveQuizResults();\n    };\n    var restartQuiz = function restartQuiz() {\n      quizStarted.value = true;\n      quizFinished.value = false;\n      userResponses.value = [];\n    };\n    var resetToMainScreen = function resetToMainScreen() {\n      selectedFiles.value = [];\n      unsupportedFiles.value = [];\n      extractionErrors.value = [];\n      questionCount.value = '';\n      error.value = '';\n      isLoading.value = false;\n      predictedScore.value = null;\n      quizStarted.value = false;\n      quizFinished.value = false;\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n\n    // Helper functions\n    function readFileContent(_x) {\n      return _readFileContent.apply(this, arguments);\n    }\n    function _readFileContent() {\n      _readFileContent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(file) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", new Promise(function (resolve) {\n                try {\n                  console.log('File type:', file.type);\n                  console.log('File name:', file.name);\n                  var formData = new FormData();\n                  formData.append('file', file);\n                  var backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n                  fetch(\"\".concat(backendUrl, \"/extract-file\"), {\n                    method: 'POST',\n                    body: formData\n                  }).then(function (res) {\n                    return res.json();\n                  }).then(function (data) {\n                    if (data.text) {\n                      resolve(data.text);\n                    } else {\n                      extractionErrors.value.push({\n                        fileName: file.name,\n                        message: data.error || 'Failed to extract text from file'\n                      });\n                      resolve('');\n                    }\n                  })[\"catch\"](function (error) {\n                    console.error('Error processing file:', error);\n                    extractionErrors.value.push({\n                      fileName: file.name,\n                      message: \"Error processing file: \".concat(error.message)\n                    });\n                    resolve('');\n                  });\n                } catch (error) {\n                  console.error('Error preparing file:', error);\n                  extractionErrors.value.push({\n                    fileName: file.name,\n                    message: \"Error preparing file: \".concat(error.message)\n                  });\n                  resolve('');\n                }\n              }));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return _readFileContent.apply(this, arguments);\n    }\n    function generateQuestions(_x2, _x3) {\n      return _generateQuestions.apply(this, arguments);\n    }\n    function _generateQuestions() {\n      _generateQuestions = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(content, count) {\n        var maxRetries, retryCount, _response$data, prompt, response, _error$response, _error$response2;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              maxRetries = 3;\n              retryCount = 0;\n            case 2:\n              if (!(retryCount < maxRetries)) {\n                _context4.next = 30;\n                break;\n              }\n              _context4.prev = 3;\n              prompt = \"Create a quiz with \".concat(count, \" COMPLETELY UNIQUE and DIVERSE questions based on this text. Each question MUST cover a different concept or aspect. NO REPETITIVE or SIMILAR questions allowed.\\n\\nCRITICAL REQUIREMENTS:\\n1. Each explanation MUST be a direct quote or paraphrased content from the original text\\n2. Explanations should reference specific parts of the text that justify the correct answer\\n3. Do NOT make up explanations - they must be based on the actual content provided\\n4. If a concept isn't clearly explained in the text, don't create a question about it\\n5. Automatically determine appropriate difficulty (easy/medium/hard) based on:\\n   - Easy: Basic facts, definitions, or simple concepts\\n   - Medium: Understanding relationships between concepts\\n   - Hard: Analysis, evaluation, or complex relationships\\n\\nFormat requirements for each question:\\n\\nFor multiple choice questions:\\n1. Question: [unique question text]\\n2. Options (mark correct with *):\\n   A) [option]\\n   B) [option]\\n   C) [option]\\n   D) [option]\\n3. Explanation: [quote or paraphrase relevant text that explains the correct answer]\\n4. Difficulty: [AI determines: easy|medium|hard]\\n\\nFor true/false questions:\\n1. True/False: [unique question text]\\n2. Answer: [Write ONLY \\\"True*\\\" if true is correct, or \\\"False*\\\" if false is correct]\\n3. Explanation: [quote or paraphrase relevant text that explains why the statement is true or false]\\n4. Difficulty: [AI determines: easy|medium|hard]\\n\\nIMPORTANT:\\n- Each question MUST cover a different topic/concept\\n- NO similar or overlapping questions\\n- Make questions engaging and thought-provoking\\n- Ensure clear, unambiguous wording\\n- ALL explanations must come from the provided text\\n- For true/false questions, ALWAYS mark the correct answer with an asterisk (*)\\n- Distribute difficulties naturally based on content complexity\\n\\nText to base questions on:\\n\").concat(content);\n              _context4.next = 7;\n              return axios.post(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=\".concat(process.env.VUE_APP_GEMINI_API_KEY), {\n                contents: [{\n                  parts: [{\n                    text: prompt\n                  }]\n                }],\n                generationConfig: {\n                  temperature: 0.7,\n                  topK: 40,\n                  topP: 0.95,\n                  maxOutputTokens: 2048\n                }\n              }, {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n            case 7:\n              response = _context4.sent;\n              if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data = _response$data.candidates) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && (_response$data = _response$data.content) !== null && _response$data !== void 0 && (_response$data = _response$data.parts) !== null && _response$data !== void 0 && (_response$data = _response$data[0]) !== null && _response$data !== void 0 && _response$data.text) {\n                _context4.next = 10;\n                break;\n              }\n              throw new Error('Invalid response format from Gemini API');\n            case 10:\n              return _context4.abrupt(\"return\", response.data.candidates[0].content.parts[0].text);\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](3);\n              console.error(\"Attempt \".concat(retryCount + 1, \" failed:\"), _context4.t0);\n              retryCount++;\n              if (!(((_error$response = _context4.t0.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 429)) {\n                _context4.next = 22;\n                break;\n              }\n              _context4.next = 20;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 2000 * retryCount);\n              });\n            case 20:\n              _context4.next = 28;\n              break;\n            case 22:\n              if (!(retryCount === maxRetries)) {\n                _context4.next = 26;\n                break;\n              }\n              throw new Error(\"Failed to generate questions after \".concat(maxRetries, \" attempts. \").concat(((_error$response2 = _context4.t0.response) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.data) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.error) === null || _error$response2 === void 0 ? void 0 : _error$response2.message) || _context4.t0.message));\n            case 26:\n              _context4.next = 28;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve, 1000);\n              });\n            case 28:\n              _context4.next = 2;\n              break;\n            case 30:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[3, 13]]);\n      }));\n      return _generateQuestions.apply(this, arguments);\n    }\n    function processQuizResponse(response, content) {\n      var questions = [];\n      var lines = response.split('\\n');\n      var currentQuestion = null;\n      var collectingOptions = false;\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i].trim();\n        if (!line) continue;\n        if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n          if (currentQuestion) {\n            findExplanationFromContent(currentQuestion, content);\n            questions.push(currentQuestion);\n          }\n          currentQuestion = {\n            text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n            type: 'multiple-choice',\n            options: {},\n            correctAnswer: '',\n            explanation: '',\n            difficulty: 'medium'\n          };\n          collectingOptions = true;\n        } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n          if (currentQuestion) {\n            findExplanationFromContent(currentQuestion, content);\n            questions.push(currentQuestion);\n          }\n          currentQuestion = {\n            text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n            type: 'true-false',\n            options: {\n              'true': 'True',\n              'false': 'False'\n            },\n            correctAnswer: '',\n            explanation: '',\n            difficulty: 'medium'\n          };\n          collectingOptions = true;\n        } else if (currentQuestion && collectingOptions) {\n          if (currentQuestion.type === 'multiple-choice') {\n            var optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n            if (optionMatch) {\n              var letter = optionMatch[1].toUpperCase();\n              var option = optionMatch[2].trim();\n              if (option.startsWith('*') || option.endsWith('*')) {\n                currentQuestion.correctAnswer = letter;\n                option = option.replace(/^\\*|\\*$/g, '').trim();\n              }\n              currentQuestion.options[letter] = option;\n            }\n          } else if (currentQuestion.type === 'true-false') {\n            if (line.toLowerCase().startsWith('answer:')) {\n              var answer = line.substring(7).trim().toLowerCase();\n              if (answer.includes('true*') || answer.includes('*true')) {\n                currentQuestion.correctAnswer = 'true';\n              } else if (answer.includes('false*') || answer.includes('*false')) {\n                currentQuestion.correctAnswer = 'false';\n              }\n            }\n          }\n          if (line.toLowerCase().startsWith('difficulty:')) {\n            var difficulty = line.substring(10).trim().toLowerCase();\n            if (['easy', 'medium', 'hard'].includes(difficulty)) {\n              currentQuestion.difficulty = difficulty;\n            }\n          }\n        }\n      }\n\n      // Don't forget to add the last question\n      if (currentQuestion) {\n        findExplanationFromContent(currentQuestion, content);\n        questions.push(currentQuestion);\n      }\n\n      // Validate and fix questions\n      var validQuestions = questions.filter(function (q) {\n        if (q.type === 'multiple-choice') {\n          return Object.keys(q.options).length >= 2 && q.correctAnswer;\n        } else if (q.type === 'true-false') {\n          if (!q.correctAnswer) {\n            q.correctAnswer = 'false'; // Default to false if not specified\n          }\n          return true;\n        }\n        return false;\n      });\n      if (validQuestions.length === 0) {\n        throw new Error('No valid questions could be generated from the content.');\n      }\n      return {\n        questions: validQuestions\n      };\n    }\n    function findExplanationFromContent(question, content) {\n      // Split content into paragraphs\n      var paragraphs = content.split(/\\n\\s*\\n/);\n\n      // Create search terms from the question and answer\n      var searchTerms = [].concat(_toConsumableArray(question.text.toLowerCase().replace(/[.,?!]/g, '').split(' ')), _toConsumableArray(question.type === 'multiple-choice' && question.options[question.correctAnswer] ? question.options[question.correctAnswer].toLowerCase().split(' ') : [])).filter(function (word) {\n        return word.length > 3;\n      });\n\n      // Find relevant paragraphs with scoring\n      var relevantParagraphs = paragraphs.map(function (paragraph) {\n        var normalizedParagraph = paragraph.toLowerCase();\n        var score = 0;\n\n        // Score exact phrase matches higher\n        if (normalizedParagraph.includes(question.text.toLowerCase())) {\n          score += 15;\n        }\n\n        // Score keyword matches\n        searchTerms.forEach(function (term) {\n          if (normalizedParagraph.includes(term)) {\n            score += 2;\n          }\n        });\n        return {\n          text: paragraph.trim(),\n          score: score\n        };\n      }).filter(function (p) {\n        return p.score > 0;\n      }).sort(function (a, b) {\n        return b.score - a.score;\n      }).slice(0, 1); // Get most relevant paragraph\n\n      if (relevantParagraphs.length > 0) {\n        question.explanation = relevantParagraphs[0].text;\n      } else {\n        // Basic fallback explanations\n        if (question.type === 'true-false') {\n          var isTrue = question.correctAnswer === 'true';\n          question.explanation = \"This statement is \".concat(isTrue ? 'true' : 'false', \" based on the provided content.\");\n        } else {\n          var correctOption = question.options[question.correctAnswer];\n          question.explanation = \"The correct answer is \\\"\".concat(correctOption, \"\\\" according to the material.\");\n        }\n      }\n    }\n    function selectQuestions(questions) {\n      // First, shuffle all questions\n      var shuffledQuestions = _toConsumableArray(questions).sort(function () {\n        return Math.random() - 0.5;\n      });\n\n      // Remove duplicates while preserving order\n      var uniqueQuestions = shuffledQuestions.filter(function (question, index, self) {\n        return index === self.findIndex(function (q) {\n          return q.text.toLowerCase().replace(/[^\\w\\s]/g, '') === question.text.toLowerCase().replace(/[^\\w\\s]/g, '');\n        });\n      });\n\n      // Make sure we have enough questions\n      if (uniqueQuestions.length < Number(questionCount.value)) {\n        console.warn(\"Only \".concat(uniqueQuestions.length, \" unique questions available for \").concat(questionCount.value, \" requested questions\"));\n        return uniqueQuestions;\n      }\n\n      // Select the requested number of questions while maintaining difficulty distribution\n      var targetPerDifficulty = Math.ceil(Number(questionCount.value) / 3);\n      var selectedQuestions = [];\n      var difficultyCount = {\n        easy: 0,\n        medium: 0,\n        hard: 0\n      };\n\n      // First pass: try to get equal distribution\n      uniqueQuestions.forEach(function (question) {\n        var difficulty = question.difficulty || 'medium';\n        if (difficultyCount[difficulty] < targetPerDifficulty && selectedQuestions.length < Number(questionCount.value)) {\n          selectedQuestions.push(question);\n          difficultyCount[difficulty]++;\n        }\n      });\n\n      // Second pass: fill remaining slots if any\n      if (selectedQuestions.length < Number(questionCount.value)) {\n        uniqueQuestions.forEach(function (question) {\n          if (!selectedQuestions.includes(question) && selectedQuestions.length < Number(questionCount.value)) {\n            selectedQuestions.push(question);\n          }\n        });\n      }\n      return selectedQuestions;\n    }\n    function calculatePredictedScore() {\n      var contentCoverage = analyzeContentForCoverage();\n      var contentComplexity = analyzeContentComplexity();\n      var questionDiversity = analyzeQuestionDiversity();\n\n      // Weight factors\n      var coverageWeight = 0.4;\n      var complexityWeight = 0.3;\n      var diversityWeight = 0.3;\n\n      // Calculate weighted score\n      var predictedScore = contentCoverage * coverageWeight + contentComplexity * complexityWeight + questionDiversity * diversityWeight;\n      return Math.max(0, Math.min(100, Math.round(predictedScore)));\n    }\n    function analyzeContentForCoverage() {\n      // Analyze how well the content matches with generated questions\n      var totalContent = extractedContent.value.length;\n      if (totalContent === 0) return 0;\n\n      // Calculate coverage based on content length and number of questions\n      var averageContentPerQuestion = 500; // baseline characters per question\n      var expectedQuestions = Math.ceil(totalContent / averageContentPerQuestion);\n      var actualQuestions = Number(questionCount.value);\n      var coverage = Math.min(actualQuestions / expectedQuestions, 1) * 100;\n      return coverage;\n    }\n    function analyzeContentComplexity() {\n      var content = extractedContent.value.toLowerCase();\n\n      // Define complexity indicators\n      var complexityIndicators = ['analyze', 'compare', 'contrast', 'evaluate', 'explain', 'describe', 'discuss', 'examine', 'interpret', 'justify', 'therefore', 'however', 'although', 'furthermore', 'consequently'];\n\n      // Count complexity indicators\n      var complexityScore = 0;\n      complexityIndicators.forEach(function (indicator) {\n        var regex = new RegExp(indicator, 'g');\n        var matches = content.match(regex);\n        if (matches) {\n          complexityScore += matches.length;\n        }\n      });\n\n      // Normalize score to 0-100 range\n      var normalizedScore = Math.min(complexityScore * 5, 100);\n      return normalizedScore;\n    }\n    function analyzeQuestionDiversity() {\n      if (!adaptiveQuestions.value.length) return 0;\n\n      // Count different types of questions\n      var types = new Set(adaptiveQuestions.value.map(function (q) {\n        return q.type;\n      }));\n      var typesDiversity = types.size / 2 * 50; // 2 is max types (multiple-choice and true-false)\n\n      // Analyze question text similarity to ensure diverse topics\n      var questionTexts = adaptiveQuestions.value.map(function (q) {\n        return q.text.toLowerCase();\n      });\n      var uniqueTopics = 0;\n      var processedKeywords = new Set();\n      questionTexts.forEach(function (text) {\n        var keywords = text.split(' ').filter(function (word) {\n          return word.length > 4;\n        }) // Consider only significant words\n        .map(function (word) {\n          return word.replace(/[^a-z]/g, '');\n        }); // Clean up words\n\n        keywords.forEach(function (keyword) {\n          if (!processedKeywords.has(keyword)) {\n            uniqueTopics++;\n            processedKeywords.add(keyword);\n          }\n        });\n      });\n      var topicsDiversity = Math.min(uniqueTopics / questionTexts.length * 50, 50);\n      return typesDiversity + topicsDiversity;\n    }\n\n    // Results formatting\n    var formatQuestionsForResults = computed(function () {\n      return adaptiveQuestions.value.map(function (q, index) {\n        var _userResponses$value$, _userResponses$value$2;\n        return {\n          text: q.text,\n          type: q.type,\n          options: q.options,\n          userAnswer: (_userResponses$value$ = userResponses.value[index]) === null || _userResponses$value$ === void 0 ? void 0 : _userResponses$value$.userAnswer,\n          correctAnswer: q.correctAnswer,\n          explanation: q.explanation,\n          isCorrect: (_userResponses$value$2 = userResponses.value[index]) === null || _userResponses$value$2 === void 0 ? void 0 : _userResponses$value$2.correct\n        };\n      });\n    });\n    var formatUserAnswersForResults = computed(function () {\n      return userResponses.value.map(function (r) {\n        return r.userAnswer;\n      });\n    });\n    var correctAnswersCount = computed(function () {\n      return userResponses.value.filter(function (r) {\n        return r.correct;\n      }).length;\n    });\n\n    // Update the calculateScore function\n    var calculateScore = function calculateScore() {\n      if (!userResponses.value.length) return 0;\n      var correctAnswers = userResponses.value.filter(function (r) {\n        return r.correct;\n      }).length;\n      return Math.round(correctAnswers / userResponses.value.length * 100);\n    };\n\n    // Update the saveQuizResults function to handle retakes\n    var saveQuizResults = function saveQuizResults() {\n      var _selectedFiles$value$;\n      var quizResult = {\n        fileName: ((_selectedFiles$value$ = selectedFiles.value[0]) === null || _selectedFiles$value$ === void 0 ? void 0 : _selectedFiles$value$.name) || 'Untitled Quiz',\n        questionCount: Number(questionCount.value),\n        predictedScore: predictedScore.value,\n        actualScore: calculateScore(),\n        date: new Date(),\n        fileContent: extractedContent.value\n      };\n      if (isRetaking.value && retakeIndex.value !== -1) {\n        // Update existing record\n        quizHistory.value[retakeIndex.value] = _objectSpread(_objectSpread({}, quizHistory.value[retakeIndex.value]), {}, {\n          actualScore: quizResult.actualScore,\n          date: quizResult.date\n        });\n      } else {\n        // Add new record\n        quizHistory.value.unshift(quizResult);\n      }\n      localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n\n      // Reset retake flags\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Update the handleRetakeQuiz function to set retake flags\n    var handleRetakeQuiz = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(quizToRetake) {\n        var file, requestedQuestionCount, response, processedQuiz, _err$response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // Find the index of the quiz being retaken\n              retakeIndex.value = quizHistory.value.findIndex(function (quiz) {\n                return quiz.fileName === quizToRetake.fileName && quiz.questionCount === quizToRetake.questionCount && quiz.fileContent === quizToRetake.fileContent;\n              });\n              if (!(retakeIndex.value === -1)) {\n                _context2.next = 4;\n                break;\n              }\n              console.error('Could not find original quiz to retake');\n              return _context2.abrupt(\"return\");\n            case 4:\n              isRetaking.value = true;\n\n              // Reset quiz state\n              quizStarted.value = false;\n              quizFinished.value = false;\n              predictedScore.value = null;\n              error.value = '';\n              adaptiveQuestions.value = [];\n              userResponses.value = [];\n\n              // Set the question count from the previous quiz\n              questionCount.value = quizToRetake.questionCount.toString();\n\n              // Create a dummy file with the same name\n              file = new File([''], quizToRetake.fileName, {\n                type: 'text/plain'\n              }); // Set the selected file and content\n              selectedFiles.value = [file];\n              extractedContent.value = quizToRetake.fileContent;\n\n              // Generate new quiz using the stored content\n              _context2.prev = 15;\n              isLoading.value = true;\n              requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n              _context2.next = 20;\n              return generateQuestions(extractedContent.value, requestedQuestionCount);\n            case 20:\n              response = _context2.sent;\n              processedQuiz = processQuizResponse(response, extractedContent.value);\n              adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n              predictedScore.value = calculatePredictedScore();\n              _context2.next = 31;\n              break;\n            case 26:\n              _context2.prev = 26;\n              _context2.t0 = _context2[\"catch\"](15);\n              error.value = \"Error generating questions: \".concat(((_err$response = _context2.t0.response) === null || _err$response === void 0 || (_err$response = _err$response.data) === null || _err$response === void 0 || (_err$response = _err$response.error) === null || _err$response === void 0 ? void 0 : _err$response.message) || _context2.t0.message);\n              // Reset retake flags on error\n              isRetaking.value = false;\n              retakeIndex.value = -1;\n            case 31:\n              _context2.prev = 31;\n              isLoading.value = false;\n              return _context2.finish(31);\n            case 34:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[15, 26, 31, 34]]);\n      }));\n      return function handleRetakeQuiz(_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    // Update handleCreateQuiz to reset retake flags\n    var handleCreateQuiz = function handleCreateQuiz() {\n      // Reset the quiz state\n      quizStarted.value = false;\n      quizFinished.value = false;\n      predictedScore.value = null;\n      selectedFiles.value = [];\n      questionCount.value = '';\n      error.value = '';\n      extractedContent.value = '';\n      adaptiveQuestions.value = [];\n      userResponses.value = [];\n      isRetaking.value = false;\n      retakeIndex.value = -1;\n    };\n\n    // Add the clearHistory function\n    var clearHistory = function clearHistory() {\n      if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n        quizHistory.value = [];\n        localStorage.removeItem('quizHistory');\n      }\n    };\n    var __returned__ = {\n      selectedFiles: selectedFiles,\n      fileInput: fileInput,\n      unsupportedFiles: unsupportedFiles,\n      extractionErrors: extractionErrors,\n      questionCount: questionCount,\n      isLoading: isLoading,\n      error: error,\n      predictedScore: predictedScore,\n      quizStarted: quizStarted,\n      quizFinished: quizFinished,\n      adaptiveQuestions: adaptiveQuestions,\n      userResponses: userResponses,\n      extractedContent: extractedContent,\n      quizHistory: quizHistory,\n      isRetaking: isRetaking,\n      retakeIndex: retakeIndex,\n      isFormValid: isFormValid,\n      hasFileErrors: hasFileErrors,\n      getPredictedScoreClass: getPredictedScoreClass,\n      triggerFileInput: triggerFileInput,\n      handleFileSelect: handleFileSelect,\n      handleDrop: handleDrop,\n      addFiles: addFiles,\n      removeFile: removeFile,\n      handleSubmit: handleSubmit,\n      startQuiz: startQuiz,\n      handleQuizComplete: handleQuizComplete,\n      restartQuiz: restartQuiz,\n      resetToMainScreen: resetToMainScreen,\n      readFileContent: readFileContent,\n      generateQuestions: generateQuestions,\n      processQuizResponse: processQuizResponse,\n      findExplanationFromContent: findExplanationFromContent,\n      selectQuestions: selectQuestions,\n      calculatePredictedScore: calculatePredictedScore,\n      analyzeContentForCoverage: analyzeContentForCoverage,\n      analyzeContentComplexity: analyzeContentComplexity,\n      analyzeQuestionDiversity: analyzeQuestionDiversity,\n      formatQuestionsForResults: formatQuestionsForResults,\n      formatUserAnswersForResults: formatUserAnswersForResults,\n      correctAnswersCount: correctAnswersCount,\n      calculateScore: calculateScore,\n      saveQuizResults: saveQuizResults,\n      handleRetakeQuiz: handleRetakeQuiz,\n      handleCreateQuiz: handleCreateQuiz,\n      clearHistory: clearHistory,\n      ref: ref,\n      computed: computed,\n      onMounted: onMounted,\n      get axios() {\n        return axios;\n      },\n      FileErrorDisplay: FileErrorDisplay,\n      QuizResults: QuizResults,\n      FlashcardQuiz: FlashcardQuiz,\n      Sidebar: Sidebar\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","axios","FileErrorDisplay","QuizResults","FlashcardQuiz","Sidebar","selectedFiles","fileInput","unsupportedFiles","extractionErrors","questionCount","isLoading","error","predictedScore","quizStarted","quizFinished","adaptiveQuestions","userResponses","extractedContent","quizHistory","isRetaking","retakeIndex","savedHistory","localStorage","getItem","value","JSON","parse","isFormValid","length","hasFileErrors","getPredictedScoreClass","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validTypes","validFiles","invalidFiles","forEach","file","includes","type","push","concat","_toConsumableArray","removeFile","index","splice","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fileContents","validContents","requestedQuestionCount","response","processedQuiz","wrap","_callee$","_context","prev","next","abrupt","console","log","map","f","name","Promise","all","readFileContent","sent","filter","content","trim","Error","join","Math","min","Number","generateQuestions","processQuizResponse","questions","selectQuestions","calculatePredictedScore","t0","message","finish","stop","apply","arguments","startQuiz","handleQuizComplete","responses","question","_responses$index","_responses$index2","_objectSpread","userAnswer","isCorrect","correct","saveQuizResults","restartQuiz","resetToMainScreen","_x","_readFileContent","_callee3","_callee3$","_context3","resolve","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","data","text","fileName","_x2","_x3","_generateQuestions","_callee4","count","maxRetries","retryCount","_response$data","prompt","_error$response","_error$response2","_callee4$","_context4","post","VUE_APP_GEMINI_API_KEY","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","candidates","status","setTimeout","lines","split","currentQuestion","collectingOptions","i","line","test","findExplanationFromContent","replace","options","correctAnswer","explanation","difficulty","optionMatch","match","letter","toUpperCase","option","startsWith","endsWith","toLowerCase","answer","substring","validQuestions","q","Object","keys","paragraphs","searchTerms","word","relevantParagraphs","paragraph","normalizedParagraph","score","term","p","sort","a","b","slice","isTrue","correctOption","shuffledQuestions","random","uniqueQuestions","self","findIndex","warn","targetPerDifficulty","ceil","selectedQuestions","difficultyCount","easy","medium","hard","contentCoverage","analyzeContentForCoverage","contentComplexity","analyzeContentComplexity","questionDiversity","analyzeQuestionDiversity","coverageWeight","complexityWeight","diversityWeight","max","round","totalContent","averageContentPerQuestion","expectedQuestions","actualQuestions","coverage","complexityIndicators","complexityScore","indicator","regex","RegExp","matches","normalizedScore","types","Set","typesDiversity","size","questionTexts","uniqueTopics","processedKeywords","keywords","keyword","has","add","topicsDiversity","formatQuestionsForResults","_userResponses$value$","_userResponses$value$2","formatUserAnswersForResults","r","correctAnswersCount","calculateScore","correctAnswers","_selectedFiles$value$","quizResult","actualScore","date","Date","fileContent","unshift","setItem","stringify","handleRetakeQuiz","_ref3","_callee2","quizToRetake","_err$response","_callee2$","_context2","quiz","toString","File","_x4","handleCreateQuiz","clearHistory","confirm","removeItem"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <Sidebar \n      :quiz-history=\"quizHistory\" \n      @create-quiz=\"handleCreateQuiz\"\n      @retake-quiz=\"handleRetakeQuiz\"\n      @clear-history=\"clearHistory\"\n    />\n    <div class=\"main-content\">\n      <div class=\"upload-container\">\n        <h1>QUIZZy</h1>\n        \n        <div v-if=\"!quizStarted && !quizFinished && predictedScore === null\" class=\"file-upload-section\">\n          <h2>Upload Files</h2>\n          <div class=\"upload-area\" \n            @dragover.prevent \n            @drop.prevent=\"handleDrop\"\n            @click=\"triggerFileInput\"\n            role=\"button\"\n            tabindex=\"0\"\n            @keydown.enter=\"triggerFileInput\"\n          >\n            <input \n              type=\"file\" \n              @change=\"handleFileSelect\" \n              accept=\".pdf,.docx,.pptx,.txt\"\n              ref=\"fileInput\"\n              class=\"file-input\"\n            >\n            <div class=\"upload-prompt\">\n              <p>Drag and drop files here or click to select</p>\n              <div class=\"supported-formats\">\n                <p>Supported formats:</p>\n                <ul>\n                  <li><span class=\"format-icon\">📄</span> Documents (PDF, DOCX)</li>\n                  <li><span class=\"format-icon\">📊</span> Presentations (PPTX)</li>\n                  <li><span class=\"format-icon\">📝</span> Text files (TXT)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"hasFileErrors\" class=\"error-section\">\n            <FileErrorDisplay\n              :extraction-errors=\"extractionErrors\"\n              :unsupported-files=\"unsupportedFiles\"\n            />\n          </div>\n\n          <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n            <h3>Selected Files:</h3>\n            <ul>\n              <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n                <span class=\"file-name\">{{ file.name }}</span>\n                <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">×</button>\n              </li>\n            </ul>\n          </div>\n\n          <div class=\"questions-section\">\n            <h2>Number of Questions</h2>\n            <div class=\"question-input\">\n              <input\n                type=\"number\"\n                v-model=\"questionCount\"\n                min=\"1\"\n                max=\"20\"\n                placeholder=\"Enter number of questions\"\n              />\n            </div>\n          </div>\n\n          <button \n            class=\"submit-btn\" \n            :disabled=\"!isFormValid || isLoading\"\n            @click=\"handleSubmit\"\n          >\n            {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n          </button>\n        </div>\n\n        <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n          <div class=\"predicted-score-container\">\n            <h2>Ready to Start!</h2>\n            <div class=\"score-prediction\">\n              <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n                <span class=\"predicted-value\">{{ predictedScore }}%</span>\n                <span class=\"prediction-label\">Predicted Score</span>\n              </div>\n            </div>\n            <p class=\"prediction-explanation\">\n              Based on your study material, we predict you'll score around {{ predictedScore }}%.\n            </p>\n            <button class=\"start-quiz-btn\" @click=\"startQuiz\">Start Quiz</button>\n          </div>\n        </div>\n\n        <FlashcardQuiz\n          v-if=\"quizStarted && !quizFinished\"\n          :questions=\"adaptiveQuestions\"\n          :total-questions=\"Number(questionCount)\"\n          @quiz-completed=\"handleQuizComplete\"\n        />\n\n        <QuizResults\n          v-if=\"quizFinished\"\n          :questions=\"formatQuestionsForResults\"\n          :user-answers=\"formatUserAnswersForResults\"\n          :score=\"correctAnswersCount\"\n          :predicted-score=\"predictedScore\"\n          @restart=\"restartQuiz\"\n          @go-back=\"resetToMainScreen\"\n        />\n\n        <div v-if=\"error\" class=\"error-message\">\n          {{ error }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading Overlay -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <div class=\"loading-content\">\n        <div class=\"typewriter\">Generating quiz</div>\n        <div class=\"dots\">\n          <span>.</span>\n          <span>.</span>\n          <span>.</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\n\n// File handling state\nconst selectedFiles = ref([]);\nconst fileInput = ref(null);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\n\n// Quiz state\nconst questionCount = ref('');\nconst isLoading = ref(false);\nconst error = ref('');\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst quizFinished = ref(false);\nconst adaptiveQuestions = ref([]);\nconst userResponses = ref([]);\nconst extractedContent = ref('');\n\n// Add quiz history state\nconst quizHistory = ref([]);\n\n// Add isRetaking flag to track retakes\nconst isRetaking = ref(false);\nconst retakeIndex = ref(-1);\n\n// Load quiz history from localStorage on mount\nonMounted(() => {\n  const savedHistory = localStorage.getItem('quizHistory');\n  if (savedHistory) {\n    quizHistory.value = JSON.parse(savedHistory);\n  }\n});\n\n// Computed properties\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n\n// File handling methods\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\n// Quiz handling methods\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  userResponses.value = [];\n  extractedContent.value = '';\n  extractionErrors.value = []; // Clear previous errors\n\n  try {\n    console.log('Processing files:', selectedFiles.value.map(f => ({ name: f.name, type: f.type })));\n    \n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    // Filter out empty content and join\n    const validContents = fileContents.filter(content => content && content.trim().length > 0);\n    console.log('Number of files with valid content:', validContents.length);\n    \n    if (validContents.length === 0) {\n      throw new Error('No valid content could be extracted from the selected files. Please check if the files contain readable text.');\n    }\n\n    extractedContent.value = validContents.join('\\n\\n');\n    console.log('Total content length:', extractedContent.value.length);\n    \n    if (extractedContent.value.trim().length < 50) {\n      throw new Error('The extracted content is too short to generate meaningful questions. Please provide more content (at least 50 characters).');\n    }\n\n    const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n    console.log('Requesting questions:', requestedQuestionCount);\n    \n    const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    \n    if (!response) {\n      throw new Error('No response received from the question generation service.');\n    }\n\n    const processedQuiz = processQuizResponse(response, extractedContent.value);\n    \n    if (!processedQuiz || !processedQuiz.questions || processedQuiz.questions.length === 0) {\n      throw new Error('No valid questions could be generated. Please check if the content is suitable for question generation.');\n    }\n\n    console.log('Generated questions:', processedQuiz.questions.length);\n    adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n    \n    if (adaptiveQuestions.value.length === 0) {\n      throw new Error('Failed to select appropriate questions from the generated set.');\n    }\n    \n    predictedScore.value = calculatePredictedScore();\n\n  } catch (err) {\n    console.error('Error in handleSubmit:', err);\n    error.value = err.message || 'An unexpected error occurred while generating questions.';\n    // Reset quiz state on error\n    adaptiveQuestions.value = [];\n    predictedScore.value = null;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n};\n\nconst handleQuizComplete = (responses) => {\n  userResponses.value = responses;\n  // Update the adaptiveQuestions with user answers\n  adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => ({\n    ...question,\n    userAnswer: responses[index]?.userAnswer,\n    isCorrect: responses[index]?.correct\n  }));\n  quizFinished.value = true;\n  saveQuizResults();\n};\n\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  userResponses.value = [];\n};\n\nconst resetToMainScreen = () => {\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\n// Helper functions\nasync function readFileContent(file) {\n  return new Promise((resolve) => {\n    try {\n      console.log('File type:', file.type);\n      console.log('File name:', file.name);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n      .then(res => res.json())\n      .then(data => {\n        if (data.text) {\n          resolve(data.text);\n        } else {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: data.error || 'Failed to extract text from file'\n          });\n          resolve('');\n        }\n      })\n      .catch(error => {\n        console.error('Error processing file:', error);\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: `Error processing file: ${error.message}`\n        });\n        resolve('');\n      });\n    } catch (error) {\n      console.error('Error preparing file:', error);\n      extractionErrors.value.push({\n        fileName: file.name,\n        message: `Error preparing file: ${error.message}`\n      });\n      resolve('');\n    }\n  });\n}\n\nasync function generateQuestions(content, count) {\n  const maxRetries = 3;\n  let retryCount = 0;\n\n  while (retryCount < maxRetries) {\n    try {\n      const prompt = `Create a quiz with ${count} COMPLETELY UNIQUE and DIVERSE questions based on this text. Each question MUST cover a different concept or aspect. NO REPETITIVE or SIMILAR questions allowed.\n\nCRITICAL REQUIREMENTS:\n1. Each explanation MUST be a direct quote or paraphrased content from the original text\n2. Explanations should reference specific parts of the text that justify the correct answer\n3. Do NOT make up explanations - they must be based on the actual content provided\n4. If a concept isn't clearly explained in the text, don't create a question about it\n5. Automatically determine appropriate difficulty (easy/medium/hard) based on:\n   - Easy: Basic facts, definitions, or simple concepts\n   - Medium: Understanding relationships between concepts\n   - Hard: Analysis, evaluation, or complex relationships\n\nFormat requirements for each question:\n\nFor multiple choice questions:\n1. Question: [unique question text]\n2. Options (mark correct with *):\n   A) [option]\n   B) [option]\n   C) [option]\n   D) [option]\n3. Explanation: [quote or paraphrase relevant text that explains the correct answer]\n4. Difficulty: [AI determines: easy|medium|hard]\n\nFor true/false questions:\n1. True/False: [unique question text]\n2. Answer: [Write ONLY \"True*\" if true is correct, or \"False*\" if false is correct]\n3. Explanation: [quote or paraphrase relevant text that explains why the statement is true or false]\n4. Difficulty: [AI determines: easy|medium|hard]\n\nIMPORTANT:\n- Each question MUST cover a different topic/concept\n- NO similar or overlapping questions\n- Make questions engaging and thought-provoking\n- Ensure clear, unambiguous wording\n- ALL explanations must come from the provided text\n- For true/false questions, ALWAYS mark the correct answer with an asterisk (*)\n- Distribute difficulties naturally based on content complexity\n\nText to base questions on:\n${content}`;\n\n      const response = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n        {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 2048,\n          }\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (!response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {\n        throw new Error('Invalid response format from Gemini API');\n      }\n\n      return response.data.candidates[0].content.parts[0].text;\n    } catch (error) {\n      console.error(`Attempt ${retryCount + 1} failed:`, error);\n      retryCount++;\n      \n      if (error.response?.status === 429) {\n        // Rate limit error - wait longer\n        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n      } else if (retryCount === maxRetries) {\n        throw new Error(`Failed to generate questions after ${maxRetries} attempts. ${error.response?.data?.error?.message || error.message}`);\n      } else {\n        // Other errors - wait briefly\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n}\n\nfunction processQuizResponse(response, content) {\n  const questions = [];\n  const lines = response.split('\\n');\n  let currentQuestion = null;\n  let collectingOptions = false;\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n      if (currentQuestion) {\n        findExplanationFromContent(currentQuestion, content);\n        questions.push(currentQuestion);\n      }\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n        type: 'multiple-choice',\n        options: {},\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n      collectingOptions = true;\n    } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n      if (currentQuestion) {\n        findExplanationFromContent(currentQuestion, content);\n        questions.push(currentQuestion);\n      }\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n        type: 'true-false',\n        options: { \n          'true': 'True',\n          'false': 'False'\n        },\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n      collectingOptions = true;\n    } else if (currentQuestion && collectingOptions) {\n      if (currentQuestion.type === 'multiple-choice') {\n        const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n        if (optionMatch) {\n          const letter = optionMatch[1].toUpperCase();\n          let option = optionMatch[2].trim();\n          \n          if (option.startsWith('*') || option.endsWith('*')) {\n            currentQuestion.correctAnswer = letter;\n            option = option.replace(/^\\*|\\*$/g, '').trim();\n          }\n          currentQuestion.options[letter] = option;\n        }\n      } else if (currentQuestion.type === 'true-false') {\n        if (line.toLowerCase().startsWith('answer:')) {\n          const answer = line.substring(7).trim().toLowerCase();\n          if (answer.includes('true*') || answer.includes('*true')) {\n            currentQuestion.correctAnswer = 'true';\n          } else if (answer.includes('false*') || answer.includes('*false')) {\n            currentQuestion.correctAnswer = 'false';\n          }\n        }\n      }\n      \n      if (line.toLowerCase().startsWith('difficulty:')) {\n        const difficulty = line.substring(10).trim().toLowerCase();\n        if (['easy', 'medium', 'hard'].includes(difficulty)) {\n          currentQuestion.difficulty = difficulty;\n        }\n      }\n    }\n  }\n  \n  // Don't forget to add the last question\n  if (currentQuestion) {\n    findExplanationFromContent(currentQuestion, content);\n    questions.push(currentQuestion);\n  }\n\n  // Validate and fix questions\n  const validQuestions = questions.filter(q => {\n    if (q.type === 'multiple-choice') {\n      return Object.keys(q.options).length >= 2 && q.correctAnswer;\n    } else if (q.type === 'true-false') {\n      if (!q.correctAnswer) {\n        q.correctAnswer = 'false'; // Default to false if not specified\n      }\n      return true;\n    }\n    return false;\n  });\n\n  if (validQuestions.length === 0) {\n    throw new Error('No valid questions could be generated from the content.');\n  }\n  \n  return { questions: validQuestions };\n}\n\nfunction findExplanationFromContent(question, content) {\n  // Split content into paragraphs\n  const paragraphs = content.split(/\\n\\s*\\n/);\n  \n  // Create search terms from the question and answer\n  const searchTerms = [\n    ...question.text.toLowerCase().replace(/[.,?!]/g, '').split(' '),\n    ...(question.type === 'multiple-choice' && question.options[question.correctAnswer] \n      ? question.options[question.correctAnswer].toLowerCase().split(' ') \n      : [])\n  ].filter(word => word.length > 3);\n  \n  // Find relevant paragraphs with scoring\n  const relevantParagraphs = paragraphs.map(paragraph => {\n    const normalizedParagraph = paragraph.toLowerCase();\n    let score = 0;\n    \n    // Score exact phrase matches higher\n    if (normalizedParagraph.includes(question.text.toLowerCase())) {\n      score += 15;\n    }\n    \n    // Score keyword matches\n    searchTerms.forEach(term => {\n      if (normalizedParagraph.includes(term)) {\n        score += 2;\n      }\n    });\n\n    return {\n      text: paragraph.trim(),\n      score\n    };\n  }).filter(p => p.score > 0)\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 1); // Get most relevant paragraph\n\n  if (relevantParagraphs.length > 0) {\n    question.explanation = relevantParagraphs[0].text;\n  } else {\n    // Basic fallback explanations\n    if (question.type === 'true-false') {\n      const isTrue = question.correctAnswer === 'true';\n      question.explanation = `This statement is ${isTrue ? 'true' : 'false'} based on the provided content.`;\n    } else {\n      const correctOption = question.options[question.correctAnswer];\n      question.explanation = `The correct answer is \"${correctOption}\" according to the material.`;\n    }\n  }\n}\n\nfunction selectQuestions(questions) {\n  // First, shuffle all questions\n  const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);\n  \n  // Remove duplicates while preserving order\n  const uniqueQuestions = shuffledQuestions.filter((question, index, self) => \n    index === self.findIndex((q) => \n      q.text.toLowerCase().replace(/[^\\w\\s]/g, '') === \n      question.text.toLowerCase().replace(/[^\\w\\s]/g, '')\n    )\n  );\n\n  // Make sure we have enough questions\n  if (uniqueQuestions.length < Number(questionCount.value)) {\n    console.warn(`Only ${uniqueQuestions.length} unique questions available for ${questionCount.value} requested questions`);\n    return uniqueQuestions;\n  }\n\n  // Select the requested number of questions while maintaining difficulty distribution\n  const targetPerDifficulty = Math.ceil(Number(questionCount.value) / 3);\n  const selectedQuestions = [];\n  const difficultyCount = { easy: 0, medium: 0, hard: 0 };\n\n  // First pass: try to get equal distribution\n  uniqueQuestions.forEach(question => {\n    const difficulty = question.difficulty || 'medium';\n    if (difficultyCount[difficulty] < targetPerDifficulty && \n        selectedQuestions.length < Number(questionCount.value)) {\n      selectedQuestions.push(question);\n      difficultyCount[difficulty]++;\n    }\n  });\n\n  // Second pass: fill remaining slots if any\n  if (selectedQuestions.length < Number(questionCount.value)) {\n    uniqueQuestions.forEach(question => {\n      if (!selectedQuestions.includes(question) && \n          selectedQuestions.length < Number(questionCount.value)) {\n        selectedQuestions.push(question);\n      }\n    });\n  }\n\n  return selectedQuestions;\n}\n\nfunction calculatePredictedScore() {\n  const contentCoverage = analyzeContentForCoverage();\n  const contentComplexity = analyzeContentComplexity();\n  const questionDiversity = analyzeQuestionDiversity();\n  \n  // Weight factors\n  const coverageWeight = 0.4;\n  const complexityWeight = 0.3;\n  const diversityWeight = 0.3;\n  \n  // Calculate weighted score\n  const predictedScore = (\n    contentCoverage * coverageWeight +\n    contentComplexity * complexityWeight +\n    questionDiversity * diversityWeight\n  );\n  \n  return Math.max(0, Math.min(100, Math.round(predictedScore)));\n}\n\nfunction analyzeContentForCoverage() {\n  // Analyze how well the content matches with generated questions\n  const totalContent = extractedContent.value.length;\n  if (totalContent === 0) return 0;\n  \n  // Calculate coverage based on content length and number of questions\n  const averageContentPerQuestion = 500; // baseline characters per question\n  const expectedQuestions = Math.ceil(totalContent / averageContentPerQuestion);\n  const actualQuestions = Number(questionCount.value);\n  \n  const coverage = Math.min(actualQuestions / expectedQuestions, 1) * 100;\n  return coverage;\n}\n\nfunction analyzeContentComplexity() {\n  const content = extractedContent.value.toLowerCase();\n  \n  // Define complexity indicators\n  const complexityIndicators = [\n    'analyze', 'compare', 'contrast', 'evaluate', 'explain',\n    'describe', 'discuss', 'examine', 'interpret', 'justify',\n    'therefore', 'however', 'although', 'furthermore', 'consequently'\n  ];\n  \n  // Count complexity indicators\n  let complexityScore = 0;\n  complexityIndicators.forEach(indicator => {\n    const regex = new RegExp(indicator, 'g');\n    const matches = content.match(regex);\n    if (matches) {\n      complexityScore += matches.length;\n    }\n  });\n  \n  // Normalize score to 0-100 range\n  const normalizedScore = Math.min(complexityScore * 5, 100);\n  return normalizedScore;\n}\n\nfunction analyzeQuestionDiversity() {\n  if (!adaptiveQuestions.value.length) return 0;\n  \n  // Count different types of questions\n  const types = new Set(adaptiveQuestions.value.map(q => q.type));\n  const typesDiversity = (types.size / 2) * 50; // 2 is max types (multiple-choice and true-false)\n  \n  // Analyze question text similarity to ensure diverse topics\n  const questionTexts = adaptiveQuestions.value.map(q => q.text.toLowerCase());\n  let uniqueTopics = 0;\n  const processedKeywords = new Set();\n  \n  questionTexts.forEach(text => {\n    const keywords = text.split(' ')\n      .filter(word => word.length > 4) // Consider only significant words\n      .map(word => word.replace(/[^a-z]/g, '')); // Clean up words\n      \n    keywords.forEach(keyword => {\n      if (!processedKeywords.has(keyword)) {\n        uniqueTopics++;\n        processedKeywords.add(keyword);\n      }\n    });\n  });\n  \n  const topicsDiversity = Math.min(uniqueTopics / questionTexts.length * 50, 50);\n  \n  return typesDiversity + topicsDiversity;\n}\n\n// Results formatting\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    options: q.options,\n    userAnswer: userResponses.value[index]?.userAnswer,\n    correctAnswer: q.correctAnswer,\n    explanation: q.explanation,\n    isCorrect: userResponses.value[index]?.correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update the calculateScore function\nconst calculateScore = () => {\n  if (!userResponses.value.length) return 0;\n  const correctAnswers = userResponses.value.filter(r => r.correct).length;\n  return Math.round((correctAnswers / userResponses.value.length) * 100);\n};\n\n// Update the saveQuizResults function to handle retakes\nconst saveQuizResults = () => {\n  const quizResult = {\n    fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n    questionCount: Number(questionCount.value),\n    predictedScore: predictedScore.value,\n    actualScore: calculateScore(),\n    date: new Date(),\n    fileContent: extractedContent.value\n  };\n  \n  if (isRetaking.value && retakeIndex.value !== -1) {\n    // Update existing record\n    quizHistory.value[retakeIndex.value] = {\n      ...quizHistory.value[retakeIndex.value],\n      actualScore: quizResult.actualScore,\n      date: quizResult.date\n    };\n  } else {\n    // Add new record\n    quizHistory.value.unshift(quizResult);\n  }\n  \n  localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n  \n  // Reset retake flags\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Update the handleRetakeQuiz function to set retake flags\nconst handleRetakeQuiz = async (quizToRetake) => {\n  // Find the index of the quiz being retaken\n  retakeIndex.value = quizHistory.value.findIndex(quiz => \n    quiz.fileName === quizToRetake.fileName && \n    quiz.questionCount === quizToRetake.questionCount &&\n    quiz.fileContent === quizToRetake.fileContent\n  );\n  \n  if (retakeIndex.value === -1) {\n    console.error('Could not find original quiz to retake');\n    return;\n  }\n  \n  isRetaking.value = true;\n  \n  // Reset quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  \n  // Set the question count from the previous quiz\n  questionCount.value = quizToRetake.questionCount.toString();\n  \n  // Create a dummy file with the same name\n  const file = new File([''], quizToRetake.fileName, {\n    type: 'text/plain'\n  });\n  \n  // Set the selected file and content\n  selectedFiles.value = [file];\n  extractedContent.value = quizToRetake.fileContent;\n  \n  // Generate new quiz using the stored content\n  try {\n    isLoading.value = true;\n    const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n    \n    const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    const processedQuiz = processQuizResponse(response, extractedContent.value);\n    \n    adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n    predictedScore.value = calculatePredictedScore();\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response?.data?.error?.message || err.message}`;\n    // Reset retake flags on error\n    isRetaking.value = false;\n    retakeIndex.value = -1;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Update handleCreateQuiz to reset retake flags\nconst handleCreateQuiz = () => {\n  // Reset the quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  selectedFiles.value = [];\n  questionCount.value = '';\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Add the clearHistory function\nconst clearHistory = () => {\n  if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n    quizHistory.value = [];\n    localStorage.removeItem('quizHistory');\n  }\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px; /* Same as sidebar width */\n  padding: 2rem;\n  display: flex;\n  justify-content: center;\n}\n\n.upload-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 90%;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.85);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(2px);\n}\n\n.loading-content {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 2rem;\n  color: #333;\n  font-weight: 500;\n}\n\n.typewriter {\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(14) infinite;\n  border-right: 3px solid #4CAF50;\n}\n\n.dots {\n  display: flex;\n}\n\n.dots span {\n  opacity: 0;\n  animation: dot 1.5s infinite;\n  animation-fill-mode: both;\n}\n\n.dots span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.dots span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0%, 90%, 100% {\n    width: 0;\n  }\n  30%, 60% {\n    width: 14ch;\n  }\n}\n\n@keyframes dot {\n  0%, 100% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}