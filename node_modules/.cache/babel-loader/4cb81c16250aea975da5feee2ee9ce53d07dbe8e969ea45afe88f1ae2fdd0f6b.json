{"ast":null,"code":"import _slicedToArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\r\n * Score Calculation Module\r\n */\n\n/**\r\n * Calculates predicted score based on question difficulty distribution and timing data\r\n * @param {Array} questions - Array of questions\r\n * @param {Object} timingHistory - Optional timing history from previous quizzes\r\n * @returns {number|null} Predicted score percentage\r\n */\nexport function calculatePredictedScore(questions) {\n  var timingHistory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!questions.length) return null;\n\n  // Calculate difficulty distribution\n  var difficultyCount = questions.reduce(function (acc, q) {\n    acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;\n    return acc;\n  }, {});\n  var totalQuestions = questions.length;\n\n  // Base difficulty weights\n  var baseWeights = {\n    easy: 0.90,\n    // Expect 90% correct for easy\n    medium: 0.75,\n    // Expect 75% correct for medium\n    hard: 0.60 // Expect 60% correct for hard\n  };\n\n  // Adjust weights based on timing history if available\n  var adjustedWeights = _objectSpread({}, baseWeights);\n  if (timingHistory) {\n    var timeByDifficulty = timingHistory.timeByDifficulty;\n\n    // Calculate timing-based adjustments\n    Object.entries(timeByDifficulty).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        difficulty = _ref2[0],\n        avgTime = _ref2[1];\n      // If average time is significantly high (>30s), reduce expected success rate\n      if (avgTime > 30000) {\n        adjustedWeights[difficulty] *= 0.9;\n      }\n      // If average time is very low (<5s), also reduce expected success rate\n      else if (avgTime < 5000) {\n        adjustedWeights[difficulty] *= 0.95;\n      }\n    });\n  }\n\n  // Calculate base score from difficulty distribution with adjusted weights\n  var baseScore = ((difficultyCount.easy || 0) * adjustedWeights.easy + (difficultyCount.medium || 0) * adjustedWeights.medium + (difficultyCount.hard || 0) * adjustedWeights.hard) / totalQuestions * 100;\n\n  // Question count adjustment\n  var adjustment = 0;\n  if (totalQuestions <= 5) adjustment = 5; // Fewer questions = slightly higher chance\n  else if (totalQuestions >= 15) adjustment = -5; // More questions = slightly lower chance\n\n  // Additional timing-based adjustments\n  if (timingHistory) {\n    var avgTimePerQuestion = timingHistory.averageTime;\n    if (avgTimePerQuestion > 45000) {\n      // If avg time > 45s\n      adjustment -= 3; // Reduce predicted score\n    } else if (avgTimePerQuestion < 10000) {\n      // If avg time < 10s\n      adjustment -= 2; // Slight reduction for very quick answers\n    }\n  }\n  var finalScore = Math.min(100, Math.max(0, baseScore + adjustment));\n  return Math.round(finalScore);\n}\n\n/**\r\n * Calculates actual quiz score\r\n * @param {Array} responses - Array of user responses\r\n * @returns {number} Score percentage\r\n */\nexport function calculateScore(responses) {\n  if (!responses.length) return 0;\n  var correctAnswers = responses.filter(function (r) {\n    return r.correct;\n  }).length;\n  return Math.round(correctAnswers / responses.length * 100);\n}\n\n/**\r\n * Calculates weighted score based on difficulty and timing\r\n * @param {Object} response - User response data\r\n * @param {Object} weights - Weight factors\r\n * @returns {number} Weighted score\r\n */\nexport function calculateWeightedScore(response, weights) {\n  var timeWeight = 1.0;\n\n  // Adjust weight based on response time if available\n  if (response.timeSpent) {\n    if (response.timeSpent < 5000) {\n      // Very quick answer (<5s)\n      timeWeight = 0.9; // Slight penalty for potentially rushed answers\n    } else if (response.timeSpent > 60000) {\n      // Very long answer (>60s)\n      timeWeight = 0.95; // Slight penalty for uncertainty\n    }\n  }\n  return response.score * weights.score * timeWeight;\n}","map":{"version":3,"names":["calculatePredictedScore","questions","timingHistory","arguments","length","undefined","difficultyCount","reduce","acc","q","difficulty","totalQuestions","baseWeights","easy","medium","hard","adjustedWeights","_objectSpread","timeByDifficulty","Object","entries","forEach","_ref","_ref2","_slicedToArray","avgTime","baseScore","adjustment","avgTimePerQuestion","averageTime","finalScore","Math","min","max","round","calculateScore","responses","correctAnswers","filter","r","correct","calculateWeightedScore","response","weights","timeWeight","timeSpent","score"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/score-calculation/index.js"],"sourcesContent":["/**\r\n * Score Calculation Module\r\n */\r\n\r\n/**\r\n * Calculates predicted score based on question difficulty distribution and timing data\r\n * @param {Array} questions - Array of questions\r\n * @param {Object} timingHistory - Optional timing history from previous quizzes\r\n * @returns {number|null} Predicted score percentage\r\n */\r\nexport function calculatePredictedScore(questions, timingHistory = null) {\r\n  if (!questions.length) return null;\r\n\r\n  // Calculate difficulty distribution\r\n  const difficultyCount = questions.reduce((acc, q) => {\r\n    acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const totalQuestions = questions.length;\r\n  \r\n  // Base difficulty weights\r\n  const baseWeights = {\r\n    easy: 0.90,    // Expect 90% correct for easy\r\n    medium: 0.75,  // Expect 75% correct for medium\r\n    hard: 0.60     // Expect 60% correct for hard\r\n  };\r\n\r\n  // Adjust weights based on timing history if available\r\n  let adjustedWeights = { ...baseWeights };\r\n  if (timingHistory) {\r\n    const { timeByDifficulty } = timingHistory;\r\n    \r\n    // Calculate timing-based adjustments\r\n    Object.entries(timeByDifficulty).forEach(([difficulty, avgTime]) => {\r\n      // If average time is significantly high (>30s), reduce expected success rate\r\n      if (avgTime > 30000) {\r\n        adjustedWeights[difficulty] *= 0.9;\r\n      }\r\n      // If average time is very low (<5s), also reduce expected success rate\r\n      else if (avgTime < 5000) {\r\n        adjustedWeights[difficulty] *= 0.95;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Calculate base score from difficulty distribution with adjusted weights\r\n  const baseScore = (\r\n    ((difficultyCount.easy || 0) * adjustedWeights.easy +\r\n     (difficultyCount.medium || 0) * adjustedWeights.medium +\r\n     (difficultyCount.hard || 0) * adjustedWeights.hard) /\r\n    totalQuestions * 100\r\n  );\r\n\r\n  // Question count adjustment\r\n  let adjustment = 0;\r\n  if (totalQuestions <= 5) adjustment = 5;        // Fewer questions = slightly higher chance\r\n  else if (totalQuestions >= 15) adjustment = -5; // More questions = slightly lower chance\r\n\r\n  // Additional timing-based adjustments\r\n  if (timingHistory) {\r\n    const avgTimePerQuestion = timingHistory.averageTime;\r\n    if (avgTimePerQuestion > 45000) {  // If avg time > 45s\r\n      adjustment -= 3;  // Reduce predicted score\r\n    } else if (avgTimePerQuestion < 10000) {  // If avg time < 10s\r\n      adjustment -= 2;  // Slight reduction for very quick answers\r\n    }\r\n  }\r\n\r\n  const finalScore = Math.min(100, Math.max(0, baseScore + adjustment));\r\n  return Math.round(finalScore);\r\n}\r\n\r\n/**\r\n * Calculates actual quiz score\r\n * @param {Array} responses - Array of user responses\r\n * @returns {number} Score percentage\r\n */\r\nexport function calculateScore(responses) {\r\n  if (!responses.length) return 0;\r\n  const correctAnswers = responses.filter(r => r.correct).length;\r\n  return Math.round((correctAnswers / responses.length) * 100);\r\n}\r\n\r\n/**\r\n * Calculates weighted score based on difficulty and timing\r\n * @param {Object} response - User response data\r\n * @param {Object} weights - Weight factors\r\n * @returns {number} Weighted score\r\n */\r\nexport function calculateWeightedScore(response, weights) {\r\n  let timeWeight = 1.0;\r\n  \r\n  // Adjust weight based on response time if available\r\n  if (response.timeSpent) {\r\n    if (response.timeSpent < 5000) {  // Very quick answer (<5s)\r\n      timeWeight = 0.9;  // Slight penalty for potentially rushed answers\r\n    } else if (response.timeSpent > 60000) {  // Very long answer (>60s)\r\n      timeWeight = 0.95;  // Slight penalty for uncertainty\r\n    }\r\n  }\r\n  \r\n  return response.score * weights.score * timeWeight;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}