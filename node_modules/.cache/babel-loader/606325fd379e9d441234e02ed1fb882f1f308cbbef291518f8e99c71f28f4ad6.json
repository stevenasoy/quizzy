{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, withModifiers as _withModifiers, withKeys as _withKeys, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, normalizeClass as _normalizeClass, createBlock as _createBlock, createStaticVNode as _createStaticVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"app-container\"\n};\nvar _hoisted_2 = {\n  \"class\": \"main-content\"\n};\nvar _hoisted_3 = {\n  key: 0,\n  \"class\": \"stats-view\"\n};\nvar _hoisted_4 = {\n  \"class\": \"stats-header-actions\"\n};\nvar _hoisted_5 = {\n  key: 1,\n  \"class\": \"quiz-details-container\"\n};\nvar _hoisted_6 = {\n  key: 2,\n  \"class\": \"upload-container\"\n};\nvar _hoisted_7 = {\n  \"class\": \"header\"\n};\nvar _hoisted_8 = {\n  \"class\": \"header-actions\"\n};\nvar _hoisted_9 = {\n  key: 0,\n  \"class\": \"file-upload-section\"\n};\nvar _hoisted_10 = {\n  key: 0,\n  \"class\": \"error-section\"\n};\nvar _hoisted_11 = {\n  key: 1,\n  \"class\": \"selected-files\"\n};\nvar _hoisted_12 = {\n  \"class\": \"file-name\"\n};\nvar _hoisted_13 = [\"onClick\"];\nvar _hoisted_14 = {\n  \"class\": \"questions-section\"\n};\nvar _hoisted_15 = {\n  \"class\": \"question-input\"\n};\nvar _hoisted_16 = [\"disabled\"];\nvar _hoisted_17 = {\n  key: 1\n};\nvar _hoisted_18 = {\n  \"class\": \"predicted-score-container\"\n};\nvar _hoisted_19 = {\n  \"class\": \"score-prediction\"\n};\nvar _hoisted_20 = {\n  \"class\": \"predicted-value\"\n};\nvar _hoisted_21 = {\n  \"class\": \"prediction-explanation\"\n};\nvar _hoisted_22 = {\n  key: 4,\n  \"class\": \"error-message\"\n};\nvar _hoisted_23 = {\n  key: 0,\n  \"class\": \"loading-overlay\"\n};\nvar _hoisted_24 = {\n  key: 1,\n  \"class\": \"modal\"\n};\nvar _hoisted_25 = {\n  \"class\": \"modal-content\"\n};\nvar _hoisted_26 = {\n  key: 2,\n  \"class\": \"modal\"\n};\nvar _hoisted_27 = {\n  \"class\": \"modal-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"AccountButton\"]), _createVNode($setup[\"Sidebar\"], {\n    \"quiz-history\": $setup.quizHistory,\n    onCreateQuiz: $setup.handleCreateQuiz,\n    onRetakeQuiz: $setup.handleRetakeQuiz,\n    onClearHistory: $setup.clearHistory,\n    onSelectQuiz: $setup.handleQuizSelect,\n    onViewStats: _cache[0] || (_cache[0] = function ($event) {\n      return $setup.showStats = true;\n    })\n  }, null, 8 /* PROPS */, [\"quiz-history\"]), _createElementVNode(\"div\", _hoisted_2, [$setup.showStats ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    \"class\": \"back-btn\",\n    onClick: _cache[1] || (_cache[1] = function ($event) {\n      return $setup.showStats = false;\n    })\n  }, \" ‚Üê Back to Quiz \"), _createElementVNode(\"button\", {\n    \"class\": \"create-quiz-btn\",\n    onClick: $setup.handleCreateQuizFromStats\n  }, \" + Create New Quiz \")]), _createVNode($setup[\"StudyStats\"], {\n    \"quiz-history\": $setup.quizHistory\n  }, null, 8 /* PROPS */, [\"quiz-history\"])])) : $setup.selectedQuiz ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createVNode($setup[\"QuizHistoryDetails\"], {\n    quiz: $setup.selectedQuiz,\n    onRetakeQuiz: $setup.handleRetakeQuiz,\n    onClose: _cache[2] || (_cache[2] = function ($event) {\n      return $setup.selectedQuiz = null;\n    })\n  }, null, 8 /* PROPS */, [\"quiz\"])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_cache[9] || (_cache[9] = _createElementVNode(\"h1\", null, \"Quiz Generator\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    \"class\": \"stats-btn\",\n    onClick: _cache[3] || (_cache[3] = function ($event) {\n      return $setup.showStats = true;\n    })\n  }, \" üìä Study Stats \"), _createElementVNode(\"button\", {\n    \"class\": \"monitor-btn\",\n    onClick: _cache[4] || (_cache[4] = function ($event) {\n      return $setup.showSpacedRepetitionMonitor = true;\n    })\n  }, \" ‚è±Ô∏è SR Monitor \"), _createVNode($setup[\"AccountButton\"])])]), !$setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_cache[13] || (_cache[13] = _createElementVNode(\"h2\", null, \"Upload Files\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    \"class\": \"upload-area\",\n    onDragover: _cache[5] || (_cache[5] = _withModifiers(function () {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleDrop, [\"prevent\"]),\n    onClick: $setup.triggerFileInput,\n    role: \"button\",\n    tabindex: \"0\",\n    onKeydown: _withKeys($setup.triggerFileInput, [\"enter\"])\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: $setup.handleFileSelect,\n    accept: \".pdf,.docx,.pptx,.txt\",\n    ref: \"fileInput\",\n    \"class\": \"file-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _cache[10] || (_cache[10] = _createStaticVNode(\"<div class=\\\"upload-prompt\\\" data-v-7ba5bd90><p data-v-7ba5bd90>Drag and drop files here or click to select</p><div class=\\\"supported-formats\\\" data-v-7ba5bd90><p data-v-7ba5bd90>Supported formats:</p><ul data-v-7ba5bd90><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìÑ</span> Documents (PDF, DOCX)</li><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìä</span> Presentations (PPTX)</li><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìù</span> Text files (TXT)</li></ul></div></div>\", 1))], 32 /* NEED_HYDRATION */), $setup.hasFileErrors ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createVNode($setup[\"FileErrorDisplay\"], {\n    \"extraction-errors\": $setup.extractionErrors,\n    \"unsupported-files\": $setup.unsupportedFiles\n  }, null, 8 /* PROPS */, [\"extraction-errors\", \"unsupported-files\"])])) : _createCommentVNode(\"v-if\", true), $setup.selectedFiles.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_cache[11] || (_cache[11] = _createElementVNode(\"h3\", null, \"Selected Files:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedFiles, function (file, index) {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      \"class\": \"file-item\"\n    }, [_createElementVNode(\"span\", _hoisted_12, _toDisplayString(file.name), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: function onClick($event) {\n        return $setup.removeFile(index);\n      },\n      \"class\": \"remove-btn\",\n      title: \"Remove file\"\n    }, \"√ó\", 8 /* PROPS */, _hoisted_13)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_14, [_cache[12] || (_cache[12] = _createElementVNode(\"h2\", null, \"Number of Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_15, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = function ($event) {\n      return $setup.questionCount = $event;\n    }),\n    min: \"1\",\n    max: \"20\",\n    placeholder: \"Enter number of questions\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.questionCount]])])]), _createElementVNode(\"button\", {\n    \"class\": \"submit-btn\",\n    disabled: !$setup.isFormValid || $setup.isLoading,\n    onClick: $setup.handleSubmit\n  }, _toDisplayString($setup.isLoading ? 'Generating Questions...' : 'Submit'), 9 /* TEXT, PROPS */, _hoisted_16)])) : _createCommentVNode(\"v-if\", true), $setup.predictedScore !== null && !$setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [_createElementVNode(\"div\", _hoisted_18, [_cache[15] || (_cache[15] = _createElementVNode(\"h2\", null, \"Ready to Start!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_19, [_createElementVNode(\"div\", {\n    \"class\": _normalizeClass([\"score-circle\", $setup.getPredictedScoreClass])\n  }, [_createElementVNode(\"span\", _hoisted_20, _toDisplayString($setup.predictedScore) + \"%\", 1 /* TEXT */), _cache[14] || (_cache[14] = _createElementVNode(\"span\", {\n    \"class\": \"prediction-label\"\n  }, \"Predicted Score\", -1 /* HOISTED */))], 2 /* CLASS */)]), _createElementVNode(\"p\", _hoisted_21, \" Based on your study material, we predict you'll score around \" + _toDisplayString($setup.predictedScore) + \"%. \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    \"class\": \"start-quiz-btn\",\n    onClick: $setup.startQuiz\n  }, \"Start Quiz\")])])) : _createCommentVNode(\"v-if\", true), $setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createBlock($setup[\"FlashcardQuiz\"], {\n    key: 2,\n    questions: $setup.adaptiveQuestions,\n    \"total-questions\": Number($setup.questionCount),\n    onQuizCompleted: $setup.handleQuizComplete,\n    onUpdateQuestion: $setup.handleQuestionUpdate\n  }, null, 8 /* PROPS */, [\"questions\", \"total-questions\"])) : _createCommentVNode(\"v-if\", true), $setup.quizFinished ? (_openBlock(), _createBlock($setup[\"QuizResults\"], {\n    key: 3,\n    questions: $setup.formatQuestionsForResults,\n    \"user-answers\": $setup.formatUserAnswersForResults,\n    score: $setup.correctAnswersCount,\n    \"predicted-score\": $setup.predictedScore,\n    onRestart: $setup.restartQuiz,\n    onGoBack: $setup.resetToMainScreen\n  }, null, 8 /* PROPS */, [\"questions\", \"user-answers\", \"score\", \"predicted-score\"])) : _createCommentVNode(\"v-if\", true), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]))]), _createCommentVNode(\" Loading Overlay \"), $setup.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, _cache[16] || (_cache[16] = [_createElementVNode(\"div\", {\n    \"class\": \"loading-content\"\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"typewriter\"\n  }, \"Generating quiz\"), _createElementVNode(\"div\", {\n    \"class\": \"dots\"\n  }, [_createElementVNode(\"span\", null, \".\"), _createElementVNode(\"span\", null, \".\"), _createElementVNode(\"span\", null, \".\")])], -1 /* HOISTED */)]))) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Study Stats Modal \"), $setup.showStats ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, [_createElementVNode(\"div\", _hoisted_25, [_createElementVNode(\"button\", {\n    \"class\": \"close-btn\",\n    onClick: _cache[7] || (_cache[7] = function ($event) {\n      return $setup.showStats = false;\n    })\n  }, \"√ó\"), _createVNode($setup[\"StudyStats\"])])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Spaced Repetition Monitor Modal \"), $setup.showSpacedRepetitionMonitor ? (_openBlock(), _createElementBlock(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [_createElementVNode(\"button\", {\n    \"class\": \"close-btn\",\n    onClick: _cache[8] || (_cache[8] = function ($event) {\n      return $setup.showSpacedRepetitionMonitor = false;\n    })\n  }, \"√ó\"), _createVNode($setup[\"SpacedRepetitionMonitor\"])])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createVNode","$setup","quizHistory","onCreateQuiz","handleCreateQuiz","onRetakeQuiz","handleRetakeQuiz","onClearHistory","clearHistory","onSelectQuiz","handleQuizSelect","onViewStats","_cache","$event","showStats","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","onClick","handleCreateQuizFromStats","selectedQuiz","_hoisted_5","quiz","onClose","_hoisted_6","_hoisted_7","_hoisted_8","showSpacedRepetitionMonitor","quizStarted","quizFinished","_hoisted_9","onDragover","_withModifiers","onDrop","handleDrop","triggerFileInput","role","tabindex","onKeydown","_withKeys","type","onChange","handleFileSelect","accept","ref","hasFileErrors","_hoisted_10","extractionErrors","unsupportedFiles","selectedFiles","length","_hoisted_11","_Fragment","_renderList","file","index","key","_hoisted_12","_toDisplayString","name","removeFile","title","_hoisted_13","_hoisted_14","_hoisted_15","questionCount","min","max","placeholder","disabled","isFormValid","isLoading","handleSubmit","_hoisted_16","predictedScore","_hoisted_17","_hoisted_18","_hoisted_19","_normalizeClass","getPredictedScoreClass","_hoisted_20","_hoisted_21","startQuiz","_createBlock","questions","adaptiveQuestions","Number","onQuizCompleted","handleQuizComplete","onUpdateQuestion","handleQuestionUpdate","formatQuestionsForResults","formatUserAnswersForResults","score","correctAnswersCount","onRestart","restartQuiz","onGoBack","resetToMainScreen","error","_hoisted_22","_createCommentVNode","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <AccountButton />\n    <Sidebar \n      :quiz-history=\"quizHistory\" \n      @create-quiz=\"handleCreateQuiz\"\n      @retake-quiz=\"handleRetakeQuiz\"\n      @clear-history=\"clearHistory\"\n      @select-quiz=\"handleQuizSelect\"\n      @view-stats=\"showStats = true\"\n    />\n    <div class=\"main-content\">\n      <div v-if=\"showStats\" class=\"stats-view\">\n        <div class=\"stats-header-actions\">\n          <button class=\"back-btn\" @click=\"showStats = false\">\n            ‚Üê Back to Quiz\n          </button>\n          <button class=\"create-quiz-btn\" @click=\"handleCreateQuizFromStats\">\n            + Create New Quiz\n          </button>\n        </div>\n        <StudyStats :quiz-history=\"quizHistory\" />\n      </div>\n      \n      <div v-else-if=\"selectedQuiz\" class=\"quiz-details-container\">\n        <QuizHistoryDetails\n          :quiz=\"selectedQuiz\"\n          @retake-quiz=\"handleRetakeQuiz\"\n          @close=\"selectedQuiz = null\"\n        />\n      </div>\n\n      <div v-else class=\"upload-container\">\n        <div class=\"header\">\n          <h1>Quiz Generator</h1>\n          <div class=\"header-actions\">\n            <button class=\"stats-btn\" @click=\"showStats = true\">\n              üìä Study Stats\n            </button>\n            <button class=\"monitor-btn\" @click=\"showSpacedRepetitionMonitor = true\">\n              ‚è±Ô∏è SR Monitor\n            </button>\n            <AccountButton />\n          </div>\n        </div>\n        \n        <div v-if=\"!quizStarted && !quizFinished\" class=\"file-upload-section\">\n          <h2>Upload Files</h2>\n          <div class=\"upload-area\" \n            @dragover.prevent \n            @drop.prevent=\"handleDrop\"\n            @click=\"triggerFileInput\"\n            role=\"button\"\n            tabindex=\"0\"\n            @keydown.enter=\"triggerFileInput\"\n          >\n            <input \n              type=\"file\" \n              @change=\"handleFileSelect\" \n              accept=\".pdf,.docx,.pptx,.txt\"\n              ref=\"fileInput\"\n              class=\"file-input\"\n            >\n            <div class=\"upload-prompt\">\n              <p>Drag and drop files here or click to select</p>\n              <div class=\"supported-formats\">\n                <p>Supported formats:</p>\n                <ul>\n                  <li><span class=\"format-icon\">üìÑ</span> Documents (PDF, DOCX)</li>\n                  <li><span class=\"format-icon\">üìä</span> Presentations (PPTX)</li>\n                  <li><span class=\"format-icon\">üìù</span> Text files (TXT)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"hasFileErrors\" class=\"error-section\">\n            <FileErrorDisplay\n              :extraction-errors=\"extractionErrors\"\n              :unsupported-files=\"unsupportedFiles\"\n            />\n          </div>\n\n          <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n            <h3>Selected Files:</h3>\n            <ul>\n              <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n                <span class=\"file-name\">{{ file.name }}</span>\n                <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">√ó</button>\n              </li>\n            </ul>\n          </div>\n\n          <div class=\"questions-section\">\n            <h2>Number of Questions</h2>\n            <div class=\"question-input\">\n              <input\n                type=\"number\"\n                v-model=\"questionCount\"\n                min=\"1\"\n                max=\"20\"\n                placeholder=\"Enter number of questions\"\n              />\n            </div>\n          </div>\n\n          <button \n            class=\"submit-btn\" \n            :disabled=\"!isFormValid || isLoading\"\n            @click=\"handleSubmit\"\n          >\n            {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n          </button>\n        </div>\n\n        <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n          <div class=\"predicted-score-container\">\n            <h2>Ready to Start!</h2>\n            <div class=\"score-prediction\">\n              <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n                <span class=\"predicted-value\">{{ predictedScore }}%</span>\n                <span class=\"prediction-label\">Predicted Score</span>\n              </div>\n            </div>\n            <p class=\"prediction-explanation\">\n              Based on your study material, we predict you'll score around {{ predictedScore }}%.\n            </p>\n            <button class=\"start-quiz-btn\" @click=\"startQuiz\">Start Quiz</button>\n          </div>\n        </div>\n\n        <FlashcardQuiz\n          v-if=\"quizStarted && !quizFinished\"\n          :questions=\"adaptiveQuestions\"\n          :total-questions=\"Number(questionCount)\"\n          @quiz-completed=\"handleQuizComplete\"\n          @update-question=\"handleQuestionUpdate\"\n        />\n\n        <QuizResults\n          v-if=\"quizFinished\"\n          :questions=\"formatQuestionsForResults\"\n          :user-answers=\"formatUserAnswersForResults\"\n          :score=\"correctAnswersCount\"\n          :predicted-score=\"predictedScore\"\n          @restart=\"restartQuiz\"\n          @go-back=\"resetToMainScreen\"\n        />\n\n        <div v-if=\"error\" class=\"error-message\">\n          {{ error }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading Overlay -->\n    <div v-if=\"isLoading\" class=\"loading-overlay\">\n      <div class=\"loading-content\">\n        <div class=\"typewriter\">Generating quiz</div>\n        <div class=\"dots\">\n          <span>.</span>\n          <span>.</span>\n          <span>.</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Study Stats Modal -->\n    <div v-if=\"showStats\" class=\"modal\">\n      <div class=\"modal-content\">\n        <button class=\"close-btn\" @click=\"showStats = false\">&times;</button>\n        <StudyStats />\n      </div>\n    </div>\n\n    <!-- Spaced Repetition Monitor Modal -->\n    <div v-if=\"showSpacedRepetitionMonitor\" class=\"modal\">\n      <div class=\"modal-content\">\n        <button class=\"close-btn\" @click=\"showSpacedRepetitionMonitor = false\">&times;</button>\n        <SpacedRepetitionMonitor />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\nimport QuizHistoryDetails from './components/QuizHistoryDetails.vue';\nimport AccountButton from './components/AccountButton.vue';\nimport StudyStats from './components/StudyStats.vue';\nimport SpacedRepetitionMonitor from './components/SpacedRepetitionMonitor.vue';\nimport { \n  calculatePredictedScore,\n  calculateScore,\n  processQuizResponse,\n  isSimilarQuestion,\n  updateQuizState\n} from './algorithms';\nimport { calculateNextReview } from './algorithms/spaced-repetition';\nimport { useStore } from 'vuex';\n\nconst store = useStore();\n\n// File handling state\nconst selectedFiles = ref([]);\nconst fileInput = ref(null);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\n\n// Quiz state\nconst questionCount = ref('');\nconst isLoading = ref(false);\nconst error = ref('');\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst quizFinished = ref(false);\nconst adaptiveQuestions = ref([]);\nconst userResponses = ref([]);\nconst extractedContent = ref('');\nconst selectedQuiz = ref(null);\n\n// Add isRetaking flag to track retakes\nconst isRetaking = ref(false);\nconst retakeIndex = ref(-1);\n\n// Stats view state\nconst showStats = ref(false);\nconst showSpacedRepetitionMonitor = ref(false);\n\n// Add new state for question pools\nconst questionPools = ref({\n  easy: [],\n  medium: [],\n  hard: []\n});\n\nconst POOL_SIZE = 5;\nconst LOW_THRESHOLD = 2;\n\n// Add computed property for quiz history\nconst quizHistory = computed(() => store.state.quizHistory);\n\n// Initialize store and load data\nonMounted(async () => {\n  await store.dispatch('initializeStore');\n});\n\n// Computed properties\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n\n// File handling methods\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\n// Quiz handling methods\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  userResponses.value = [];\n  extractedContent.value = '';\n  extractionErrors.value = [];\n\n  try {\n    console.log('Processing files:', selectedFiles.value.map(f => ({ name: f.name, type: f.type })));\n    \n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    const validContents = fileContents.filter(content => content && content.trim().length > 0);\n    console.log('Number of files with valid content:', validContents.length);\n    \n    if (validContents.length === 0) {\n      throw new Error('No valid content could be extracted from the selected files.');\n    }\n\n    extractedContent.value = validContents.join('\\n\\n');\n    console.log('Total content length:', extractedContent.value.length);\n    \n    if (extractedContent.value.trim().length < 50) {\n      throw new Error('The extracted content is too short to generate meaningful questions.');\n    }\n\n    // Generate initial pools of questions\n    await generateQuestionPools();\n    \n    predictedScore.value = calculatePredictedScore([\n      ...questionPools.value.easy,\n      ...questionPools.value.medium,\n      ...questionPools.value.hard\n    ]);\n\n  } catch (err) {\n    console.error('Error in handleSubmit:', err);\n    error.value = err.message || 'An unexpected error occurred while generating questions.';\n    adaptiveQuestions.value = [];\n    predictedScore.value = null;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// New function to generate questions for a specific difficulty\nconst generateQuestionsForDifficulty = async (difficulty, count) => {\n  const questions = await generateQuestions(\n    extractedContent.value,\n    count,\n    difficulty // We'll need to modify generateQuestions to accept this parameter\n  );\n  \n  return questions.map(q => ({\n    ...q,\n    difficulty,\n    id: crypto.randomUUID(),\n    adapted: false\n  }));\n};\n\n// New function to manage question pools\nconst generateQuestionPools = async () => {\n  try {\n    // Generate 5 questions for each difficulty\n    const [easyQuestions, mediumQuestions, hardQuestions] = await Promise.all([\n      generateQuestionsForDifficulty('easy', POOL_SIZE),\n      generateQuestionsForDifficulty('medium', POOL_SIZE),\n      generateQuestionsForDifficulty('hard', POOL_SIZE)\n    ]);\n\n    questionPools.value = {\n      easy: easyQuestions,\n      medium: mediumQuestions,\n      hard: hardQuestions\n    };\n  } catch (error) {\n    console.error('Error generating question pools:', error);\n    throw error;\n  }\n};\n\n// Modified startQuiz to use medium questions initially\nconst startQuiz = () => {\n  // Start with medium questions\n  adaptiveQuestions.value = questionPools.value.medium.slice(0, Number(questionCount.value));\n  quizStarted.value = true;\n  quizFinished.value = false;\n};\n\n// New function to check and replenish question pools\nconst replenishQuestionPool = async (difficulty) => {\n  const pool = questionPools.value[difficulty];\n  if (pool.length <= LOW_THRESHOLD) {\n    const neededQuestions = POOL_SIZE - pool.length;\n    const newQuestions = await generateQuestionsForDifficulty(difficulty, neededQuestions);\n    questionPools.value[difficulty] = [...pool, ...newQuestions];\n  }\n};\n\n// Modified handleQuestionUpdate to use question pools\nconst handleQuestionUpdate = async (updatedQuestion) => {\n  // Update quiz state based on user's answer\n  const adaptiveState = updateQuizState({\n    availableQuestions: adaptiveQuestions.value,\n    usedQuestions: userResponses.value,\n    currentDifficulty: updatedQuestion.difficulty\n  }, {\n    questionId: updatedQuestion.id,\n    correct: updatedQuestion.correct,\n    difficulty: updatedQuestion.difficulty\n  });\n\n  // Find the current question index\n  const currentIndex = adaptiveQuestions.value.findIndex(q => q.id === updatedQuestion.id);\n  if (currentIndex === -1) return;\n\n  // Update the current question with the user's response\n  adaptiveQuestions.value[currentIndex] = {\n    ...updatedQuestion,\n    adapted: true\n  };\n\n  // Remove the used question from its pool\n  const currentDifficulty = updatedQuestion.difficulty;\n  questionPools.value[currentDifficulty] = questionPools.value[currentDifficulty]\n    .filter(q => q.id !== updatedQuestion.id);\n\n  // Check if we need to replenish the pool\n  await replenishQuestionPool(currentDifficulty);\n\n  // If there's a next question, select it from the appropriate pool based on adaptive state\n  if (currentIndex + 1 < Number(questionCount.value)) {\n    const nextDifficulty = adaptiveState.currentDifficulty;\n    const nextQuestion = questionPools.value[nextDifficulty][0];\n    \n    if (nextQuestion) {\n      adaptiveQuestions.value[currentIndex + 1] = {\n        ...nextQuestion,\n        adapted: false\n      };\n    }\n  }\n};\n\nconst handleQuizComplete = (responses) => {\n  userResponses.value = responses;\n  \n  // Update the adaptiveQuestions with user answers and spaced repetition data\n  adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => {\n    const response = responses[index];\n    const performance = response?.correct ? 5 : 0; // 5 for correct, 0 for incorrect\n    \n    // Update spaced repetition data using the new function\n    const updatedSpacedRepetition = calculateNextReview(question.spacedRepetition, performance);\n    \n    return {\n      ...question,\n      userAnswer: response?.userAnswer,\n      isCorrect: response?.correct,\n      spacedRepetition: updatedSpacedRepetition\n    };\n  });\n  \n  // Set quiz states\n  quizStarted.value = false;\n  quizFinished.value = true;\n  \n  // Save results\n  saveQuizResults();\n};\n\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  userResponses.value = [];\n};\n\nconst resetToMainScreen = () => {\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\n// Helper functions\nasync function readFileContent(file) {\n  return new Promise((resolve) => {\n    try {\n      console.log('File type:', file.type);\n      console.log('File name:', file.name);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n          resolve('');\n          }\n        })\n      .catch(error => {\n        console.error('Error processing file:', error);\n          extractionErrors.value.push({\n            fileName: file.name,\n          message: `Error processing file: ${error.message}`\n        });\n        resolve('');\n      });\n    } catch (error) {\n      console.error('Error preparing file:', error);\n        extractionErrors.value.push({\n          fileName: file.name,\n        message: `Error preparing file: ${error.message}`\n      });\n      resolve('');\n    }\n  });\n}\n\nasync function generateQuestions(content, count, targetDifficulty = null) {\n  const maxRetries = 3;\n  let retryCount = 0;\n  let allQuestions = [];\n\n  while (retryCount < maxRetries && allQuestions.length < count) {\n    try {\n      const remainingCount = count - allQuestions.length;\n      const strategy = retryCount % 3;\n      let prompt = `Generate exactly ${remainingCount} questions with ${targetDifficulty || 'mixed'} difficulty. DO NOT use markdown formatting or asterisks for emphasis.\nFOLLOW THIS EXACT FORMAT WITH NO DEVIATIONS:\n\nFor Multiple Choice Questions:\nQuestion: What is the question text?\nA) First option\nB) Second option\nC) Third option\nD) Fourth option\nAnswer: A* (or B*, C*, D* - add asterisk to correct answer)\nDifficulty: ${targetDifficulty || 'medium'} (${targetDifficulty ? `must be ${targetDifficulty}` : 'or easy or hard'})\n\nFor True/False Questions:\nTrue/False: What is the question text?\nAnswer: True* (or False* - add asterisk to correct answer)\nDifficulty: ${targetDifficulty || 'medium'} (${targetDifficulty ? `must be ${targetDifficulty}` : 'or easy or hard'})\n\nREQUIREMENTS:\n1. Use the exact format shown above\n2. Do not add any extra formatting or text\n3. Do not use markdown\n4. Do not use bold or italics\n5. Each question must end with a difficulty level${targetDifficulty ? ` of ${targetDifficulty}` : ''}\n6. Questions must be based on this content:\n\n${content}\n\nSTRATEGY: `;\n\n      switch (strategy) {\n        case 0:\n          prompt += 'Create a mix of multiple-choice and true/false questions that directly test understanding of the content.';\n          break;\n        case 1:\n          prompt += 'Create questions that focus on what is NOT mentioned or opposite relationships in the content.';\n          break;\n        case 2:\n          prompt += 'Create questions that test application and inference of the concepts mentioned in the content.';\n          break;\n      }\n\n      const response = await axios.post(\n        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n        {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7 + (retryCount * 0.1),\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 2048,\n          }\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n\n      if (!response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {\n        throw new Error('Invalid response format from Gemini API');\n      }\n\n      const responseText = response.data.candidates[0].content.parts[0].text\n        .replace(/\\*\\*/g, '') // Remove markdown bold\n        .replace(/\\*/g, '*')  // Normalize asterisks\n        .replace(/[\"\"]/g, '\"'); // Normalize quotes\n\n      console.log('Generated response:', responseText);\n\n      const newQuestions = processQuizResponse(responseText, content).questions;\n      \n      if (newQuestions.length === 0) {\n        console.error('No valid questions parsed from response');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        continue;\n      }\n\n      // Filter questions by difficulty if specified\n      const validQuestions = targetDifficulty \n        ? newQuestions.filter(q => q.difficulty === targetDifficulty)\n        : newQuestions;\n\n      // Add unique IDs and initialize spaced repetition data for new questions\n      const questionsWithIds = validQuestions.map(q => ({\n        ...q,\n        id: crypto.randomUUID(),\n        spacedRepetition: {\n          repetitions: 0,\n          ease: 2.5,\n          interval: 1,\n          nextReviewDate: null,\n          lastReviewDate: null\n        }\n      }));\n\n      const uniqueNewQuestions = questionsWithIds.filter(newQ => \n        !allQuestions.some(existingQ => isSimilarQuestion(newQ, existingQ))\n      );\n\n      allQuestions = [...allQuestions, ...uniqueNewQuestions];\n      \n      if (allQuestions.length >= count) {\n        return allQuestions.slice(0, count);\n      }\n\n      retryCount++;\n\n    } catch (error) {\n      console.error(`Attempt ${retryCount + 1} failed:`, error);\n      retryCount++;\n      \n      if (error.response?.status === 429) {\n        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));\n      } else if (retryCount === maxRetries) {\n        throw new Error(`Failed to generate enough unique questions after ${maxRetries} attempts. ${error.response?.data?.error?.message || error.message}`);\n      } else {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n  }\n\n  if (allQuestions.length < count) {\n    throw new Error(`Could only generate ${allQuestions.length} unique questions out of ${count} requested. Please try with different content or reduce the number of questions.`);\n  }\n\n  return allQuestions;\n}\n\n// Results formatting\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    options: q.options,\n    userAnswer: userResponses.value[index]?.userAnswer,\n    correctAnswer: q.correctAnswer,\n    explanation: q.explanation,\n    isCorrect: userResponses.value[index]?.correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update the calculateScore function\nconst score = computed(() => {\n  return calculateScore(userResponses.value);\n});\n\n// Update the saveQuizResults function to use Vuex\nconst saveQuizResults = () => {\n  const quizResult = {\n    fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n    questionCount: Number(questionCount.value),\n    predictedScore: predictedScore.value,\n    actualScore: score.value / 100, // Convert percentage to decimal\n    date: new Date(),\n    fileContent: extractedContent.value,\n    questions: adaptiveQuestions.value.map((q, index) => ({\n      id: q.id,\n      text: q.text,\n      type: q.type,\n      options: q.options,\n      userAnswer: userResponses.value[index]?.userAnswer,\n      correctAnswer: q.correctAnswer,\n      isCorrect: userResponses.value[index]?.correct,\n      explanation: q.explanation,\n      difficulty: q.difficulty,\n      spacedRepetition: q.spacedRepetition\n    }))\n  };\n  \n  if (isRetaking.value && retakeIndex.value !== -1) {\n    store.commit('updateQuizResult', { index: retakeIndex.value, result: quizResult });\n  } else {\n    store.commit('addQuizResult', quizResult);\n  }\n  \n  // Also update the questions in the store with their new spaced repetition data\n  store.commit('updateQuestions', adaptiveQuestions.value);\n  \n  // Save state to localStorage\n  store.dispatch('saveState');\n  \n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Update the handleRetakeQuiz function to set retake flags\nconst handleRetakeQuiz = async (quizToRetake) => {\n  // Find the index of the quiz being retaken\n  retakeIndex.value = quizHistory.value.findIndex(quiz => \n    quiz.fileName === quizToRetake.fileName && \n    quiz.questionCount === quizToRetake.questionCount &&\n    quiz.fileContent === quizToRetake.fileContent\n  );\n  \n  if (retakeIndex.value === -1) {\n    console.error('Could not find original quiz to retake');\n    return;\n  }\n  \n  isRetaking.value = true;\n  \n  // Reset quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  selectedQuiz.value = null;  // Reset selected quiz\n  \n  // Set the question count from the previous quiz\n  questionCount.value = quizToRetake.questionCount.toString();\n  \n  // Create a dummy file with the same name\n  const file = new File([''], quizToRetake.fileName, {\n    type: 'text/plain'\n  });\n  \n  // Set the selected file and content\n  selectedFiles.value = [file];\n  extractedContent.value = quizToRetake.fileContent;\n  \n  // Generate new quiz using the stored content\n  try {\n    isLoading.value = true;\n    const requestedQuestionCount = Number(questionCount.value);\n    \n    const questions = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    if (!questions || questions.length === 0) {\n      throw new Error('No valid questions could be generated.');\n    }\n    \n    adaptiveQuestions.value = questions;\n    predictedScore.value = calculatePredictedScore(adaptiveQuestions.value);\n    \n    // After generating questions, start the quiz\n    quizStarted.value = true;\n  } catch (err) {\n    error.value = `Error generating questions: ${err.message}`;\n    // Reset retake flags on error\n    isRetaking.value = false;\n    retakeIndex.value = -1;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Update handleCreateQuiz to reset retake flags\nconst handleCreateQuiz = () => {\n  showStats.value = false;\n  selectedQuiz.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  selectedFiles.value = [];\n  questionCount.value = '';\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  isRetaking.value = false;\n  retakeIndex.value = -1;\n};\n\n// Add the clearHistory function\nconst clearHistory = () => {\n  if (confirm('Are you sure you want to clear all quiz history? This cannot be undone.')) {\n    store.dispatch('clearQuizHistory');\n  }\n};\n\n// Add function to handle quiz selection\nconst handleQuizSelect = (quiz) => {\n  if (showStats.value) {\n    showStats.value = false;\n    // Add small delay to ensure smooth transition\n    setTimeout(() => {\n      selectedQuiz.value = quiz;\n    }, 100);\n  } else {\n    selectedQuiz.value = quiz;\n  }\n};\n\n// Add new method to handle create quiz from stats view\nconst handleCreateQuizFromStats = () => {\n  showStats.value = false;\n  handleCreateQuiz();\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px; /* Same as sidebar width */\n  padding: 2rem;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: #f5f5f5;\n  overflow-y: auto;\n}\n\n.upload-container {\n  width: 90%;\n  max-width: 800px;\n  margin: 0 auto;\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(255, 255, 255, 0.85);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n  backdrop-filter: blur(2px);\n}\n\n.loading-content {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 2rem;\n  color: #333;\n  font-weight: 500;\n}\n\n.typewriter {\n  overflow: hidden;\n  white-space: nowrap;\n  animation: typing 3s steps(14) infinite;\n  border-right: 3px solid #4CAF50;\n}\n\n.dots {\n  display: flex;\n}\n\n.dots span {\n  opacity: 0;\n  animation: dot 1.5s infinite;\n  animation-fill-mode: both;\n}\n\n.dots span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.dots span:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0%, 90%, 100% {\n    width: 0;\n  }\n  30%, 60% {\n    width: 14ch;\n  }\n}\n\n@keyframes dot {\n  0%, 100% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n}\n\n.quiz-details-container {\n  width: 90%;\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.review-reminder {\n  margin-bottom: 2rem;\n  text-align: center;\n}\n\n.review-btn {\n  background: #2196F3;\n  color: white;\n  padding: 1rem 2rem;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 1.1rem;\n  transition: background-color 0.2s;\n}\n\n.review-btn:hover {\n  background: #1976D2;\n}\n\n.stats-view {\n  width: 90%;\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.back-btn {\n  margin-bottom: 1rem;\n  padding: 0.5rem 1rem;\n  background: none;\n  border: none;\n  color: #666;\n  cursor: pointer;\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  transition: color 0.2s;\n}\n\n.back-btn:hover {\n  color: #2196F3;\n}\n\n.stats-header-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.create-quiz-btn {\n  padding: 0.5rem 1.5rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  transition: all 0.2s;\n}\n\n.create-quiz-btn:hover {\n  background-color: #45a049;\n  transform: translateY(-1px);\n}\n\n.review-button {\n  background: #2196F3;\n  color: white;\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 0.9rem;\n  transition: background 0.2s;\n}\n\n.review-button:hover {\n  background: #1976D2;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background: white;\n  border-radius: 12px;\n  width: 100%;\n  max-width: 900px;\n  max-height: 90vh;\n  overflow-y: auto;\n}\n\n.monitor-btn {\n  padding: 0.5rem 1rem;\n  background: #f8f9fa;\n  border: 1px solid #e0e0e0;\n  border-radius: 20px;\n  color: #666;\n  cursor: pointer;\n  font-size: 0.9rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  transition: all 0.2s;\n}\n\n.monitor-btn:hover {\n  background: #e3f2fd;\n  color: #2196F3;\n  border-color: #2196F3;\n}\n\n.header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 2rem;\n}\n\n.header-actions {\n  display: flex;\n  gap: 1rem;\n}\n\n.stats-btn {\n  padding: 0.5rem 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: all 0.2s;\n}\n\n.stats-btn:hover {\n  background-color: #45a049;\n  transform: translateY(-1px);\n}\n\n.monitor-btn {\n  padding: 0.5rem 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: all 0.2s;\n}\n\n.monitor-btn:hover {\n  background-color: #45a049;\n  transform: translateY(-1px);\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}