{"ast":null,"code":"import \"core-js/modules/es.date.to-string.js\";\n/**\r\n * Score Classification Module\r\n */\n\n/**\r\n * Get score class based on percentage\r\n * @param {number} score - Score percentage\r\n * @returns {string} Score classification\r\n */\nexport function getScoreClass(score) {\n  if (score >= 90) return 'excellent';\n  if (score >= 80) return 'good';\n  if (score >= 70) return 'average';\n  return 'needs-improvement';\n}\n\n/**\r\n * Format date relative to current time\r\n * @param {string|Date} date - Date to format\r\n * @returns {string} Formatted date string\r\n */\nexport function formatRelativeDate(date) {\n  if (!date) return 'No date';\n  var d = new Date(date);\n  if (isNaN(d.getTime())) return 'Invalid date';\n  var now = new Date();\n  var diff = now - d;\n  var days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  if (days === 0) {\n    return 'Today, ' + d.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } else if (days === 1) {\n    return 'Yesterday';\n  } else if (days < 7) {\n    return \"\".concat(days, \" days ago\");\n  } else {\n    return d.toLocaleDateString();\n  }\n}","map":{"version":3,"names":["getScoreClass","score","formatRelativeDate","date","d","Date","isNaN","getTime","now","diff","days","Math","floor","toLocaleTimeString","hour","minute","concat","toLocaleDateString"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/score-classification/index.js"],"sourcesContent":["/**\r\n * Score Classification Module\r\n */\r\n\r\n/**\r\n * Get score class based on percentage\r\n * @param {number} score - Score percentage\r\n * @returns {string} Score classification\r\n */\r\nexport function getScoreClass(score) {\r\n  if (score >= 90) return 'excellent';\r\n  if (score >= 80) return 'good';\r\n  if (score >= 70) return 'average';\r\n  return 'needs-improvement';\r\n}\r\n\r\n/**\r\n * Format date relative to current time\r\n * @param {string|Date} date - Date to format\r\n * @returns {string} Formatted date string\r\n */\r\nexport function formatRelativeDate(date) {\r\n  if (!date) return 'No date';\r\n  \r\n  const d = new Date(date);\r\n  if (isNaN(d.getTime())) return 'Invalid date';\r\n  \r\n  const now = new Date();\r\n  const diff = now - d;\r\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\r\n  \r\n  if (days === 0) {\r\n    return 'Today, ' + d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n  } else if (days === 1) {\r\n    return 'Yesterday';\r\n  } else if (days < 7) {\r\n    return `${days} days ago`;\r\n  } else {\r\n    return d.toLocaleDateString();\r\n  }\r\n} "],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,KAAK,EAAE;EACnC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,WAAW;EACnC,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,MAAM;EAC9B,IAAIA,KAAK,IAAI,EAAE,EAAE,OAAO,SAAS;EACjC,OAAO,mBAAmB;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EACvC,IAAI,CAACA,IAAI,EAAE,OAAO,SAAS;EAE3B,IAAMC,CAAC,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;EACxB,IAAIG,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,cAAc;EAE7C,IAAMC,GAAG,GAAG,IAAIH,IAAI,CAAC,CAAC;EACtB,IAAMI,IAAI,GAAGD,GAAG,GAAGJ,CAAC;EACpB,IAAMM,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EAErD,IAAIC,IAAI,KAAK,CAAC,EAAE;IACd,OAAO,SAAS,GAAGN,CAAC,CAACS,kBAAkB,CAAC,EAAE,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAU,CAAC,CAAC;EACrF,CAAC,MAAM,IAAIL,IAAI,KAAK,CAAC,EAAE;IACrB,OAAO,WAAW;EACpB,CAAC,MAAM,IAAIA,IAAI,GAAG,CAAC,EAAE;IACnB,UAAAM,MAAA,CAAUN,IAAI;EAChB,CAAC,MAAM;IACL,OAAON,CAAC,CAACa,kBAAkB,CAAC,CAAC;EAC/B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}