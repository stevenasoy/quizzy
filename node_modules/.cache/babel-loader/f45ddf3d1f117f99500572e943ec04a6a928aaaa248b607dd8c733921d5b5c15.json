{"ast":null,"code":"import { computed } from 'vue';\nexport default {\n  __name: 'QuizResults',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    },\n    userAnswers: {\n      type: Array,\n      required: true\n    },\n    score: {\n      type: Number,\n      required: true\n    },\n    predictedScore: {\n      type: Number,\n      required: false,\n      default: null\n    }\n  },\n  emits: ['restart', 'go-back'],\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const totalQuestions = computed(() => props.questions.length);\n    const scorePercentage = computed(() => {\n      return Math.round(props.score / totalQuestions.value * 100);\n    });\n    const scoreClass = computed(() => {\n      return scorePercentage.value >= 75 ? 'passing' : 'failing';\n    });\n    function formatAnswer(question, answer) {\n      if (!answer && answer !== false) return 'Not answered';\n      if (question.type === 'multiple-choice') {\n        const optionText = question.options[answer];\n        return optionText ? `${answer}) ${optionText}` : answer;\n      } else if (question.type === 'true-false') {\n        // Handle both string and boolean values\n        const value = String(answer).toLowerCase();\n        return value.charAt(0).toUpperCase() + value.slice(1);\n      }\n      return answer;\n    }\n    function rephraseContent(text, isSupporting) {\n      // Clean and normalize the text\n      let cleaned = text.trim().replace(/^(however|moreover|furthermore|therefore|thus|hence|consequently),?\\s*/i, '').replace(/[\"\"\"]/g, '\"').trim();\n\n      // Capitalize first letter if needed\n      cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);\n\n      // Enhanced contextual phrases for better explanations\n      const contextPhrases = isSupporting ? [\"According to the material, \", \"The key point here is that \", \"To understand this better, note that \", \"What's important to recognize is that \", \"The text specifically mentions that \", \"A crucial detail from the content is that \", \"To explain this concept, we can see that \", \"The correct answer is supported by the fact that \"] : [\"This answer is incorrect because \", \"The text actually indicates that \", \"This choice contradicts the material, which states that \", \"This is not accurate because the content shows that \", \"We can see this is wrong because \", \"The material provides evidence against this by stating that \", \"This option is misleading because \", \"This doesn't align with the text, which explains that \"];\n\n      // Select a phrase that best matches the content length and complexity\n      let selectedPhrase;\n      if (cleaned.length > 100) {\n        // For longer explanations, use phrases that introduce complex ideas\n        selectedPhrase = contextPhrases.find(phrase => phrase.includes(\"understand\") || phrase.includes(\"concept\") || phrase.includes(\"recognize\")) || contextPhrases[0];\n      } else {\n        // For shorter explanations, use more direct phrases\n        selectedPhrase = contextPhrases.find(phrase => !phrase.includes(\"understand\") && !phrase.includes(\"concept\")) || contextPhrases[0];\n      }\n\n      // Add educational connectors for better flow\n      const connectors = [\". This helps us understand that \", \". This demonstrates that \", \". This indicates that \", \". This shows us that \", \". This means that \"];\n\n      // Split the cleaned text into sentences\n      const sentences = cleaned.split(/(?<=[.!?])\\s+/);\n      if (sentences.length > 1) {\n        // If we have multiple sentences, connect them meaningfully\n        const mainPoint = sentences[0];\n        const supportingPoint = sentences[1];\n        const connector = connectors[Math.floor(Math.random() * connectors.length)];\n        return `${selectedPhrase}${mainPoint}${connector}${supportingPoint.toLowerCase()}`;\n      }\n      return `${selectedPhrase}${cleaned}`;\n    }\n    function generateExplanation(question, isCorrect) {\n      const explanation = question.explanation || '';\n      if (!explanation) return \"No explanation available.\";\n      if (question.type === 'multiple-choice') {\n        return generateMultipleChoiceExplanation(question, isCorrect);\n      } else {\n        return generateTrueFalseExplanation(question, isCorrect);\n      }\n    }\n    function generateMultipleChoiceExplanation(question, isCorrect) {\n      let explanation = rephraseContent(question.explanation, true);\n\n      // If the answer was incorrect, add specific feedback\n      if (!isCorrect) {\n        const userOption = question.options[question.userAnswer];\n        explanation += `\\n\\nYou selected \"${userOption}\". ${rephraseContent(question.explanation, false)}`;\n      }\n      return explanation;\n    }\n    function generateTrueFalseExplanation(question, isCorrect) {\n      let explanation = rephraseContent(question.explanation, isCorrect);\n\n      // If the answer was incorrect, add specific feedback\n      if (!isCorrect) {\n        explanation += `\\n\\nYou marked this as ${question.userAnswer ? 'true' : 'false'}. ${rephraseContent(question.explanation, false)}`;\n      }\n      return explanation;\n    }\n    const __returned__ = {\n      props,\n      totalQuestions,\n      scorePercentage,\n      scoreClass,\n      formatAnswer,\n      rephraseContent,\n      generateExplanation,\n      generateMultipleChoiceExplanation,\n      generateTrueFalseExplanation,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","props","__props","totalQuestions","questions","length","scorePercentage","Math","round","score","value","scoreClass","formatAnswer","question","answer","type","optionText","options","String","toLowerCase","charAt","toUpperCase","slice","rephraseContent","text","isSupporting","cleaned","trim","replace","contextPhrases","selectedPhrase","find","phrase","includes","connectors","sentences","split","mainPoint","supportingPoint","connector","floor","random","generateExplanation","isCorrect","explanation","generateMultipleChoiceExplanation","generateTrueFalseExplanation","userOption","userAnswer"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <div class=\"score-display\" :class=\"scoreClass\">\r\n      <div class=\"score-container\">\r\n        <div class=\"score-main\">\r\n          <span class=\"score-value\">{{ score }}</span>\r\n          <span class=\"score-separator\">/</span>\r\n          <span class=\"score-total\">{{ totalQuestions }}</span>\r\n        </div>\r\n        <div class=\"score-percentage\">({{ scorePercentage }}%)</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"score-comparison\" v-if=\"predictedScore\">\r\n      <p>You scored {{ scorePercentage }}%. Predicted score was {{ predictedScore }}%.</p>\r\n      <p v-if=\"scorePercentage >= predictedScore + 10\" class=\"comparison-text success\">\r\n        You outperformed the prediction! Great job!\r\n      </p>\r\n      <p v-else-if=\"scorePercentage >= predictedScore - 10\" class=\"comparison-text neutral\">\r\n        You were close to the prediction!\r\n      </p>\r\n      <p v-else class=\"comparison-text warning\">\r\n        You scored below the prediction. Review the material for improvement.\r\n      </p>\r\n    </div>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Question {{ index + 1 }}</span>\r\n          <span :class=\"['result-status', question.isCorrect ? 'correct' : 'wrong']\">\r\n            {{ question.isCorrect ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\" :class=\"{ 'incorrect': !question.isCorrect }\">\r\n          <div class=\"answer-row\">\r\n            <div class=\"user-answer\">\r\n              <strong>Your answer:</strong> \r\n              <span :class=\"{ 'incorrect-text': !question.isCorrect }\">\r\n                {{ formatAnswer(question, question.userAnswer) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"correct-answer\">\r\n              <strong>Correct answer:</strong>\r\n              <span class=\"correct-text\">{{ formatAnswer(question, question.correctAnswer) }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"explanation-box\" :class=\"{ 'correct': question.isCorrect, 'incorrect': !question.isCorrect }\">\r\n            <p class=\"explanation-label\">Explanation:</p>\r\n            <p class=\"explanation-text\">{{ generateExplanation(question, question.isCorrect) }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"button-group\">\r\n      <button @click=\"$emit('restart')\" class=\"restart-btn\">Redo Quiz</button>\r\n      <button @click=\"$emit('go-back')\" class=\"back-btn\">Back to Main</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  predictedScore: {\r\n    type: Number,\r\n    required: false,\r\n    default: null\r\n  }\r\n});\r\n\r\ndefineEmits(['restart', 'go-back']);\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\nconst scorePercentage = computed(() => {\r\n  return Math.round((props.score / totalQuestions.value) * 100);\r\n});\r\nconst scoreClass = computed(() => {\r\n  return scorePercentage.value >= 75 ? 'passing' : 'failing';\r\n});\r\n\r\nfunction formatAnswer(question, answer) {\r\n  if (!answer && answer !== false) return 'Not answered';\r\n  \r\n  if (question.type === 'multiple-choice') {\r\n    const optionText = question.options[answer];\r\n    return optionText ? `${answer}) ${optionText}` : answer;\r\n  } else if (question.type === 'true-false') {\r\n    // Handle both string and boolean values\r\n    const value = String(answer).toLowerCase();\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n  }\r\n  return answer;\r\n}\r\n\r\nfunction rephraseContent(text, isSupporting) {\r\n  // Clean and normalize the text\r\n  let cleaned = text.trim()\r\n    .replace(/^(however|moreover|furthermore|therefore|thus|hence|consequently),?\\s*/i, '')\r\n    .replace(/[\"\"\"]/g, '\"')\r\n    .trim();\r\n\r\n  // Capitalize first letter if needed\r\n  cleaned = cleaned.charAt(0).toUpperCase() + cleaned.slice(1);\r\n\r\n  // Enhanced contextual phrases for better explanations\r\n  const contextPhrases = isSupporting ? [\r\n    \"According to the material, \",\r\n    \"The key point here is that \",\r\n    \"To understand this better, note that \",\r\n    \"What's important to recognize is that \",\r\n    \"The text specifically mentions that \",\r\n    \"A crucial detail from the content is that \",\r\n    \"To explain this concept, we can see that \",\r\n    \"The correct answer is supported by the fact that \"\r\n  ] : [\r\n    \"This answer is incorrect because \",\r\n    \"The text actually indicates that \",\r\n    \"This choice contradicts the material, which states that \",\r\n    \"This is not accurate because the content shows that \",\r\n    \"We can see this is wrong because \",\r\n    \"The material provides evidence against this by stating that \",\r\n    \"This option is misleading because \",\r\n    \"This doesn't align with the text, which explains that \"\r\n  ];\r\n\r\n  // Select a phrase that best matches the content length and complexity\r\n  let selectedPhrase;\r\n  if (cleaned.length > 100) {\r\n    // For longer explanations, use phrases that introduce complex ideas\r\n    selectedPhrase = contextPhrases.find(phrase => \r\n      phrase.includes(\"understand\") || phrase.includes(\"concept\") || phrase.includes(\"recognize\")\r\n    ) || contextPhrases[0];\r\n  } else {\r\n    // For shorter explanations, use more direct phrases\r\n    selectedPhrase = contextPhrases.find(phrase => \r\n      !phrase.includes(\"understand\") && !phrase.includes(\"concept\")\r\n    ) || contextPhrases[0];\r\n  }\r\n\r\n  // Add educational connectors for better flow\r\n  const connectors = [\r\n    \". This helps us understand that \",\r\n    \". This demonstrates that \",\r\n    \". This indicates that \",\r\n    \". This shows us that \",\r\n    \". This means that \"\r\n  ];\r\n\r\n  // Split the cleaned text into sentences\r\n  const sentences = cleaned.split(/(?<=[.!?])\\s+/);\r\n  \r\n  if (sentences.length > 1) {\r\n    // If we have multiple sentences, connect them meaningfully\r\n    const mainPoint = sentences[0];\r\n    const supportingPoint = sentences[1];\r\n    const connector = connectors[Math.floor(Math.random() * connectors.length)];\r\n    \r\n    return `${selectedPhrase}${mainPoint}${connector}${supportingPoint.toLowerCase()}`;\r\n  }\r\n\r\n  return `${selectedPhrase}${cleaned}`;\r\n}\r\n\r\nfunction generateExplanation(question, isCorrect) {\r\n  const explanation = question.explanation || '';\r\n  if (!explanation) return \"No explanation available.\";\r\n\r\n  if (question.type === 'multiple-choice') {\r\n    return generateMultipleChoiceExplanation(question, isCorrect);\r\n  } else {\r\n    return generateTrueFalseExplanation(question, isCorrect);\r\n  }\r\n}\r\n\r\nfunction generateMultipleChoiceExplanation(question, isCorrect) {\r\n  let explanation = rephraseContent(question.explanation, true);\r\n\r\n  // If the answer was incorrect, add specific feedback\r\n  if (!isCorrect) {\r\n    const userOption = question.options[question.userAnswer];\r\n    explanation += `\\n\\nYou selected \"${userOption}\". ${rephraseContent(question.explanation, false)}`;\r\n  }\r\n  \r\n  return explanation;\r\n}\r\n\r\nfunction generateTrueFalseExplanation(question, isCorrect) {\r\n  let explanation = rephraseContent(question.explanation, isCorrect);\r\n\r\n  // If the answer was incorrect, add specific feedback\r\n  if (!isCorrect) {\r\n    explanation += `\\n\\nYou marked this as ${question.userAnswer ? 'true' : 'false'}. ${rephraseContent(question.explanation, false)}`;\r\n  }\r\n  \r\n  return explanation;\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 800px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.score-display.passing {\r\n  background-color: #e8f5e9;\r\n  border: 3px solid #4CAF50;\r\n}\r\n\r\n.score-display.failing {\r\n  background-color: #ffebee;\r\n  border: 3px solid #f44336;\r\n}\r\n\r\n.score-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-main {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-value {\r\n  font-size: 4rem;\r\n  line-height: 1;\r\n  font-weight: 800;\r\n}\r\n\r\n.score-separator {\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n}\r\n\r\n.score-total {\r\n  font-size: 2.5rem;\r\n  opacity: 0.7;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.8rem;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.score-comparison {\r\n  margin: 1.5rem 0;\r\n  padding: 1.5rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n}\r\n\r\n.comparison-text {\r\n  margin-top: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-text.success {\r\n  color: #4CAF50;\r\n}\r\n\r\n.comparison-text.neutral {\r\n  color: #666;\r\n}\r\n\r\n.comparison-text.warning {\r\n  color: #f44336;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n}\r\n\r\n.result-item {\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.question-number {\r\n  font-weight: 600;\r\n  color: #666;\r\n}\r\n\r\n.result-status {\r\n  padding: 0.4rem 1rem;\r\n  border-radius: 20px;\r\n  font-weight: 600;\r\n}\r\n\r\n.result-status.correct {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.result-status.wrong {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.question-text {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  margin-bottom: 1rem;\r\n  line-height: 1.4;\r\n}\r\n\r\n.answer-details {\r\n  background-color: #fff;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.answer-details.incorrect {\r\n  border-color: #ffcdd2;\r\n  background-color: #fff5f5;\r\n}\r\n\r\n.answer-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-answer, .correct-answer {\r\n  padding: 1rem;\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.user-answer strong, .correct-answer strong {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.incorrect-text {\r\n  color: #d32f2f;\r\n}\r\n\r\n.correct-text {\r\n  color: #2e7d32;\r\n}\r\n\r\n.explanation-box {\r\n  margin-top: 1.5rem;\r\n  padding: 1.5rem;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.explanation-box.correct {\r\n  border-left: 4px solid #4CAF50;\r\n}\r\n\r\n.explanation-box.incorrect {\r\n  border-left: 4px solid #ff9800;\r\n}\r\n\r\n.explanation-label {\r\n  font-weight: 600;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.explanation-label.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.explanation-label.incorrect {\r\n  color: #f57c00;\r\n}\r\n\r\n.explanation-text {\r\n  color: #333;\r\n  line-height: 1.6;\r\n  margin: 0;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: center;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.button-group button {\r\n  padding: 0.8rem 2rem;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.restart-btn {\r\n  background: #4CAF50;\r\n}\r\n\r\n.restart-btn:hover {\r\n  background: #388e3c;\r\n}\r\n\r\n.back-btn {\r\n  background: #666;\r\n}\r\n\r\n.back-btn:hover {\r\n  background: #555;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}