{"ast":null,"code":"import _objectSpread from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { calculateNextReview, getDueQuestions, getReviewForecast, getMasteryLevel } from '../../algorithms/spaced-repetition';\nvar state = {\n  questions: [],\n  lastReviewDate: null,\n  reviewStreak: 0,\n  reviewHistory: []\n};\nvar mutations = {\n  UPDATE_QUESTION: function UPDATE_QUESTION(state, updatedQuestion) {\n    var index = state.questions.findIndex(function (q) {\n      return q.id === updatedQuestion.id;\n    });\n    if (index !== -1) {\n      state.questions[index] = updatedQuestion;\n    } else {\n      state.questions.push(updatedQuestion);\n    }\n  },\n  UPDATE_REVIEW_STREAK: function UPDATE_REVIEW_STREAK(state) {\n    var today = new Date().toDateString();\n    var lastReview = state.lastReviewDate ? new Date(state.lastReviewDate).toDateString() : null;\n    if (lastReview === today) {\n      // Already reviewed today\n      return;\n    } else if (!lastReview || isYesterday(new Date(state.lastReviewDate))) {\n      // First review or reviewed yesterday\n      state.reviewStreak++;\n    } else {\n      // Streak broken\n      state.reviewStreak = 1;\n    }\n    state.lastReviewDate = new Date().toISOString();\n  },\n  ADD_REVIEW_HISTORY: function ADD_REVIEW_HISTORY(state, _ref) {\n    var questionId = _ref.questionId,\n      performance = _ref.performance,\n      timestamp = _ref.timestamp;\n    state.reviewHistory.push({\n      questionId: questionId,\n      performance: performance,\n      timestamp: timestamp\n    });\n  }\n};\nvar actions = {\n  updateQuestionAfterReview: function updateQuestionAfterReview(_ref2, _ref3) {\n    var commit = _ref2.commit;\n    var question = _ref3.question,\n      performance = _ref3.performance,\n      responseTime = _ref3.responseTime;\n    var updatedSpacedRepetition = calculateNextReview(question.spacedRepetition, performance, responseTime);\n    var updatedQuestion = _objectSpread(_objectSpread({}, question), {}, {\n      spacedRepetition: updatedSpacedRepetition\n    });\n    commit('UPDATE_QUESTION', updatedQuestion);\n    commit('UPDATE_REVIEW_STREAK');\n    commit('ADD_REVIEW_HISTORY', {\n      questionId: question.id,\n      performance: performance,\n      timestamp: new Date().toISOString()\n    });\n  }\n};\nvar getters = {\n  dueQuestions: function dueQuestions(state) {\n    return getDueQuestions(state.questions);\n  },\n  reviewForecast: function reviewForecast(state) {\n    return function () {\n      var days = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 7;\n      return getReviewForecast(state.questions, days);\n    };\n  },\n  currentStreak: function currentStreak(state) {\n    return state.reviewStreak;\n  },\n  masteryLevels: function masteryLevels(state) {\n    return state.questions.reduce(function (acc, question) {\n      var level = getMasteryLevel(question);\n      acc[level] = (acc[level] || 0) + 1;\n      return acc;\n    }, {\n      \"new\": 0,\n      learning: 0,\n      mastered: 0\n    });\n  }\n};\n\n// Helper function to check if a date is yesterday\nfunction isYesterday(date) {\n  var yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  return date.toDateString() === yesterday.toDateString();\n}\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"names":["calculateNextReview","getDueQuestions","getReviewForecast","getMasteryLevel","state","questions","lastReviewDate","reviewStreak","reviewHistory","mutations","UPDATE_QUESTION","updatedQuestion","index","findIndex","q","id","push","UPDATE_REVIEW_STREAK","today","Date","toDateString","lastReview","isYesterday","toISOString","ADD_REVIEW_HISTORY","_ref","questionId","performance","timestamp","actions","updateQuestionAfterReview","_ref2","_ref3","commit","question","responseTime","updatedSpacedRepetition","spacedRepetition","_objectSpread","getters","dueQuestions","reviewForecast","days","arguments","length","undefined","currentStreak","masteryLevels","reduce","acc","level","learning","mastered","date","yesterday","setDate","getDate","namespaced"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/store/modules/spaced-repetition.js"],"sourcesContent":["import { calculateNextReview, getDueQuestions, getReviewForecast, getMasteryLevel } from '../../algorithms/spaced-repetition';\r\n\r\nconst state = {\r\n  questions: [],\r\n  lastReviewDate: null,\r\n  reviewStreak: 0,\r\n  reviewHistory: []\r\n};\r\n\r\nconst mutations = {\r\n  UPDATE_QUESTION(state, updatedQuestion) {\r\n    const index = state.questions.findIndex(q => q.id === updatedQuestion.id);\r\n    if (index !== -1) {\r\n      state.questions[index] = updatedQuestion;\r\n    } else {\r\n      state.questions.push(updatedQuestion);\r\n    }\r\n  },\r\n\r\n  UPDATE_REVIEW_STREAK(state) {\r\n    const today = new Date().toDateString();\r\n    const lastReview = state.lastReviewDate ? new Date(state.lastReviewDate).toDateString() : null;\r\n\r\n    if (lastReview === today) {\r\n      // Already reviewed today\r\n      return;\r\n    } else if (!lastReview || isYesterday(new Date(state.lastReviewDate))) {\r\n      // First review or reviewed yesterday\r\n      state.reviewStreak++;\r\n    } else {\r\n      // Streak broken\r\n      state.reviewStreak = 1;\r\n    }\r\n    state.lastReviewDate = new Date().toISOString();\r\n  },\r\n\r\n  ADD_REVIEW_HISTORY(state, { questionId, performance, timestamp }) {\r\n    state.reviewHistory.push({\r\n      questionId,\r\n      performance,\r\n      timestamp\r\n    });\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  updateQuestionAfterReview({ commit }, { question, performance, responseTime }) {\r\n    const updatedSpacedRepetition = calculateNextReview(\r\n      question.spacedRepetition,\r\n      performance,\r\n      responseTime\r\n    );\r\n\r\n    const updatedQuestion = {\r\n      ...question,\r\n      spacedRepetition: updatedSpacedRepetition\r\n    };\r\n\r\n    commit('UPDATE_QUESTION', updatedQuestion);\r\n    commit('UPDATE_REVIEW_STREAK');\r\n    commit('ADD_REVIEW_HISTORY', {\r\n      questionId: question.id,\r\n      performance,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n};\r\n\r\nconst getters = {\r\n  dueQuestions: (state) => {\r\n    return getDueQuestions(state.questions);\r\n  },\r\n\r\n  reviewForecast: (state) => (days = 7) => {\r\n    return getReviewForecast(state.questions, days);\r\n  },\r\n\r\n  currentStreak: (state) => state.reviewStreak,\r\n\r\n  masteryLevels: (state) => {\r\n    return state.questions.reduce((acc, question) => {\r\n      const level = getMasteryLevel(question);\r\n      acc[level] = (acc[level] || 0) + 1;\r\n      return acc;\r\n    }, { new: 0, learning: 0, mastered: 0 });\r\n  }\r\n};\r\n\r\n// Helper function to check if a date is yesterday\r\nfunction isYesterday(date) {\r\n  const yesterday = new Date();\r\n  yesterday.setDate(yesterday.getDate() - 1);\r\n  return date.toDateString() === yesterday.toDateString();\r\n}\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}