{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/**\r\n * Score Calculation Module\r\n */\n\n/**\r\n * Calculates predicted score based on question difficulty distribution\r\n * @param {Array} questions - Array of questions\r\n * @returns {number|null} Predicted score percentage\r\n */\nexport function calculatePredictedScore(questions) {\n  if (!questions.length) return null;\n\n  // Calculate difficulty distribution\n  var difficultyCount = questions.reduce(function (acc, q) {\n    acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;\n    return acc;\n  }, {});\n  var totalQuestions = questions.length;\n\n  // Calculate base score from difficulty distribution\n  var baseScore = ((difficultyCount.easy || 0) * 90 +\n  // Expect 90% correct for easy\n  (difficultyCount.medium || 0) * 75 +\n  // Expect 75% correct for medium\n  (difficultyCount.hard || 0) * 60) /\n   // Expect 60% correct for hard\n  totalQuestions;\n\n  // Simple adjustment based on question count\n  var adjustment = 0;\n  if (totalQuestions <= 5) adjustment = 5; // Fewer questions = slightly higher chance\n  else if (totalQuestions >= 15) adjustment = -5; // More questions = slightly lower chance\n\n  var finalScore = Math.min(100, Math.max(0, baseScore + adjustment));\n  return Math.round(finalScore);\n}\n\n/**\r\n * Calculates actual quiz score\r\n * @param {Array} responses - Array of user responses\r\n * @returns {number} Score percentage\r\n */\nexport function calculateScore(responses) {\n  if (!responses.length) return 0;\n  var correctAnswers = responses.filter(function (r) {\n    return r.correct;\n  }).length;\n  return Math.round(correctAnswers / responses.length * 100);\n}\n\n/**\r\n * Calculates weighted score based on difficulty\r\n * @param {Object} response - User response data\r\n * @param {Object} weights - Weight factors\r\n * @returns {number} Weighted score\r\n */\nexport function calculateWeightedScore(response, weights) {\n  return response.score * weights.score;\n}","map":{"version":3,"names":["calculatePredictedScore","questions","length","difficultyCount","reduce","acc","q","difficulty","totalQuestions","baseScore","easy","medium","hard","adjustment","finalScore","Math","min","max","round","calculateScore","responses","correctAnswers","filter","r","correct","calculateWeightedScore","response","weights","score"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/score-calculation/index.js"],"sourcesContent":["/**\r\n * Score Calculation Module\r\n */\r\n\r\n/**\r\n * Calculates predicted score based on question difficulty distribution\r\n * @param {Array} questions - Array of questions\r\n * @returns {number|null} Predicted score percentage\r\n */\r\nexport function calculatePredictedScore(questions) {\r\n  if (!questions.length) return null;\r\n\r\n  // Calculate difficulty distribution\r\n  const difficultyCount = questions.reduce((acc, q) => {\r\n    acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const totalQuestions = questions.length;\r\n  \r\n  // Calculate base score from difficulty distribution\r\n  const baseScore = (\r\n    ((difficultyCount.easy || 0) * 90 +    // Expect 90% correct for easy\r\n     (difficultyCount.medium || 0) * 75 +   // Expect 75% correct for medium\r\n     (difficultyCount.hard || 0) * 60) /    // Expect 60% correct for hard\r\n    totalQuestions\r\n  );\r\n\r\n  // Simple adjustment based on question count\r\n  let adjustment = 0;\r\n  if (totalQuestions <= 5) adjustment = 5;        // Fewer questions = slightly higher chance\r\n  else if (totalQuestions >= 15) adjustment = -5; // More questions = slightly lower chance\r\n\r\n  const finalScore = Math.min(100, Math.max(0, baseScore + adjustment));\r\n  return Math.round(finalScore);\r\n}\r\n\r\n/**\r\n * Calculates actual quiz score\r\n * @param {Array} responses - Array of user responses\r\n * @returns {number} Score percentage\r\n */\r\nexport function calculateScore(responses) {\r\n  if (!responses.length) return 0;\r\n  const correctAnswers = responses.filter(r => r.correct).length;\r\n  return Math.round((correctAnswers / responses.length) * 100);\r\n}\r\n\r\n/**\r\n * Calculates weighted score based on difficulty\r\n * @param {Object} response - User response data\r\n * @param {Object} weights - Weight factors\r\n * @returns {number} Weighted score\r\n */\r\nexport function calculateWeightedScore(response, weights) {\r\n  return response.score * weights.score;\r\n} "],"mappings":";;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,uBAAuBA,CAACC,SAAS,EAAE;EACjD,IAAI,CAACA,SAAS,CAACC,MAAM,EAAE,OAAO,IAAI;;EAElC;EACA,IAAMC,eAAe,GAAGF,SAAS,CAACG,MAAM,CAAC,UAACC,GAAG,EAAEC,CAAC,EAAK;IACnDD,GAAG,CAACC,CAAC,CAACC,UAAU,CAAC,GAAG,CAACF,GAAG,CAACC,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;IAChD,OAAOF,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,IAAMG,cAAc,GAAGP,SAAS,CAACC,MAAM;;EAEvC;EACA,IAAMO,SAAS,GACb,CAAC,CAACN,eAAe,CAACO,IAAI,IAAI,CAAC,IAAI,EAAE;EAAM;EACtC,CAACP,eAAe,CAACQ,MAAM,IAAI,CAAC,IAAI,EAAE;EAAK;EACvC,CAACR,eAAe,CAACS,IAAI,IAAI,CAAC,IAAI,EAAE;EAAA,CAAO;EACxCJ,cACD;;EAED;EACA,IAAIK,UAAU,GAAG,CAAC;EAClB,IAAIL,cAAc,IAAI,CAAC,EAAEK,UAAU,GAAG,CAAC,CAAC,CAAQ;EAAA,KAC3C,IAAIL,cAAc,IAAI,EAAE,EAAEK,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEhD,IAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAER,SAAS,GAAGI,UAAU,CAAC,CAAC;EACrE,OAAOE,IAAI,CAACG,KAAK,CAACJ,UAAU,CAAC;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,cAAcA,CAACC,SAAS,EAAE;EACxC,IAAI,CAACA,SAAS,CAAClB,MAAM,EAAE,OAAO,CAAC;EAC/B,IAAMmB,cAAc,GAAGD,SAAS,CAACE,MAAM,CAAC,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAACC,OAAO;EAAA,EAAC,CAACtB,MAAM;EAC9D,OAAOa,IAAI,CAACG,KAAK,CAAEG,cAAc,GAAGD,SAAS,CAAClB,MAAM,GAAI,GAAG,CAAC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuB,sBAAsBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACxD,OAAOD,QAAQ,CAACE,KAAK,GAAGD,OAAO,CAACC,KAAK;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}