{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\r\n * Spaced Repetition System (SRS) implementation based on SuperMemo 2 algorithm\r\n */\n\n// Constants for the spaced repetition algorithm\nvar INITIAL_INTERVAL = 1; // 1 day\nvar INITIAL_EASE = 2.5;\nvar MINIMUM_EASE = 1.3;\nvar EASE_BONUS = 0.15;\nvar EASE_PENALTY = 0.2;\n\n/**\r\n * Calculate the next review date and update spaced repetition data\r\n * @param {Object} question - The question object containing spaced repetition data\r\n * @param {number} performance - Performance rating (0-5, where 5 is perfect)\r\n * @returns {Object} Updated spaced repetition data\r\n */\nexport function updateSpacedRepetition(question, performance) {\n  var spacedRepetition = question.spacedRepetition || {\n    repetitions: 0,\n    ease: INITIAL_EASE,\n    interval: INITIAL_INTERVAL,\n    nextReviewDate: null,\n    lastReviewDate: null\n  };\n\n  // Convert performance to a 0-1 scale\n  var normalizedPerformance = performance / 5;\n\n  // Update ease factor based on performance\n  if (normalizedPerformance >= 0.6) {\n    spacedRepetition.ease += EASE_BONUS;\n  } else {\n    spacedRepetition.ease -= EASE_PENALTY;\n  }\n\n  // Ensure ease doesn't go below minimum\n  spacedRepetition.ease = Math.max(spacedRepetition.ease, MINIMUM_EASE);\n\n  // Calculate new interval\n  if (normalizedPerformance < 0.6) {\n    // Reset progress if performance is poor\n    spacedRepetition.repetitions = 0;\n    spacedRepetition.interval = INITIAL_INTERVAL;\n  } else {\n    spacedRepetition.repetitions++;\n    if (spacedRepetition.repetitions === 1) {\n      spacedRepetition.interval = INITIAL_INTERVAL;\n    } else if (spacedRepetition.repetitions === 2) {\n      spacedRepetition.interval = 6; // 6 days\n    } else {\n      spacedRepetition.interval = Math.round(spacedRepetition.interval * spacedRepetition.ease);\n    }\n  }\n\n  // Update review dates\n  spacedRepetition.lastReviewDate = new Date().toISOString();\n  var nextDate = new Date();\n  nextDate.setDate(nextDate.getDate() + spacedRepetition.interval);\n  spacedRepetition.nextReviewDate = nextDate.toISOString();\n  return spacedRepetition;\n}\n\n/**\r\n * Get questions that are due for review\r\n * @param {Array} questions - Array of question objects\r\n * @returns {Array} Array of questions that are due for review\r\n */\nexport function getDueQuestions(questions) {\n  var now = new Date();\n  return questions.filter(function (question) {\n    var _question$spacedRepet;\n    if (!((_question$spacedRepet = question.spacedRepetition) !== null && _question$spacedRepet !== void 0 && _question$spacedRepet.nextReviewDate)) {\n      return true; // New questions are always due\n    }\n    var nextReviewDate = new Date(question.spacedRepetition.nextReviewDate);\n    return nextReviewDate <= now;\n  });\n}\n\n/**\r\n * Get the mastery level of a question based on repetitions\r\n * @param {Object} question - The question object\r\n * @returns {string} Mastery level ('new', 'learning', or 'mastered')\r\n */\nexport function getMasteryLevel(question) {\n  if (!question.spacedRepetition || question.spacedRepetition.repetitions === 0) {\n    return 'new';\n  }\n  if (question.spacedRepetition.repetitions < 4) {\n    return 'learning';\n  }\n  return 'mastered';\n}\n\n/**\r\n * Calculate review forecast for the next n days\r\n * @param {Array} questions - Array of question objects\r\n * @param {number} days - Number of days to forecast\r\n * @returns {Array} Array of daily review counts\r\n */\nexport function getReviewForecast(questions) {\n  var days = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 7;\n  var forecast = Array(days).fill(0);\n  var today = new Date();\n  questions.forEach(function (question) {\n    var _question$spacedRepet2;\n    if (!((_question$spacedRepet2 = question.spacedRepetition) !== null && _question$spacedRepet2 !== void 0 && _question$spacedRepet2.nextReviewDate)) {\n      forecast[0]++; // New questions count for today\n      return;\n    }\n    var reviewDate = new Date(question.spacedRepetition.nextReviewDate);\n    var dayDiff = Math.floor((reviewDate - today) / (1000 * 60 * 60 * 24));\n    if (dayDiff >= 0 && dayDiff < days) {\n      forecast[dayDiff]++;\n    }\n  });\n  return forecast;\n}","map":{"version":3,"names":["INITIAL_INTERVAL","INITIAL_EASE","MINIMUM_EASE","EASE_BONUS","EASE_PENALTY","updateSpacedRepetition","question","performance","spacedRepetition","repetitions","ease","interval","nextReviewDate","lastReviewDate","normalizedPerformance","Math","max","round","Date","toISOString","nextDate","setDate","getDate","getDueQuestions","questions","now","filter","_question$spacedRepet","getMasteryLevel","getReviewForecast","days","arguments","length","undefined","forecast","Array","fill","today","forEach","_question$spacedRepet2","reviewDate","dayDiff","floor"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/spaced-repetition.js"],"sourcesContent":["/**\r\n * Spaced Repetition System (SRS) implementation based on SuperMemo 2 algorithm\r\n */\r\n\r\n// Constants for the spaced repetition algorithm\r\nconst INITIAL_INTERVAL = 1; // 1 day\r\nconst INITIAL_EASE = 2.5;\r\nconst MINIMUM_EASE = 1.3;\r\nconst EASE_BONUS = 0.15;\r\nconst EASE_PENALTY = 0.2;\r\n\r\n/**\r\n * Calculate the next review date and update spaced repetition data\r\n * @param {Object} question - The question object containing spaced repetition data\r\n * @param {number} performance - Performance rating (0-5, where 5 is perfect)\r\n * @returns {Object} Updated spaced repetition data\r\n */\r\nexport function updateSpacedRepetition(question, performance) {\r\n  let spacedRepetition = question.spacedRepetition || {\r\n    repetitions: 0,\r\n    ease: INITIAL_EASE,\r\n    interval: INITIAL_INTERVAL,\r\n    nextReviewDate: null,\r\n    lastReviewDate: null\r\n  };\r\n\r\n  // Convert performance to a 0-1 scale\r\n  const normalizedPerformance = performance / 5;\r\n\r\n  // Update ease factor based on performance\r\n  if (normalizedPerformance >= 0.6) {\r\n    spacedRepetition.ease += EASE_BONUS;\r\n  } else {\r\n    spacedRepetition.ease -= EASE_PENALTY;\r\n  }\r\n\r\n  // Ensure ease doesn't go below minimum\r\n  spacedRepetition.ease = Math.max(spacedRepetition.ease, MINIMUM_EASE);\r\n\r\n  // Calculate new interval\r\n  if (normalizedPerformance < 0.6) {\r\n    // Reset progress if performance is poor\r\n    spacedRepetition.repetitions = 0;\r\n    spacedRepetition.interval = INITIAL_INTERVAL;\r\n  } else {\r\n    spacedRepetition.repetitions++;\r\n    \r\n    if (spacedRepetition.repetitions === 1) {\r\n      spacedRepetition.interval = INITIAL_INTERVAL;\r\n    } else if (spacedRepetition.repetitions === 2) {\r\n      spacedRepetition.interval = 6; // 6 days\r\n    } else {\r\n      spacedRepetition.interval = Math.round(spacedRepetition.interval * spacedRepetition.ease);\r\n    }\r\n  }\r\n\r\n  // Update review dates\r\n  spacedRepetition.lastReviewDate = new Date().toISOString();\r\n  const nextDate = new Date();\r\n  nextDate.setDate(nextDate.getDate() + spacedRepetition.interval);\r\n  spacedRepetition.nextReviewDate = nextDate.toISOString();\r\n\r\n  return spacedRepetition;\r\n}\r\n\r\n/**\r\n * Get questions that are due for review\r\n * @param {Array} questions - Array of question objects\r\n * @returns {Array} Array of questions that are due for review\r\n */\r\nexport function getDueQuestions(questions) {\r\n  const now = new Date();\r\n  return questions.filter(question => {\r\n    if (!question.spacedRepetition?.nextReviewDate) {\r\n      return true; // New questions are always due\r\n    }\r\n    const nextReviewDate = new Date(question.spacedRepetition.nextReviewDate);\r\n    return nextReviewDate <= now;\r\n  });\r\n}\r\n\r\n/**\r\n * Get the mastery level of a question based on repetitions\r\n * @param {Object} question - The question object\r\n * @returns {string} Mastery level ('new', 'learning', or 'mastered')\r\n */\r\nexport function getMasteryLevel(question) {\r\n  if (!question.spacedRepetition || question.spacedRepetition.repetitions === 0) {\r\n    return 'new';\r\n  }\r\n  if (question.spacedRepetition.repetitions < 4) {\r\n    return 'learning';\r\n  }\r\n  return 'mastered';\r\n}\r\n\r\n/**\r\n * Calculate review forecast for the next n days\r\n * @param {Array} questions - Array of question objects\r\n * @param {number} days - Number of days to forecast\r\n * @returns {Array} Array of daily review counts\r\n */\r\nexport function getReviewForecast(questions, days = 7) {\r\n  const forecast = Array(days).fill(0);\r\n  const today = new Date();\r\n  \r\n  questions.forEach(question => {\r\n    if (!question.spacedRepetition?.nextReviewDate) {\r\n      forecast[0]++; // New questions count for today\r\n      return;\r\n    }\r\n\r\n    const reviewDate = new Date(question.spacedRepetition.nextReviewDate);\r\n    const dayDiff = Math.floor((reviewDate - today) / (1000 * 60 * 60 * 24));\r\n    \r\n    if (dayDiff >= 0 && dayDiff < days) {\r\n      forecast[dayDiff]++;\r\n    }\r\n  });\r\n\r\n  return forecast;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}