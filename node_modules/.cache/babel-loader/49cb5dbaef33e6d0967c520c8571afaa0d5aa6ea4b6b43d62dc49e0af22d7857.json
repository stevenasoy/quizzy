{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\r\n * Scoring Algorithms Module\r\n */\n\n/**\r\n * Calculates weighted average score\r\n * @param {Object} scores - Object containing different scores\r\n * @param {Object} weights - Weight for each score type\r\n * @returns {number} Final weighted score\r\n */\nexport function calculateWeightedScore(scores, weights) {\n  var totalScore = 0;\n  var totalWeight = 0;\n  Object.keys(weights).forEach(function (key) {\n    if (scores[key] !== undefined) {\n      totalScore += scores[key] * weights[key];\n      totalWeight += weights[key];\n    }\n  });\n  return totalWeight > 0 ? totalScore / totalWeight : 0;\n}\n\n/**\r\n * Performs multi-factor analysis for prediction\r\n * @param {Object} factors - Different factors to analyze\r\n * @returns {Object} Analysis results\r\n */\nexport function analyzeMultipleFactors(factors) {\n  var analysis = {\n    contentCoverage: factors.contentCoverage || 0,\n    complexity: factors.complexity || 0,\n    diversity: factors.diversity || 0,\n    overallScore: 0,\n    confidence: 0\n  };\n\n  // Calculate overall score\n  analysis.overallScore = calculateWeightedScore(factors, {\n    contentCoverage: 0.4,\n    complexity: 0.3,\n    diversity: 0.3\n  });\n\n  // Calculate confidence based on data completeness\n  var availableFactors = Object.keys(factors).filter(function (key) {\n    return factors[key] !== undefined;\n  }).length;\n  analysis.confidence = availableFactors / Object.keys(factors).length * 100;\n  return analysis;\n}\n\n/**\r\n * Normalizes scores to a specific range\r\n * @param {number} score - Raw score\r\n * @param {number} min - Minimum value\r\n * @param {number} max - Maximum value\r\n * @returns {number} Normalized score\r\n */\nexport function normalizeScore(score) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  return Math.max(min, Math.min(max, score));\n}\n\n/**\r\n * Predicts performance based on various metrics\r\n * @param {Object} metrics - Performance metrics\r\n * @returns {Object} Performance prediction\r\n */\nexport function predictPerformance(metrics) {\n  var weights = {\n    contentComplexity: 0.3,\n    questionDifficulty: 0.3,\n    contentCoverage: 0.2,\n    topicDiversity: 0.2\n  };\n  var baseScore = calculateWeightedScore(metrics, weights);\n\n  // Apply confidence adjustment\n  var confidence = calculateConfidence(metrics);\n  var adjustedScore = baseScore * (confidence / 100);\n  return {\n    predictedScore: normalizeScore(adjustedScore),\n    confidence: confidence,\n    factors: {\n      contentComplexity: metrics.contentComplexity || 0,\n      questionDifficulty: metrics.questionDifficulty || 0,\n      contentCoverage: metrics.contentCoverage || 0,\n      topicDiversity: metrics.topicDiversity || 0\n    }\n  };\n}\n\n/**\r\n * Calculates confidence level for predictions\r\n * @param {Object} metrics - Metrics used for prediction\r\n * @returns {number} Confidence percentage\r\n */\nfunction calculateConfidence(metrics) {\n  var requiredMetrics = ['contentComplexity', 'questionDifficulty', 'contentCoverage', 'topicDiversity'];\n  var availableMetrics = requiredMetrics.filter(function (metric) {\n    return metrics[metric] !== undefined;\n  });\n  return availableMetrics.length / requiredMetrics.length * 100;\n}","map":{"version":3,"names":["calculateWeightedScore","scores","weights","totalScore","totalWeight","Object","keys","forEach","key","undefined","analyzeMultipleFactors","factors","analysis","contentCoverage","complexity","diversity","overallScore","confidence","availableFactors","filter","length","normalizeScore","score","min","arguments","max","Math","predictPerformance","metrics","contentComplexity","questionDifficulty","topicDiversity","baseScore","calculateConfidence","adjustedScore","predictedScore","requiredMetrics","availableMetrics","metric"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/scoring/index.js"],"sourcesContent":["/**\r\n * Scoring Algorithms Module\r\n */\r\n\r\n/**\r\n * Calculates weighted average score\r\n * @param {Object} scores - Object containing different scores\r\n * @param {Object} weights - Weight for each score type\r\n * @returns {number} Final weighted score\r\n */\r\nexport function calculateWeightedScore(scores, weights) {\r\n  let totalScore = 0;\r\n  let totalWeight = 0;\r\n  \r\n  Object.keys(weights).forEach(key => {\r\n    if (scores[key] !== undefined) {\r\n      totalScore += scores[key] * weights[key];\r\n      totalWeight += weights[key];\r\n    }\r\n  });\r\n  \r\n  return totalWeight > 0 ? totalScore / totalWeight : 0;\r\n}\r\n\r\n/**\r\n * Performs multi-factor analysis for prediction\r\n * @param {Object} factors - Different factors to analyze\r\n * @returns {Object} Analysis results\r\n */\r\nexport function analyzeMultipleFactors(factors) {\r\n  const analysis = {\r\n    contentCoverage: factors.contentCoverage || 0,\r\n    complexity: factors.complexity || 0,\r\n    diversity: factors.diversity || 0,\r\n    overallScore: 0,\r\n    confidence: 0\r\n  };\r\n  \r\n  // Calculate overall score\r\n  analysis.overallScore = calculateWeightedScore(factors, {\r\n    contentCoverage: 0.4,\r\n    complexity: 0.3,\r\n    diversity: 0.3\r\n  });\r\n  \r\n  // Calculate confidence based on data completeness\r\n  const availableFactors = Object.keys(factors).filter(key => factors[key] !== undefined).length;\r\n  analysis.confidence = (availableFactors / Object.keys(factors).length) * 100;\r\n  \r\n  return analysis;\r\n}\r\n\r\n/**\r\n * Normalizes scores to a specific range\r\n * @param {number} score - Raw score\r\n * @param {number} min - Minimum value\r\n * @param {number} max - Maximum value\r\n * @returns {number} Normalized score\r\n */\r\nexport function normalizeScore(score, min = 0, max = 100) {\r\n  return Math.max(min, Math.min(max, score));\r\n}\r\n\r\n/**\r\n * Predicts performance based on various metrics\r\n * @param {Object} metrics - Performance metrics\r\n * @returns {Object} Performance prediction\r\n */\r\nexport function predictPerformance(metrics) {\r\n  const weights = {\r\n    contentComplexity: 0.3,\r\n    questionDifficulty: 0.3,\r\n    contentCoverage: 0.2,\r\n    topicDiversity: 0.2\r\n  };\r\n  \r\n  const baseScore = calculateWeightedScore(metrics, weights);\r\n  \r\n  // Apply confidence adjustment\r\n  const confidence = calculateConfidence(metrics);\r\n  const adjustedScore = baseScore * (confidence / 100);\r\n  \r\n  return {\r\n    predictedScore: normalizeScore(adjustedScore),\r\n    confidence,\r\n    factors: {\r\n      contentComplexity: metrics.contentComplexity || 0,\r\n      questionDifficulty: metrics.questionDifficulty || 0,\r\n      contentCoverage: metrics.contentCoverage || 0,\r\n      topicDiversity: metrics.topicDiversity || 0\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Calculates confidence level for predictions\r\n * @param {Object} metrics - Metrics used for prediction\r\n * @returns {number} Confidence percentage\r\n */\r\nfunction calculateConfidence(metrics) {\r\n  const requiredMetrics = ['contentComplexity', 'questionDifficulty', 'contentCoverage', 'topicDiversity'];\r\n  const availableMetrics = requiredMetrics.filter(metric => metrics[metric] !== undefined);\r\n  \r\n  return (availableMetrics.length / requiredMetrics.length) * 100;\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}