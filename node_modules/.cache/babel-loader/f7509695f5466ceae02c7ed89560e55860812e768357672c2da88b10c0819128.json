{"ast":null,"code":"import { createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, withModifiers as _withModifiers, withKeys as _withKeys, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, normalizeClass as _normalizeClass, createBlock as _createBlock, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"main-content\"\n};\nconst _hoisted_3 = {\n  class: \"upload-container\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"file-upload-section\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"error-section\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"selected-files\"\n};\nconst _hoisted_7 = {\n  class: \"file-name\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = {\n  class: \"questions-section\"\n};\nconst _hoisted_10 = {\n  class: \"question-input\"\n};\nconst _hoisted_11 = [\"disabled\"];\nconst _hoisted_12 = {\n  key: 1\n};\nconst _hoisted_13 = {\n  class: \"predicted-score-container\"\n};\nconst _hoisted_14 = {\n  class: \"score-prediction\"\n};\nconst _hoisted_15 = {\n  class: \"predicted-value\"\n};\nconst _hoisted_16 = {\n  class: \"prediction-explanation\"\n};\nconst _hoisted_17 = {\n  key: 4,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode($setup[\"Sidebar\"], {\n    \"quiz-history\": $setup.quizHistory,\n    onCreateQuiz: $setup.handleCreateQuiz,\n    onRetakeQuiz: $setup.handleRetakeQuiz\n  }, null, 8 /* PROPS */, [\"quiz-history\"]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[8] || (_cache[8] = _createElementVNode(\"h1\", null, \"QUIZZy\", -1 /* HOISTED */)), !$setup.quizStarted && !$setup.quizFinished && $setup.predictedScore === null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Upload Files\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"upload-area\",\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleDrop, [\"prevent\"]),\n    onClick: $setup.triggerFileInput,\n    role: \"button\",\n    tabindex: \"0\",\n    onKeydown: _withKeys($setup.triggerFileInput, [\"enter\"])\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: $setup.handleFileSelect,\n    accept: \".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\",\n    ref: \"fileInput\",\n    class: \"file-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _cache[2] || (_cache[2] = _createStaticVNode(\"<div class=\\\"upload-prompt\\\" data-v-7ba5bd90><p data-v-7ba5bd90>Drag and drop files here or click to select</p><div class=\\\"supported-formats\\\" data-v-7ba5bd90><p data-v-7ba5bd90>Supported formats:</p><ul data-v-7ba5bd90><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìÑ</span> Documents (PDF, DOCX)</li><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìä</span> Presentations (PPTX)</li><li data-v-7ba5bd90><span class=\\\"format-icon\\\" data-v-7ba5bd90>üìù</span> Text files (TXT)</li></ul></div></div>\", 1))], 32 /* NEED_HYDRATION */), $setup.hasFileErrors ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createVNode($setup[\"FileErrorDisplay\"], {\n    \"extraction-errors\": $setup.extractionErrors,\n    \"unsupported-files\": $setup.unsupportedFiles\n  }, null, 8 /* PROPS */, [\"extraction-errors\", \"unsupported-files\"])])) : _createCommentVNode(\"v-if\", true), $setup.selectedFiles.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Selected Files:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedFiles, (file, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"file-item\"\n    }, [_createElementVNode(\"span\", _hoisted_7, _toDisplayString(file.name), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.removeFile(index),\n      class: \"remove-btn\",\n      title: \"Remove file\"\n    }, \"√ó\", 8 /* PROPS */, _hoisted_8)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_9, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", null, \"Number of Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_10, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.questionCount = $event),\n    min: \"1\",\n    max: \"20\",\n    placeholder: \"Enter number of questions\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.questionCount]])])]), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    disabled: !$setup.isFormValid || $setup.isLoading,\n    onClick: $setup.handleSubmit\n  }, _toDisplayString($setup.isLoading ? 'Generating Questions...' : 'Submit'), 9 /* TEXT, PROPS */, _hoisted_11)])) : _createCommentVNode(\"v-if\", true), $setup.predictedScore !== null && !$setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Ready to Start!\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"score-circle\", $setup.getPredictedScoreClass])\n  }, [_createElementVNode(\"span\", _hoisted_15, _toDisplayString($setup.predictedScore) + \"%\", 1 /* TEXT */), _cache[6] || (_cache[6] = _createElementVNode(\"span\", {\n    class: \"prediction-label\"\n  }, \"Predicted Score\", -1 /* HOISTED */))], 2 /* CLASS */)]), _createElementVNode(\"p\", _hoisted_16, \" Based on your study material, we predict you'll score around \" + _toDisplayString($setup.predictedScore) + \"%. \", 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"start-quiz-btn\",\n    onClick: $setup.startQuiz\n  }, \"Start Quiz\")])])) : _createCommentVNode(\"v-if\", true), $setup.quizStarted && !$setup.quizFinished ? (_openBlock(), _createBlock($setup[\"FlashcardQuiz\"], {\n    key: 2,\n    questions: $setup.adaptiveQuestions,\n    \"total-questions\": Number($setup.questionCount),\n    onQuizCompleted: $setup.handleQuizComplete\n  }, null, 8 /* PROPS */, [\"questions\", \"total-questions\"])) : _createCommentVNode(\"v-if\", true), $setup.quizFinished ? (_openBlock(), _createBlock($setup[\"QuizResults\"], {\n    key: 3,\n    questions: $setup.formatQuestionsForResults,\n    \"user-answers\": $setup.formatUserAnswersForResults,\n    score: $setup.correctAnswersCount,\n    \"predicted-score\": $setup.predictedScore,\n    onRestart: $setup.restartQuiz,\n    onGoBack: $setup.resetToMainScreen\n  }, null, 8 /* PROPS */, [\"questions\", \"user-answers\", \"score\", \"predicted-score\"])) : _createCommentVNode(\"v-if\", true), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createVNode","$setup","quizHistory","onCreateQuiz","handleCreateQuiz","onRetakeQuiz","handleRetakeQuiz","_createElementVNode","_hoisted_2","_hoisted_3","quizStarted","quizFinished","predictedScore","_hoisted_4","onDragover","_cache","_withModifiers","onDrop","handleDrop","onClick","triggerFileInput","role","tabindex","onKeydown","_withKeys","type","onChange","handleFileSelect","accept","ref","_createStaticVNode","hasFileErrors","_hoisted_5","extractionErrors","unsupportedFiles","_createCommentVNode","selectedFiles","length","_hoisted_6","_Fragment","_renderList","file","index","_hoisted_7","_toDisplayString","name","$event","removeFile","title","_hoisted_8","_hoisted_9","_hoisted_10","questionCount","min","max","placeholder","disabled","isFormValid","isLoading","handleSubmit","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_normalizeClass","getPredictedScoreClass","_hoisted_15","_hoisted_16","startQuiz","_createBlock","questions","adaptiveQuestions","Number","onQuizCompleted","handleQuizComplete","formatQuestionsForResults","formatUserAnswersForResults","score","correctAnswersCount","onRestart","restartQuiz","onGoBack","resetToMainScreen","error","_hoisted_17"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <Sidebar \n      :quiz-history=\"quizHistory\" \n      @create-quiz=\"handleCreateQuiz\"\n      @retake-quiz=\"handleRetakeQuiz\"\n    />\n    <div class=\"main-content\">\n      <div class=\"upload-container\">\n        <h1>QUIZZy</h1>\n        \n        <div v-if=\"!quizStarted && !quizFinished && predictedScore === null\" class=\"file-upload-section\">\n          <h2>Upload Files</h2>\n          <div class=\"upload-area\" \n            @dragover.prevent \n            @drop.prevent=\"handleDrop\"\n            @click=\"triggerFileInput\"\n            role=\"button\"\n            tabindex=\"0\"\n            @keydown.enter=\"triggerFileInput\"\n          >\n            <input \n              type=\"file\" \n              @change=\"handleFileSelect\" \n              accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\n              ref=\"fileInput\"\n              class=\"file-input\"\n            >\n            <div class=\"upload-prompt\">\n              <p>Drag and drop files here or click to select</p>\n              <div class=\"supported-formats\">\n                <p>Supported formats:</p>\n                <ul>\n                  <li><span class=\"format-icon\">üìÑ</span> Documents (PDF, DOCX)</li>\n                  <li><span class=\"format-icon\">üìä</span> Presentations (PPTX)</li>\n                  <li><span class=\"format-icon\">üìù</span> Text files (TXT)</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"hasFileErrors\" class=\"error-section\">\n            <FileErrorDisplay\n              :extraction-errors=\"extractionErrors\"\n              :unsupported-files=\"unsupportedFiles\"\n            />\n          </div>\n\n          <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n            <h3>Selected Files:</h3>\n            <ul>\n              <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n                <span class=\"file-name\">{{ file.name }}</span>\n                <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">√ó</button>\n              </li>\n            </ul>\n          </div>\n\n          <div class=\"questions-section\">\n            <h2>Number of Questions</h2>\n            <div class=\"question-input\">\n              <input\n                type=\"number\"\n                v-model=\"questionCount\"\n                min=\"1\"\n                max=\"20\"\n                placeholder=\"Enter number of questions\"\n              />\n            </div>\n          </div>\n\n          <button \n            class=\"submit-btn\" \n            :disabled=\"!isFormValid || isLoading\"\n            @click=\"handleSubmit\"\n          >\n            {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n          </button>\n        </div>\n\n        <div v-if=\"predictedScore !== null && !quizStarted && !quizFinished\">\n          <div class=\"predicted-score-container\">\n            <h2>Ready to Start!</h2>\n            <div class=\"score-prediction\">\n              <div class=\"score-circle\" :class=\"getPredictedScoreClass\">\n                <span class=\"predicted-value\">{{ predictedScore }}%</span>\n                <span class=\"prediction-label\">Predicted Score</span>\n              </div>\n            </div>\n            <p class=\"prediction-explanation\">\n              Based on your study material, we predict you'll score around {{ predictedScore }}%.\n            </p>\n            <button class=\"start-quiz-btn\" @click=\"startQuiz\">Start Quiz</button>\n          </div>\n        </div>\n\n        <FlashcardQuiz\n          v-if=\"quizStarted && !quizFinished\"\n          :questions=\"adaptiveQuestions\"\n          :total-questions=\"Number(questionCount)\"\n          @quiz-completed=\"handleQuizComplete\"\n        />\n\n        <QuizResults\n          v-if=\"quizFinished\"\n          :questions=\"formatQuestionsForResults\"\n          :user-answers=\"formatUserAnswersForResults\"\n          :score=\"correctAnswersCount\"\n          :predicted-score=\"predictedScore\"\n          @restart=\"restartQuiz\"\n          @go-back=\"resetToMainScreen\"\n        />\n\n        <div v-if=\"error\" class=\"error-message\">\n          {{ error }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport axios from 'axios';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nimport QuizResults from './components/QuizResults.vue';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport Sidebar from './components/Sidebar.vue';\n\n// File handling state\nconst selectedFiles = ref([]);\nconst fileInput = ref(null);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\n\n// Quiz state\nconst questionCount = ref('');\nconst isLoading = ref(false);\nconst error = ref('');\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst quizFinished = ref(false);\nconst adaptiveQuestions = ref([]);\nconst userResponses = ref([]);\nconst extractedContent = ref('');\n\n// Add quiz history state\nconst quizHistory = ref([]);\n\n// Load quiz history from localStorage on mount\nonMounted(() => {\n  const savedHistory = localStorage.getItem('quizHistory');\n  if (savedHistory) {\n    quizHistory.value = JSON.parse(savedHistory);\n  }\n});\n\n// Computed properties\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst getPredictedScoreClass = computed(() => {\n  if (predictedScore.value >= 80) return 'high';\n  if (predictedScore.value >= 60) return 'medium';\n  return 'low';\n});\n\n// File handling methods\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\n// Quiz handling methods\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  adaptiveQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  userResponses.value = [];\n  extractedContent.value = '';\n\n  try {\n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    extractedContent.value = fileContents.join('\\n\\n');\n    const requestedQuestionCount = Math.min(Number(questionCount.value) * 3, 30);\n    \n    const response = await generateQuestions(extractedContent.value, requestedQuestionCount);\n    const processedQuiz = processQuizResponse(response, extractedContent.value);\n    \n    adaptiveQuestions.value = selectQuestions(processedQuiz.questions);\n    predictedScore.value = calculatePredictedScore();\n\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response?.data?.error?.message || err.message}`;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n};\n\nconst handleQuizComplete = (responses) => {\n  userResponses.value = responses;\n  // Update the adaptiveQuestions with user answers\n  adaptiveQuestions.value = adaptiveQuestions.value.map((question, index) => ({\n    ...question,\n    userAnswer: responses[index].userAnswer,\n    isCorrect: responses[index].correct\n  }));\n  quizFinished.value = true;\n  saveQuizResults();\n};\n\nconst restartQuiz = () => {\n  quizStarted.value = true;\n  quizFinished.value = false;\n  userResponses.value = [];\n};\n\nconst resetToMainScreen = () => {\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  quizFinished.value = false;\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\nconst handleCreateQuiz = () => {\n  // Reset the quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  selectedFiles.value = [];\n  questionCount.value = '';\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n};\n\n// Add this function to handle quiz retake\nconst handleRetakeQuiz = (quizToRetake) => {\n  // Reset quiz state\n  quizStarted.value = false;\n  quizFinished.value = false;\n  predictedScore.value = null;\n  error.value = '';\n  extractedContent.value = '';\n  adaptiveQuestions.value = [];\n  userResponses.value = [];\n  \n  // Set the question count from the previous quiz\n  questionCount.value = quizToRetake.questionCount.toString();\n  \n  // Create a dummy file with the same name\n  const file = new File([''], quizToRetake.fileName, {\n    type: 'text/plain'\n  });\n  \n  // Set the selected file\n  selectedFiles.value = [file];\n  \n  // Automatically trigger the quiz generation\n  handleSubmit();\n};\n\n// Helper functions\nasync function readFileContent(file) {\n  return new Promise((resolve) => {\n    if (\n      file.type === \"application/pdf\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n      file.type.startsWith('image/')\n    ) {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n            resolve(\"[Could not extract file text]\");\n          }\n        })\n        .catch(() => {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: 'Server error while extracting text'\n          });\n          resolve(\"[Could not extract file text]\");\n        });\n    } else if (file.type === \"text/plain\") {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = () => {\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: 'Error reading text file'\n        });\n        resolve(\"[Could not read file]\");\n      };\n      reader.readAsText(file);\n    } else {\n      resolve(`[${file.name} is not a supported file type.]`);\n    }\n  });\n}\n\nasync function generateQuestions(content, count) {\n  const prompt = `Create a quiz with ${count} COMPLETELY UNIQUE and DIVERSE questions based on this text. Each question MUST cover a different concept or aspect. NO REPETITIVE or SIMILAR questions allowed.\n\nCRITICAL REQUIREMENTS:\n1. Each explanation MUST be a direct quote or paraphrased content from the original text\n2. Explanations should reference specific parts of the text that justify the correct answer\n3. Do NOT make up explanations - they must be based on the actual content provided\n4. If a concept isn't clearly explained in the text, don't create a question about it\n5. Automatically determine appropriate difficulty (easy/medium/hard) based on:\n   - Easy: Basic facts, definitions, or simple concepts\n   - Medium: Understanding relationships between concepts\n   - Hard: Analysis, evaluation, or complex relationships\n\nFormat requirements for each question:\n\nFor multiple choice questions:\n1. Question: [unique question text]\n2. Options (mark correct with *):\n   A) [option]\n   B) [option]\n   C) [option]\n   D) [option]\n3. Explanation: [quote or paraphrase relevant text that explains the correct answer]\n4. Difficulty: [AI determines: easy|medium|hard]\n\nFor true/false questions:\n1. True/False: [unique question text]\n2. Answer: [Write ONLY \"True*\" if true is correct, or \"False*\" if false is correct]\n3. Explanation: [quote or paraphrase relevant text that explains why the statement is true or false]\n4. Difficulty: [AI determines: easy|medium|hard]\n\nIMPORTANT:\n- Each question MUST cover a different topic/concept\n- NO similar or overlapping questions\n- Make questions engaging and thought-provoking\n- Ensure clear, unambiguous wording\n- ALL explanations must come from the provided text\n- For true/false questions, ALWAYS mark the correct answer with an asterisk (*)\n- Distribute difficulties naturally based on content complexity\n\nText to base questions on:\n${content}`;\n\n  const response = await axios.post(\n    `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n    {\n      contents: [{\n        parts: [{\n          text: prompt\n        }]\n      }],\n      generationConfig: {\n        temperature: 0.7,\n        topK: 40,\n        topP: 0.95,\n        maxOutputTokens: 2048,\n      }\n    },\n    {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n\n  return response.data.candidates[0].content.parts[0].text;\n}\n\nfunction processQuizResponse(response, content) {\n  const questions = [];\n  const lines = response.split('\\n');\n  let currentQuestion = null;\n  let collectingOptions = false;\n  \n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n      if (currentQuestion) {\n        findExplanationFromContent(currentQuestion, content);\n        questions.push(currentQuestion);\n      }\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n        type: 'multiple-choice',\n        options: {},\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n      collectingOptions = true;\n    } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n      if (currentQuestion) {\n        findExplanationFromContent(currentQuestion, content);\n        questions.push(currentQuestion);\n      }\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n        type: 'true-false',\n        options: { \n          'true': 'True',\n          'false': 'False'\n        },\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n      collectingOptions = true;\n    } else if (currentQuestion && collectingOptions) {\n      if (currentQuestion.type === 'multiple-choice') {\n        const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n        if (optionMatch) {\n          const letter = optionMatch[1].toUpperCase();\n          let option = optionMatch[2].trim();\n          \n          // Check for asterisk at start or end of option\n          if (option.startsWith('*') || option.endsWith('*')) {\n            currentQuestion.correctAnswer = letter;\n            option = option.replace(/^\\*|\\*$/g, '').trim();\n          }\n          currentQuestion.options[letter] = option;\n        } else if (line.toLowerCase().startsWith('explanation:')) {\n          collectingOptions = false;\n        }\n      } else if (currentQuestion.type === 'true-false') {\n        // Look for the Answer: line specifically\n        if (line.toLowerCase().startsWith('answer:')) {\n          const answer = line.substring(7).trim().toLowerCase();\n          if (answer.includes('true*') || answer.includes('*true')) {\n            currentQuestion.correctAnswer = 'true';\n          } else if (answer.includes('false*') || answer.includes('*false')) {\n            currentQuestion.correctAnswer = 'false';\n          }\n        } else if (line.toLowerCase().startsWith('explanation:')) {\n          collectingOptions = false;\n        }\n      }\n    }\n  }\n  \n  if (currentQuestion) {\n    findExplanationFromContent(currentQuestion, content);\n    questions.push(currentQuestion);\n  }\n\n  // Validate and fix questions\n  const validQuestions = questions.filter(q => {\n    if (q.type === 'multiple-choice') {\n      // Must have at least 2 options and a correct answer\n      const hasEnoughOptions = Object.keys(q.options).length >= 2;\n      if (!hasEnoughOptions || !q.correctAnswer) {\n        console.warn('Invalid multiple choice question:', q);\n        return false;\n      }\n      return true;\n    } else if (q.type === 'true-false') {\n      // For true/false questions, try to infer the answer from the explanation if not explicitly set\n      if (!q.correctAnswer && q.explanation) {\n        const lowerExplanation = q.explanation.toLowerCase();\n        if (lowerExplanation.includes('this statement is true')) {\n          q.correctAnswer = 'true';\n        } else if (lowerExplanation.includes('this statement is false')) {\n          q.correctAnswer = 'false';\n        }\n      }\n      \n      // If still no answer, warn and default to false (since defaulting to true might be misleading)\n      if (!q.correctAnswer) {\n        console.warn('True/False question missing correct answer, inferring from context:', q);\n        // Look for negative indicators in the question\n        const questionLower = q.text.toLowerCase();\n        const hasNegativeIndicators = ['only', 'solely', 'never', 'always', 'all', 'none'].some(word => \n          questionLower.includes(word)\n        );\n        q.correctAnswer = hasNegativeIndicators ? 'false' : 'true';\n      }\n      return true;\n    }\n    return false;\n  });\n\n  if (validQuestions.length === 0) {\n    throw new Error('No valid questions could be generated from the content.');\n  }\n  \n  return { questions: validQuestions };\n}\n\nfunction findExplanationFromContent(question, content) {\n  // Split content into paragraphs\n  const paragraphs = content.split(/\\n\\s*\\n/);\n  \n  // Create search terms from the question and answer\n  const searchTerms = [\n    ...question.text.toLowerCase().replace(/[.,?!]/g, '').split(' '),\n    ...(question.type === 'multiple-choice' && question.options[question.correctAnswer] \n      ? question.options[question.correctAnswer].toLowerCase().split(' ') \n      : [])\n  ].filter(word => word.length > 3);\n  \n  // Find relevant paragraphs with scoring\n  const relevantParagraphs = paragraphs.map(paragraph => {\n    const normalizedParagraph = paragraph.toLowerCase();\n    let score = 0;\n    \n    // Score exact phrase matches higher\n    if (normalizedParagraph.includes(question.text.toLowerCase())) {\n      score += 15;\n    }\n    \n    // Score keyword matches\n    searchTerms.forEach(term => {\n      if (normalizedParagraph.includes(term)) {\n        score += 2;\n      }\n    });\n\n    return {\n      text: paragraph.trim(),\n      score\n    };\n  }).filter(p => p.score > 0)\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 1); // Get most relevant paragraph\n\n  if (relevantParagraphs.length > 0) {\n    question.explanation = relevantParagraphs[0].text;\n  } else {\n    // Basic fallback explanations\n    if (question.type === 'true-false') {\n      const isTrue = question.correctAnswer === 'true';\n      question.explanation = `This statement is ${isTrue ? 'true' : 'false'} based on the provided content.`;\n    } else {\n      const correctOption = question.options[question.correctAnswer];\n      question.explanation = `The correct answer is \"${correctOption}\" according to the material.`;\n    }\n  }\n}\n\nfunction selectQuestions(questions) {\n  const shuffledQuestions = [...questions]\n    .sort(() => Math.random() - 0.5)\n    .filter((question, index, self) => \n      index === self.findIndex((q) => \n        q.text.toLowerCase().replace(/[^\\w\\s]/g, '') === \n        question.text.toLowerCase().replace(/[^\\w\\s]/g, '')\n      )\n    );\n\n  const selectedQuestions = [];\n  const targetPerDifficulty = Math.ceil(Number(questionCount.value) / 3);\n  const difficultyCount = { easy: 0, medium: 0, hard: 0 };\n\n  for (const difficulty of ['easy', 'medium', 'hard']) {\n    const questionsOfDifficulty = shuffledQuestions.filter(q => \n      q.difficulty === difficulty && !selectedQuestions.includes(q)\n    );\n    \n    for (const question of questionsOfDifficulty) {\n      if (difficultyCount[difficulty] < targetPerDifficulty && \n          selectedQuestions.length < Number(questionCount.value)) {\n        selectedQuestions.push(question);\n        difficultyCount[difficulty]++;\n      }\n    }\n  }\n\n  while (selectedQuestions.length < Number(questionCount.value)) {\n    const remainingQuestion = shuffledQuestions.find(q => !selectedQuestions.includes(q));\n    if (remainingQuestion) {\n      selectedQuestions.push(remainingQuestion);\n    } else {\n      break;\n    }\n  }\n\n  return selectedQuestions;\n}\n\nfunction calculatePredictedScore() {\n  const contentCoverage = analyzeContentForCoverage();\n  const contentComplexity = analyzeContentComplexity();\n  const questionDiversity = analyzeQuestionDiversity();\n  \n  // Weight factors\n  const coverageWeight = 0.4;\n  const complexityWeight = 0.3;\n  const diversityWeight = 0.3;\n  \n  // Calculate weighted score\n  const predictedScore = (\n    contentCoverage * coverageWeight +\n    contentComplexity * complexityWeight +\n    questionDiversity * diversityWeight\n  );\n  \n  return Math.max(0, Math.min(100, Math.round(predictedScore)));\n}\n\nfunction analyzeContentForCoverage() {\n  // Analyze how well the content matches with generated questions\n  const totalContent = extractedContent.value.length;\n  if (totalContent === 0) return 0;\n  \n  // Calculate coverage based on content length and number of questions\n  const averageContentPerQuestion = 500; // baseline characters per question\n  const expectedQuestions = Math.ceil(totalContent / averageContentPerQuestion);\n  const actualQuestions = Number(questionCount.value);\n  \n  const coverage = Math.min(actualQuestions / expectedQuestions, 1) * 100;\n  return coverage;\n}\n\nfunction analyzeContentComplexity() {\n  const content = extractedContent.value.toLowerCase();\n  \n  // Define complexity indicators\n  const complexityIndicators = [\n    'analyze', 'compare', 'contrast', 'evaluate', 'explain',\n    'describe', 'discuss', 'examine', 'interpret', 'justify',\n    'therefore', 'however', 'although', 'furthermore', 'consequently'\n  ];\n  \n  // Count complexity indicators\n  let complexityScore = 0;\n  complexityIndicators.forEach(indicator => {\n    const regex = new RegExp(indicator, 'g');\n    const matches = content.match(regex);\n    if (matches) {\n      complexityScore += matches.length;\n    }\n  });\n  \n  // Normalize score to 0-100 range\n  const normalizedScore = Math.min(complexityScore * 5, 100);\n  return normalizedScore;\n}\n\nfunction analyzeQuestionDiversity() {\n  if (!adaptiveQuestions.value.length) return 0;\n  \n  // Count different types of questions\n  const types = new Set(adaptiveQuestions.value.map(q => q.type));\n  const typesDiversity = (types.size / 2) * 50; // 2 is max types (multiple-choice and true-false)\n  \n  // Analyze question text similarity to ensure diverse topics\n  const questionTexts = adaptiveQuestions.value.map(q => q.text.toLowerCase());\n  let uniqueTopics = 0;\n  const processedKeywords = new Set();\n  \n  questionTexts.forEach(text => {\n    const keywords = text.split(' ')\n      .filter(word => word.length > 4) // Consider only significant words\n      .map(word => word.replace(/[^a-z]/g, '')); // Clean up words\n      \n    keywords.forEach(keyword => {\n      if (!processedKeywords.has(keyword)) {\n        uniqueTopics++;\n        processedKeywords.add(keyword);\n      }\n    });\n  });\n  \n  const topicsDiversity = Math.min(uniqueTopics / questionTexts.length * 50, 50);\n  \n  return typesDiversity + topicsDiversity;\n}\n\n// Results formatting\nconst formatQuestionsForResults = computed(() => {\n  return adaptiveQuestions.value.map((q, index) => ({\n    text: q.text,\n    type: q.type,\n    options: q.options,\n    userAnswer: userResponses.value[index]?.userAnswer,\n    correctAnswer: q.correctAnswer,\n    explanation: q.explanation,\n    isCorrect: userResponses.value[index]?.correct\n  }));\n});\n\nconst formatUserAnswersForResults = computed(() => {\n  return userResponses.value.map(r => r.userAnswer);\n});\n\nconst correctAnswersCount = computed(() => {\n  return userResponses.value.filter(r => r.correct).length;\n});\n\n// Update the calculateScore function\nconst calculateScore = () => {\n  if (!userResponses.value.length) return 0;\n  const correctAnswers = userResponses.value.filter(r => r.correct).length;\n  return Math.round((correctAnswers / userResponses.value.length) * 100);\n};\n\n// Add this function to save quiz results\nconst saveQuizResults = () => {\n  const quizResult = {\n    fileName: selectedFiles.value[0]?.name || 'Untitled Quiz',\n    questionCount: Number(questionCount.value),\n    predictedScore: predictedScore.value,\n    actualScore: calculateScore(),\n    date: new Date()\n  };\n  \n  quizHistory.value.unshift(quizResult);\n  localStorage.setItem('quizHistory', JSON.stringify(quizHistory.value));\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.main-content {\n  flex: 1;\n  margin-left: 280px; /* Same as sidebar width */\n  padding: 2rem;\n  display: flex;\n  justify-content: center;\n}\n\n.upload-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 90%;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  display: flex;\n  flex-direction: column;\n  gap: 0.8rem;\n  margin: 1.5rem 0;\n}\n\n.options.true-false {\n  flex-direction: row;\n  justify-content: center;\n  gap: 1.5rem;\n}\n\n.option-btn {\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 1rem;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: white;\n  color: #333;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.2s ease;\n}\n\n.options.true-false .option-btn {\n  width: auto;\n  min-width: 120px;\n  justify-content: center;\n  font-size: 1.1rem;\n  font-weight: 500;\n}\n\n.option-letter {\n  background-color: #f5f5f5;\n  color: #666;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  margin-right: 1rem;\n  font-weight: 600;\n}\n\n.option-text {\n  flex: 1;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #2196F3;\n  background-color: #f8f9fa;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #e3f2fd;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n  color: #c62828;\n}\n\n.feedback {\n  margin-top: 1.5rem;\n  text-align: center;\n}\n\n.correct-text {\n  color: #4CAF50;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.incorrect-text {\n  color: #f44336;\n  font-weight: bold;\n  font-size: 1.2rem;\n  margin: 0.5rem 0;\n}\n\n.next-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  padding: 0.8rem 2rem;\n  border-radius: 25px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  transition: all 0.2s ease;\n}\n\n.next-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-1px);\n}\n\n.quiz-progress {\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background-color: #e0e0e0;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4CAF50;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  display: block;\n  text-align: center;\n  color: #666;\n  font-size: 0.9rem;\n}\n\n.next-btn {\n  width: auto;\n  min-width: 150px;\n  margin-top: 1rem;\n}\n\n.quiz-results {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.score-summary {\n  text-align: center;\n  margin-bottom: 2rem;\n  padding: 1rem;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.questions-review {\n  margin-top: 2rem;\n}\n\n.question-review {\n  margin-bottom: 2rem;\n  padding: 1rem;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fff;\n}\n\n.question-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.question-number {\n  font-weight: bold;\n  color: #666;\n}\n\n.answer-status {\n  padding: 0.25rem 0.75rem;\n  border-radius: 4px;\n  font-weight: bold;\n}\n\n.answer-status.correct {\n  background-color: #E8F5E9;\n  color: #2E7D32;\n}\n\n.answer-status.incorrect {\n  background-color: #FFEBEE;\n  color: #C62828;\n}\n\n.question-text {\n  font-size: 1.1rem;\n  margin-bottom: 1rem;\n  color: #333;\n}\n\n.answer-details {\n  background-color: #f8f9fa;\n  padding: 1rem;\n  border-radius: 4px;\n}\n\n.your-answer, .correct-answer {\n  margin-bottom: 0.5rem;\n}\n\n.question-explanation {\n  margin-top: 1rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e0e0e0;\n}\n\n.explanation-text {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #f8f9fa;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n  color: #333;\n  font-size: 0.95rem;\n  line-height: 1.5;\n}\n\n.explanation-text p {\n  margin: 0.5rem 0;\n}\n\n.explanation-text strong {\n  color: #2196F3;\n}\n\n.supported-formats {\n  margin-top: 1rem;\n  text-align: left;\n  display: inline-block;\n}\n\n.supported-formats ul {\n  list-style: none;\n  padding: 0;\n  margin: 0.5rem 0;\n}\n\n.supported-formats li {\n  margin: 0.3rem 0;\n  color: #555;\n}\n\n.format-icon {\n  margin-right: 0.5rem;\n}\n\n.predicted-score-container {\n  text-align: center;\n  padding: 2rem;\n  background-color: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n.score-prediction {\n  margin: 2rem 0;\n}\n\n.score-circle {\n  width: 180px;\n  height: 180px;\n  border-radius: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  transition: all 0.3s ease;\n}\n\n.score-circle.high {\n  background-color: #e8f5e9;\n  border: 4px solid #4CAF50;\n}\n\n.score-circle.medium {\n  background-color: #fff3e0;\n  border: 4px solid #ff9800;\n}\n\n.score-circle.low {\n  background-color: #ffebee;\n  border: 4px solid #f44336;\n}\n\n.predicted-value {\n  font-size: 3rem;\n  font-weight: bold;\n  line-height: 1;\n  margin-bottom: 0.5rem;\n}\n\n.prediction-label {\n  font-size: 1rem;\n  opacity: 0.8;\n}\n\n.prediction-explanation {\n  color: #666;\n  margin: 1.5rem 0;\n  font-size: 1.1rem;\n  line-height: 1.5;\n}\n\n.start-quiz-btn {\n  background-color: #2196F3;\n  color: white;\n  padding: 1rem 2.5rem;\n  border: none;\n  border-radius: 25px;\n  font-size: 1.2rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(33, 150, 243, 0.3);\n}\n\n.start-quiz-btn:hover {\n  background-color: #1976D2;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(33, 150, 243, 0.4);\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}