{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"questions-display\"\n};\nconst _hoisted_2 = {\n  class: \"questions-container\"\n};\nconst _hoisted_3 = {\n  class: \"question\"\n};\nconst _hoisted_4 = {\n  class: \"question-number\"\n};\nconst _hoisted_5 = {\n  class: \"answer-section\"\n};\nconst _hoisted_6 = [\"onUpdate:modelValue\", \"placeholder\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"Generated Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"question-card\"\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString(index + 1) + \".\", 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(question), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"textarea\", {\n      \"onUpdate:modelValue\": $event => $setup.answers[index] = $event,\n      placeholder: 'Type your answer for question ' + (index + 1),\n      rows: \"3\",\n      class: \"answer-input\"\n    }, null, 8 /* PROPS */, _hoisted_6), [[_vModelText, $setup.answers[index]]])])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", {\n    class: \"actions\"\n  }, [_createElementVNode(\"button\", {\n    onClick: $setup.handleSubmit,\n    class: \"submit-answers-btn\"\n  }, \"Submit Answers\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$props","questions","question","index","key","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5","$event","$setup","answers","placeholder","rows","_hoisted_6","onClick","handleSubmit"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\components\\QuestionsDisplay.vue"],"sourcesContent":["<template>\r\n  <div class=\"questions-display\">\r\n    <h2>Generated Questions</h2>\r\n    <div class=\"questions-container\">\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"question-card\">\r\n        <div class=\"question\">\r\n          <span class=\"question-number\">{{ index + 1 }}.</span>\r\n          <p>{{ question }}</p>\r\n        </div>\r\n        <div class=\"answer-section\">\r\n          <textarea\r\n            v-model=\"answers[index]\"\r\n            :placeholder=\"'Type your answer for question ' + (index + 1)\"\r\n            rows=\"3\"\r\n            class=\"answer-input\"\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"actions\">\r\n      <button @click=\"handleSubmit\" class=\"submit-answers-btn\">Submit Answers</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineProps, defineEmits } from 'vue';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  }\r\n});\r\n\r\nconst answers = ref([]);\r\nconst emit = defineEmits(['submit-answers']);\r\n\r\n// Initialize answers array with empty strings\r\nanswers.value = Array(props.questions.length).fill('');\r\n\r\nconst handleSubmit = () => {\r\n  emit('submit-answers', answers.value);\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.questions-display {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 8px;\r\n}\r\n\r\nh2 {\r\n  color: #333;\r\n  margin-bottom: 1.5rem;\r\n  text-align: center;\r\n}\r\n\r\n.questions-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.question-card {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  padding: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.question {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.question-number {\r\n  font-weight: bold;\r\n  color: #4CAF50;\r\n}\r\n\r\n.answer-section {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.answer-input {\r\n  width: 100%;\r\n  padding: 0.8rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  resize: vertical;\r\n  min-height: 80px;\r\n}\r\n\r\n.answer-input:focus {\r\n  outline: none;\r\n  border-color: #4CAF50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.actions {\r\n  margin-top: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.submit-answers-btn {\r\n  padding: 0.8rem 2rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-answers-btn:hover {\r\n  background-color: #45a049;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;EAEvBA,KAAK,EAAC;AAAqB;;EAEvBA,KAAK,EAAC;AAAU;;EACbA,KAAK,EAAC;AAAiB;;EAG1BA,KAAK,EAAC;AAAgB;mBATnC;;uBACEC,mBAAA,CAqBM,OArBNC,UAqBM,G,0BApBJC,mBAAA,CAA4B,YAAxB,qBAAmB,sBACvBA,mBAAA,CAeM,OAfNC,UAeM,I,kBAdJH,mBAAA,CAaMI,SAAA,QAjBZC,WAAA,CAIuCC,MAAA,CAAAC,SAAS,EAJhD,CAImBC,QAAQ,EAAEC,KAAK;yBAA5BT,mBAAA,CAaM;MAbuCU,GAAG,EAAED,KAAK;MAAEV,KAAK,EAAC;QAC7DG,mBAAA,CAGM,OAHNS,UAGM,GAFJT,mBAAA,CAAqD,QAArDU,UAAqD,EAAAC,gBAAA,CAApBJ,KAAK,QAAO,GAAC,iBAC9CP,mBAAA,CAAqB,WAAAW,gBAAA,CAAfL,QAAQ,iB,GAEhBN,mBAAA,CAOM,OAPNY,UAOM,G,gBANJZ,mBAAA,CAKY;MAftB,uBAAAa,MAAA,IAWqBC,MAAA,CAAAC,OAAO,CAACR,KAAK,IAAAM,MAAA;MACrBG,WAAW,sCAAsCT,KAAK;MACvDU,IAAI,EAAC,GAAG;MACRpB,KAAK,EAAC;4BAdlBqB,UAAA,I,cAWqBJ,MAAA,CAAAC,OAAO,CAACR,KAAK,G;oCAQ9BP,mBAAA,CAEM;IAFDH,KAAK,EAAC;EAAS,IAClBG,mBAAA,CAAgF;IAAvEmB,OAAK,EAAEL,MAAA,CAAAM,YAAY;IAAEvB,KAAK,EAAC;KAAqB,gBAAc,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}