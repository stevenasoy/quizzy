{"ast":null,"code":"import { ref, computed } from 'vue';\nimport axios from 'axios';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedFiles = ref([]);\n    const questionCount = ref('');\n    const fileInput = ref(null);\n    const generatedQuestions = ref([]);\n    const isLoading = ref(false);\n    const error = ref('');\n    const showQuestions = ref(false);\n    const flashcardQuestions = ref([]);\n    const quiz = ref(null);\n    const userAnswers = ref([]);\n    const showAnswers = ref(false);\n    const unsupportedFiles = ref([]);\n    const isFormValid = computed(() => {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    const triggerFileInput = () => {\n      fileInput.value.click();\n    };\n    const handleFileSelect = event => {\n      const files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    const handleDrop = event => {\n      const files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    const addFiles = files => {\n      const validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n      const validFiles = [];\n      const invalidFiles = [];\n      files.forEach(file => {\n        if (validTypes.includes(file.type)) {\n          validFiles.push(file);\n        } else {\n          invalidFiles.push(file);\n        }\n      });\n      selectedFiles.value = [...selectedFiles.value, ...validFiles];\n      unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n    };\n    const removeFile = index => {\n      selectedFiles.value.splice(index, 1);\n    };\n    const readFileContent = file => {\n      return new Promise((resolve, reject) => {\n        if (file.type === \"application/pdf\" || file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" || file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type.startsWith('image/')) {\n          // PDF, PPTX, DOCX, or Image - send to backend for extraction\n          const formData = new FormData();\n          formData.append('file', file);\n\n          // Use the correct backend URL\n          const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n          fetch(`${backendUrl}/extract-file`, {\n            method: 'POST',\n            body: formData\n          }).then(res => res.json()).then(data => {\n            if (data.text) resolve(data.text);else resolve(\"[Could not extract file text]\");\n          }).catch(() => resolve(\"[Could not extract file text]\"));\n        } else if (file.type === \"text/plain\") {\n          // Plain text\n          const reader = new FileReader();\n          reader.onload = e => resolve(e.target.result);\n          reader.onerror = e => reject(e);\n          reader.readAsText(file);\n        } else {\n          resolve(`[${file.name} is not a supported file type.]`);\n        }\n      });\n    };\n    const handleSubmit = async () => {\n      if (!isFormValid.value) return;\n      isLoading.value = true;\n      error.value = '';\n      generatedQuestions.value = [];\n      flashcardQuestions.value = [];\n      try {\n        // Read all file contents\n        const fileContents = await Promise.all(selectedFiles.value.map(file => readFileContent(file)));\n\n        // Combine all file contents\n        const combinedContent = fileContents.join('\\n\\n');\n        console.log('Extracted file content:', combinedContent);\n\n        // Prepare the prompt for Gemini\n        const prompt = `Create a quiz with ${questionCount.value} questions based on this text. Format each question exactly as follows:\n\nFor multiple choice questions:\n1. Start with \"Question: [question text]\"\n2. List options as:\n   A) [option text]\n   B) [option text]\n   C) [option text]\n   D) [option text]\n   (Mark correct answer with * after the option)\n3. Add \"Explanation: [explanation text]\"\n\nFor true/false questions:\n1. Start with \"True/False: [question text]\"\n2. List options as:\n   True*\n   False\n   (or vice versa, with * marking correct answer)\n3. Add \"Explanation: [explanation text]\"\n\nText: ${combinedContent}`;\n        console.log('Sending request to Gemini API...');\n        console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\n\n        // Call Gemini API\n        const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`, {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024\n          }\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('API Response:', response.data);\n\n        // Process the response for both quiz and flashcards\n        const quizText = response.data.candidates[0].content.parts[0].text;\n        console.log('Quiz text from API:', quizText);\n        const processedQuiz = processQuizResponse(quizText);\n        console.log('Processed quiz:', processedQuiz);\n\n        // Convert quiz questions to flashcard format\n        flashcardQuestions.value = processedQuiz.questions.map(q => ({\n          text: q.text,\n          options: q.type === 'multiple-choice' ? Object.entries(q.options).map(([letter, text]) => ({\n            letter,\n            text\n          })) : [{\n            letter: 'T',\n            text: 'True'\n          }, {\n            letter: 'F',\n            text: 'False'\n          }],\n          answer: q.type === 'multiple-choice' ? q.correctAnswer : q.correctAnswer === 'true' ? 'T' : 'F',\n          explanation: q.explanation\n        }));\n        console.log('Flashcard questions:', flashcardQuestions.value);\n        console.log('Number of flashcard questions:', flashcardQuestions.value.length);\n\n        // Show the flashcard quiz\n        showQuestions.value = true;\n        console.log('showQuestions set to:', showQuestions.value);\n        console.log('Current state:', {\n          showQuestions: showQuestions.value,\n          flashcardQuestionsLength: flashcardQuestions.value.length,\n          hasQuestions: flashcardQuestions.value.length > 0\n        });\n      } catch (err) {\n        console.error('Detailed Error:', err.response ? err.response.data : err);\n        error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const resetToMainScreen = () => {\n      showQuestions.value = false;\n      flashcardQuestions.value = [];\n      generatedQuestions.value = [];\n      selectedFiles.value = [];\n      unsupportedFiles.value = [];\n      questionCount.value = '';\n      error.value = '';\n      isLoading.value = false;\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n    const checkAnswers = () => {\n      showAnswers.value = true;\n    };\n    const allQuestionsAnswered = computed(() => {\n      return userAnswers.value.length === quiz.value.questions.length;\n    });\n    const processQuizResponse = response => {\n      console.log('Processing quiz response:', response);\n      const questions = [];\n      const lines = response.split('\\n');\n      let currentQuestion = null;\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n        console.log('Processing line:', line);\n        if (line.startsWith('Question:')) {\n          if (currentQuestion) {\n            questions.push(currentQuestion);\n          }\n          currentQuestion = {\n            text: line.replace('Question:', '').trim(),\n            type: 'multiple-choice',\n            options: {},\n            correctAnswer: '',\n            explanation: ''\n          };\n          console.log('Created new multiple-choice question:', currentQuestion);\n        } else if (line.startsWith('True/False:')) {\n          if (currentQuestion) {\n            questions.push(currentQuestion);\n          }\n          currentQuestion = {\n            text: line.replace('True/False:', '').trim(),\n            type: 'true-false',\n            options: {\n              true: 'True',\n              false: 'False'\n            },\n            correctAnswer: '',\n            explanation: ''\n          };\n          console.log('Created new true/false question:', currentQuestion);\n        } else if (currentQuestion) {\n          if (line.match(/^[A-D]\\)/)) {\n            const option = line.substring(2).trim();\n            const letter = line[0];\n            currentQuestion.options[letter] = option;\n            if (option.includes('*')) {\n              currentQuestion.correctAnswer = letter;\n              currentQuestion.options[letter] = option.replace('*', '').trim();\n            }\n            console.log('Added option to question:', {\n              letter,\n              option\n            });\n          } else if (line === 'True*' || line === 'False*') {\n            currentQuestion.correctAnswer = line === 'True*' ? 'true' : 'false';\n            console.log('Set true/false answer:', currentQuestion.correctAnswer);\n          } else if (line.startsWith('Explanation:')) {\n            currentQuestion.explanation = line.replace('Explanation:', '').trim();\n            console.log('Added explanation:', currentQuestion.explanation);\n          }\n        }\n      }\n      if (currentQuestion) {\n        questions.push(currentQuestion);\n      }\n      console.log('Final processed questions:', questions);\n      return {\n        questions\n      };\n    };\n    const __returned__ = {\n      selectedFiles,\n      questionCount,\n      fileInput,\n      generatedQuestions,\n      isLoading,\n      error,\n      showQuestions,\n      flashcardQuestions,\n      quiz,\n      userAnswers,\n      showAnswers,\n      unsupportedFiles,\n      isFormValid,\n      triggerFileInput,\n      handleFileSelect,\n      handleDrop,\n      addFiles,\n      removeFile,\n      readFileContent,\n      handleSubmit,\n      resetToMainScreen,\n      checkAnswers,\n      allQuestionsAnswered,\n      processQuizResponse,\n      ref,\n      computed,\n      get axios() {\n        return axios;\n      },\n      FlashcardQuiz,\n      TrueFalseQuestion\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","axios","FlashcardQuiz","TrueFalseQuestion","selectedFiles","questionCount","fileInput","generatedQuestions","isLoading","error","showQuestions","flashcardQuestions","quiz","userAnswers","showAnswers","unsupportedFiles","isFormValid","value","length","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validTypes","validFiles","invalidFiles","forEach","file","includes","type","push","removeFile","index","splice","readFileContent","Promise","resolve","reject","startsWith","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","data","text","catch","reader","FileReader","onload","e","result","onerror","readAsText","name","handleSubmit","fileContents","all","map","combinedContent","join","console","log","prompt","VUE_APP_GEMINI_API_KEY","response","post","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","quizText","candidates","content","processedQuiz","processQuizResponse","questions","q","options","Object","entries","letter","answer","correctAnswer","explanation","flashcardQuestionsLength","hasQuestions","err","message","resetToMainScreen","checkAnswers","allQuestionsAnswered","lines","split","currentQuestion","i","line","trim","replace","true","false","match","option","substring"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"upload-container\">\r\n      <h1>QUIZZy</h1>\r\n      \r\n      <div v-if=\"!showQuestions\" class=\"file-upload-section\">\r\n        <h2>Upload Files</h2>\r\n        <div class=\"upload-area\" \r\n          @dragover.prevent \r\n          @drop.prevent=\"handleDrop\"\r\n          @click=\"triggerFileInput\"\r\n          role=\"button\"\r\n          tabindex=\"0\"\r\n          @keydown.enter=\"triggerFileInput\"\r\n        >\r\n          <input \r\n            type=\"file\" \r\n            @change=\"handleFileSelect\" \r\n            accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\r\n            ref=\"fileInput\"\r\n            class=\"file-input\"\r\n          >\r\n          <div class=\"upload-prompt\">\r\n            <p>Drag and drop files here or click to select</p>\r\n            <p>Supported formats: PDF, DOCX, PPTX, TXT</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\r\n          <h3>Selected Files:</h3>\r\n          <ul>\r\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\r\n              <span class=\"file-name\">{{ file.name }}</span>\r\n              <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">×</button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div v-if=\"unsupportedFiles.length > 0\" class=\"unsupported-files\">\r\n          <h3>Unsupported Files:</h3>\r\n          <ul>\r\n            <li v-for=\"(file, index) in unsupportedFiles\" :key=\"index\" class=\"file-item\">\r\n              <span class=\"file-name\">{{ file.name }}</span>\r\n              <span class=\"unsupported-label\">(Unsupported format)</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"questions-section\">\r\n          <h2>Number of Questions</h2>\r\n          <div class=\"question-input\">\r\n            <input\r\n              type=\"number\"\r\n              v-model=\"questionCount\"\r\n              min=\"1\"\r\n              max=\"20\"\r\n              placeholder=\"Enter number of questions\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          class=\"submit-btn\" \r\n          :disabled=\"!isFormValid || isLoading\"\r\n          @click=\"handleSubmit\"\r\n        >\r\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\r\n        </button>\r\n      </div>\r\n\r\n      <div v-else>\r\n        <FlashcardQuiz\r\n          :questions=\"flashcardQuestions\"\r\n          @go-back=\"resetToMainScreen\"\r\n        />\r\n      </div>\r\n\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        {{ error }}\r\n      </div>\r\n    </div>\r\n\r\n    <template v-if=\"quiz\">\r\n      <div class=\"quiz-container\">\r\n        <h2>Generated Quiz</h2>\r\n        <template v-for=\"(question, index) in quiz.questions\" :key=\"index\">\r\n          <div class=\"question\">\r\n            <h3>Question {{ index + 1 }}: {{ question.text }}</h3>\r\n            <div class=\"options\">\r\n              <template v-if=\"question.type === 'multiple-choice'\">\r\n                <div v-for=\"(option, letter) in question.options\" :key=\"letter\" class=\"option\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    :id=\"`q${index}-${letter}`\"\r\n                    :name=\"`question${index}`\"\r\n                    :value=\"letter\"\r\n                    v-model=\"userAnswers[index]\"\r\n                  />\r\n                  <label :for=\"`q${index}-${letter}`\">{{ letter }}) {{ option }}</label>\r\n                </div>\r\n              </template>\r\n              <template v-else-if=\"question.type === 'true-false'\">\r\n                <TrueFalseQuestion\r\n                  :index=\"index\"\r\n                  :correct-answer=\"question.correctAnswer\"\r\n                  :explanation=\"question.explanation\"\r\n                  :show-feedback=\"showAnswers && userAnswers[index]\"\r\n                  @update:answer=\"userAnswers[index] = $event\"\r\n                />\r\n              </template>\r\n            </div>\r\n            <div v-if=\"showAnswers && userAnswers[index]\" class=\"feedback\">\r\n              <p :class=\"{ 'correct': userAnswers[index] === question.correctAnswer, 'incorrect': userAnswers[index] !== question.correctAnswer }\">\r\n                {{ userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!' }}\r\n              </p>\r\n              <p class=\"explanation\">{{ question.explanation }}</p>\r\n            </div>\r\n          </div>\r\n        </template>\r\n        <button @click=\"checkAnswers\" :disabled=\"!allQuestionsAnswered\">Check Answers</button>\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport axios from 'axios';\r\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\r\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\r\n\r\nconst selectedFiles = ref([]);\r\nconst questionCount = ref('');\r\nconst fileInput = ref(null);\r\nconst generatedQuestions = ref([]);\r\nconst isLoading = ref(false);\r\nconst error = ref('');\r\nconst showQuestions = ref(false);\r\nconst flashcardQuestions = ref([]);\r\nconst quiz = ref(null);\r\nconst userAnswers = ref([]);\r\nconst showAnswers = ref(false);\r\nconst unsupportedFiles = ref([]);\r\n\r\nconst isFormValid = computed(() => {\r\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\r\n});\r\n\r\nconst triggerFileInput = () => {\r\n  fileInput.value.click();\r\n};\r\n\r\nconst handleFileSelect = (event) => {\r\n  const files = Array.from(event.target.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst handleDrop = (event) => {\r\n  const files = Array.from(event.dataTransfer.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst addFiles = (files) => {\r\n  const validTypes = [\r\n    'application/msword',\r\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    'application/vnd.ms-powerpoint',\r\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n    'text/plain',\r\n    'application/pdf',\r\n    'image/png',\r\n    'image/jpeg',\r\n    'image/jpg',\r\n    'image/tiff',\r\n    'image/bmp'\r\n  ];\r\n  \r\n  const validFiles = [];\r\n  const invalidFiles = [];\r\n  \r\n  files.forEach(file => {\r\n    if (validTypes.includes(file.type)) {\r\n      validFiles.push(file);\r\n    } else {\r\n      invalidFiles.push(file);\r\n    }\r\n  });\r\n  \r\n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\r\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\r\n};\r\n\r\nconst removeFile = (index) => {\r\n  selectedFiles.value.splice(index, 1);\r\n};\r\n\r\nconst readFileContent = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (\r\n      file.type === \"application/pdf\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\r\n      file.type.startsWith('image/')\r\n    ) {\r\n      // PDF, PPTX, DOCX, or Image - send to backend for extraction\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      // Use the correct backend URL\r\n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\r\n      fetch(`${backendUrl}/extract-file`, {\r\n        method: 'POST',\r\n        body: formData\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.text) resolve(data.text);\r\n          else resolve(\"[Could not extract file text]\");\r\n        })\r\n        .catch(() => resolve(\"[Could not extract file text]\"));\r\n    } else if (file.type === \"text/plain\") {\r\n      // Plain text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    } else {\r\n      resolve(`[${file.name} is not a supported file type.]`);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  if (!isFormValid.value) return;\r\n\r\n  isLoading.value = true;\r\n  error.value = '';\r\n  generatedQuestions.value = [];\r\n  flashcardQuestions.value = [];\r\n\r\n  try {\r\n    // Read all file contents\r\n    const fileContents = await Promise.all(\r\n      selectedFiles.value.map(file => readFileContent(file))\r\n    );\r\n\r\n    // Combine all file contents\r\n    const combinedContent = fileContents.join('\\n\\n');\r\n    console.log('Extracted file content:', combinedContent);\r\n\r\n    // Prepare the prompt for Gemini\r\n    const prompt = `Create a quiz with ${questionCount.value} questions based on this text. Format each question exactly as follows:\r\n\r\nFor multiple choice questions:\r\n1. Start with \"Question: [question text]\"\r\n2. List options as:\r\n   A) [option text]\r\n   B) [option text]\r\n   C) [option text]\r\n   D) [option text]\r\n   (Mark correct answer with * after the option)\r\n3. Add \"Explanation: [explanation text]\"\r\n\r\nFor true/false questions:\r\n1. Start with \"True/False: [question text]\"\r\n2. List options as:\r\n   True*\r\n   False\r\n   (or vice versa, with * marking correct answer)\r\n3. Add \"Explanation: [explanation text]\"\r\n\r\nText: ${combinedContent}`;\r\n\r\n    console.log('Sending request to Gemini API...');\r\n    console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\r\n\r\n    // Call Gemini API\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log('API Response:', response.data);\r\n\r\n    // Process the response for both quiz and flashcards\r\n    const quizText = response.data.candidates[0].content.parts[0].text;\r\n    console.log('Quiz text from API:', quizText);\r\n    \r\n    const processedQuiz = processQuizResponse(quizText);\r\n    console.log('Processed quiz:', processedQuiz);\r\n    \r\n    // Convert quiz questions to flashcard format\r\n    flashcardQuestions.value = processedQuiz.questions.map(q => ({\r\n      text: q.text,\r\n      options: q.type === 'multiple-choice' \r\n        ? Object.entries(q.options).map(([letter, text]) => ({ letter, text }))\r\n        : [\r\n            { letter: 'T', text: 'True' },\r\n            { letter: 'F', text: 'False' }\r\n          ],\r\n      answer: q.type === 'multiple-choice' ? q.correctAnswer : (q.correctAnswer === 'true' ? 'T' : 'F'),\r\n      explanation: q.explanation\r\n    }));\r\n\r\n    console.log('Flashcard questions:', flashcardQuestions.value);\r\n    console.log('Number of flashcard questions:', flashcardQuestions.value.length);\r\n\r\n    // Show the flashcard quiz\r\n    showQuestions.value = true;\r\n    console.log('showQuestions set to:', showQuestions.value);\r\n    console.log('Current state:', {\r\n      showQuestions: showQuestions.value,\r\n      flashcardQuestionsLength: flashcardQuestions.value.length,\r\n      hasQuestions: flashcardQuestions.value.length > 0\r\n    });\r\n  } catch (err) {\r\n    console.error('Detailed Error:', err.response ? err.response.data : err);\r\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n\r\nconst resetToMainScreen = () => {\r\n  showQuestions.value = false;\r\n  flashcardQuestions.value = [];\r\n  generatedQuestions.value = [];\r\n  selectedFiles.value = [];\r\n  unsupportedFiles.value = [];\r\n  questionCount.value = '';\r\n  error.value = '';\r\n  isLoading.value = false;\r\n  if (fileInput.value) {\r\n    fileInput.value.value = '';\r\n  }\r\n};\r\n\r\nconst checkAnswers = () => {\r\n  showAnswers.value = true;\r\n};\r\n\r\nconst allQuestionsAnswered = computed(() => {\r\n  return userAnswers.value.length === quiz.value.questions.length;\r\n});\r\n\r\nconst processQuizResponse = (response) => {\r\n  console.log('Processing quiz response:', response);\r\n  const questions = [];\r\n  const lines = response.split('\\n');\r\n  let currentQuestion = null;\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const line = lines[i].trim();\r\n    if (!line) continue;\r\n\r\n    console.log('Processing line:', line);\r\n\r\n    if (line.startsWith('Question:')) {\r\n      if (currentQuestion) {\r\n        questions.push(currentQuestion);\r\n      }\r\n      currentQuestion = {\r\n        text: line.replace('Question:', '').trim(),\r\n        type: 'multiple-choice',\r\n        options: {},\r\n        correctAnswer: '',\r\n        explanation: ''\r\n      };\r\n      console.log('Created new multiple-choice question:', currentQuestion);\r\n    } else if (line.startsWith('True/False:')) {\r\n      if (currentQuestion) {\r\n        questions.push(currentQuestion);\r\n      }\r\n      currentQuestion = {\r\n        text: line.replace('True/False:', '').trim(),\r\n        type: 'true-false',\r\n        options: {\r\n          true: 'True',\r\n          false: 'False'\r\n        },\r\n        correctAnswer: '',\r\n        explanation: ''\r\n      };\r\n      console.log('Created new true/false question:', currentQuestion);\r\n    } else if (currentQuestion) {\r\n      if (line.match(/^[A-D]\\)/)) {\r\n        const option = line.substring(2).trim();\r\n        const letter = line[0];\r\n        currentQuestion.options[letter] = option;\r\n        if (option.includes('*')) {\r\n          currentQuestion.correctAnswer = letter;\r\n          currentQuestion.options[letter] = option.replace('*', '').trim();\r\n        }\r\n        console.log('Added option to question:', { letter, option });\r\n      } else if (line === 'True*' || line === 'False*') {\r\n        currentQuestion.correctAnswer = line === 'True*' ? 'true' : 'false';\r\n        console.log('Set true/false answer:', currentQuestion.correctAnswer);\r\n      } else if (line.startsWith('Explanation:')) {\r\n        currentQuestion.explanation = line.replace('Explanation:', '').trim();\r\n        console.log('Added explanation:', currentQuestion.explanation);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (currentQuestion) {\r\n    questions.push(currentQuestion);\r\n  }\r\n\r\n  console.log('Final processed questions:', questions);\r\n  return { questions };\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #f5f5f5;\r\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\r\n}\r\n\r\n.upload-container {\r\n  background-color: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  width: 90%;\r\n  max-width: 600px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\nh2 {\r\n  color: #444;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.file-upload-section {\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.upload-area {\r\n  border: 2px dashed #ccc;\r\n  border-radius: 8px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  margin-bottom: 1rem;\r\n  outline: none;\r\n}\r\n\r\n.upload-area:hover {\r\n  border-color: #666;\r\n  background-color: #f8f8f8;\r\n}\r\n\r\n.upload-area:focus {\r\n  border-color: #4CAF50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.file-input {\r\n  display: none;\r\n}\r\n\r\n.upload-prompt {\r\n  color: #666;\r\n}\r\n\r\n.upload-prompt p {\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.selected-files {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.selected-files ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.selected-files li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.remove-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.questions-section {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.question-input input {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.submit-btn {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.submit-btn:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.questions-list {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.question-item {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.error-message {\r\n  color: #ff4444;\r\n  margin-top: 1rem;\r\n  text-align: center;\r\n}\r\n\r\n.quiz-container {\r\n  margin-top: 2rem;\r\n  padding: 2rem;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.question {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.options {\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.option {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.feedback {\r\n  margin-top: 0.5rem;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.incorrect {\r\n  color: #ff4444;\r\n}\r\n\r\n.explanation {\r\n  margin-top: 0.5rem;\r\n  margin-left: 1rem;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\nbutton:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.file-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.file-name {\r\n  flex: 1;\r\n  margin-right: 0.5rem;\r\n  word-break: break-word;\r\n}\r\n\r\n.remove-btn {\r\n  flex-shrink: 0;\r\n  width: 24px;\r\n  height: 24px;\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.remove-btn:hover {\r\n  background-color: #ffeeee;\r\n}\r\n\r\n.unsupported-files {\r\n  margin-top: 1rem;\r\n  padding: 1rem;\r\n  background-color: #fff3f3;\r\n  border-radius: 4px;\r\n  border: 1px solid #ffdddd;\r\n}\r\n\r\n.unsupported-files h3 {\r\n  color: #d32f2f;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.unsupported-label {\r\n  color: #d32f2f;\r\n  font-size: 0.9em;\r\n  margin-left: 0.5rem;\r\n}\r\n\r\n.unsupported-files .file-item {\r\n  background-color: #fff;\r\n  border: 1px solid #ffdddd;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}