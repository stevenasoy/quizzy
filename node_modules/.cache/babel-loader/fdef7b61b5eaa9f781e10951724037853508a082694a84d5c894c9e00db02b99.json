{"ast":null,"code":"import { createElementVNode as _createElementVNode, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"upload-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"file-upload-section\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"selected-files\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"questions-section\"\n};\nconst _hoisted_7 = {\n  class: \"question-input\"\n};\nconst _hoisted_8 = [\"disabled\"];\nconst _hoisted_9 = {\n  key: 2,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[6] || (_cache[6] = _createElementVNode(\"h1\", null, \"File Upload and Questions\", -1 /* HOISTED */)), !$setup.showQuestions ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Upload Files\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"upload-area\",\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleDrop, [\"prevent\"])\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    multiple: \"\",\n    accept: \".doc,.docx,.ppt,.pptx,.txt,.pdf\",\n    onChange: $setup.handleFileSelect,\n    ref: \"fileInput\",\n    class: \"file-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _cache[2] || (_cache[2] = _createElementVNode(\"div\", {\n    class: \"upload-prompt\"\n  }, [_createElementVNode(\"p\", null, \"Drag and drop files here or click to select\"), _createElementVNode(\"p\", null, \"Supported formats: DOC, DOCX, PPT, PPTX, TXT, PDF\")], -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), $setup.selectedFiles.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Selected Files:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedFiles, (file, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index\n    }, [_createTextVNode(_toDisplayString(file.name) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.removeFile(index),\n      class: \"remove-btn\"\n    }, \"×\", 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_6, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", null, \"Number of Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_7, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.questionCount = $event),\n    min: \"1\",\n    max: \"20\",\n    placeholder: \"Enter number of questions\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.questionCount]])])]), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    disabled: !$setup.isFormValid || $setup.isLoading,\n    onClick: $setup.handleSubmit\n  }, _toDisplayString($setup.isLoading ? 'Generating Questions...' : 'Submit'), 9 /* TEXT, PROPS */, _hoisted_8)])) : (_openBlock(), _createBlock($setup[\"FlashcardQuiz\"], {\n    key: 1,\n    questions: $setup.flashcardQuestions,\n    onGoBack: $setup.resetToMainScreen\n  }, null, 8 /* PROPS */, [\"questions\"])), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$setup","showQuestions","_hoisted_3","onDragover","_cache","_withModifiers","onDrop","handleDrop","type","multiple","accept","onChange","handleFileSelect","ref","selectedFiles","length","_hoisted_4","_Fragment","_renderList","file","index","_createTextVNode","_toDisplayString","name","onClick","$event","removeFile","_hoisted_5","_createCommentVNode","_hoisted_6","_hoisted_7","questionCount","min","max","placeholder","disabled","isFormValid","isLoading","handleSubmit","_hoisted_8","_createBlock","questions","flashcardQuestions","onGoBack","resetToMainScreen","error","_hoisted_9"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div class=\"app-container\">\r\n    <div class=\"upload-container\">\r\n      <h1>File Upload and Questions</h1>\r\n      \r\n      <div v-if=\"!showQuestions\" class=\"file-upload-section\">\r\n        <h2>Upload Files</h2>\r\n        <div class=\"upload-area\" @dragover.prevent @drop.prevent=\"handleDrop\">\r\n          <input\r\n            type=\"file\"\r\n            multiple\r\n            accept=\".doc,.docx,.ppt,.pptx,.txt,.pdf\"\r\n            @change=\"handleFileSelect\"\r\n            ref=\"fileInput\"\r\n            class=\"file-input\"\r\n          />\r\n          <div class=\"upload-prompt\">\r\n            <p>Drag and drop files here or click to select</p>\r\n            <p>Supported formats: DOC, DOCX, PPT, PPTX, TXT, PDF</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\r\n          <h3>Selected Files:</h3>\r\n          <ul>\r\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\">\r\n              {{ file.name }}\r\n              <button @click=\"removeFile(index)\" class=\"remove-btn\">×</button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class=\"questions-section\">\r\n          <h2>Number of Questions</h2>\r\n          <div class=\"question-input\">\r\n            <input\r\n              type=\"number\"\r\n              v-model=\"questionCount\"\r\n              min=\"1\"\r\n              max=\"20\"\r\n              placeholder=\"Enter number of questions\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          class=\"submit-btn\" \r\n          :disabled=\"!isFormValid || isLoading\"\r\n          @click=\"handleSubmit\"\r\n        >\r\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\r\n        </button>\r\n      </div>\r\n\r\n      <FlashcardQuiz\r\n        v-else\r\n        :questions=\"flashcardQuestions\"\r\n        @go-back=\"resetToMainScreen\"\r\n      />\r\n\r\n      <div v-if=\"error\" class=\"error-message\">\r\n        {{ error }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport axios from 'axios';\r\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\r\nimport mammoth from \"mammoth\";\r\nimport JSZip from \"jszip\";\r\nimport pptxParser from \"pptx-parser\";\r\n\r\nconst selectedFiles = ref([]);\r\nconst questionCount = ref('');\r\nconst fileInput = ref(null);\r\nconst generatedQuestions = ref([]);\r\nconst isLoading = ref(false);\r\nconst error = ref('');\r\nconst showQuestions = ref(false);\r\nconst flashcardQuestions = ref([]);\r\n\r\nconst isFormValid = computed(() => {\r\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\r\n});\r\n\r\nconst handleFileSelect = (event) => {\r\n  const files = Array.from(event.target.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst handleDrop = (event) => {\r\n  const files = Array.from(event.dataTransfer.files);\r\n  addFiles(files);\r\n};\r\n\r\nconst addFiles = (files) => {\r\n  const validFiles = files.filter(file => {\r\n    const validTypes = [\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      'application/vnd.ms-powerpoint',\r\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n      'text/plain',\r\n      'application/pdf'\r\n    ];\r\n    return validTypes.includes(file.type);\r\n  });\r\n  \r\n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\r\n};\r\n\r\nconst removeFile = (index) => {\r\n  selectedFiles.value.splice(index, 1);\r\n};\r\n\r\nconst readFileContent = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    if (file.type === \"text/plain\") {\r\n      // Plain text\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsText(file);\r\n    } else if (\r\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n    ) {\r\n      // DOCX\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        try {\r\n          const arrayBuffer = e.target.result;\r\n          const result = await mammoth.extractRawText({ arrayBuffer });\r\n          resolve(result.value);\r\n        } catch (err) {\r\n          resolve(\"[Could not extract DOCX text]\");\r\n        }\r\n      };\r\n      reader.onerror = (e) => reject(e);\r\n      reader.readAsArrayBuffer(file);\r\n    } else if (\r\n      file.type === \"application/pdf\" ||\r\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\r\n    ) {\r\n      // PDF or PPTX - send to backend for extraction\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      fetch('http://127.0.0.1:5001/extract-file', {\r\n        method: 'POST',\r\n        body: formData\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.text) resolve(data.text);\r\n          else resolve(\"[Could not extract file text]\");\r\n        })\r\n        .catch(() => resolve(\"[Could not extract file text]\"));\r\n    } else {\r\n      resolve(`[${file.name} is not a supported file type.]`);\r\n    }\r\n  });\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  if (!isFormValid.value) return;\r\n\r\n  isLoading.value = true;\r\n  error.value = '';\r\n  generatedQuestions.value = [];\r\n  flashcardQuestions.value = [];\r\n\r\n  try {\r\n    // Read all file contents\r\n    const fileContents = await Promise.all(\r\n      selectedFiles.value.map(file => readFileContent(file))\r\n    );\r\n\r\n    // Combine all file contents\r\n    const combinedContent = fileContents.join('\\n\\n');\r\n    console.log('Extracted file content sent to Gemini:', combinedContent);\r\n\r\n    // Prepare the prompt for Gemini\r\n    const prompt = `You are a quiz generator. ONLY use the following content to create exactly ${questionCount.value} multiple-choice questions (with 4 options each and the correct answer indicated). \\nDo NOT use any outside knowledge. \\nFormat each question as:\\nQuestion: <question text>\\nA) <option 1>\\nB) <option 2>\\nC) <option 3>\\nD) <option 4>\\nAnswer: <correct option letter>\\nCONTENT TO USE:\\n${combinedContent}`;\r\n\r\n    console.log('Sending request to Gemini API...');\r\n    console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\r\n\r\n    // Call Gemini API\r\n    const response = await axios.post(\r\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\r\n      {\r\n        contents: [{\r\n          parts: [{\r\n            text: prompt\r\n          }]\r\n        }],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          topK: 40,\r\n          topP: 0.95,\r\n          maxOutputTokens: 1024,\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    );\r\n\r\n    console.log('API Response:', response.data);\r\n\r\n    // Parse Gemini's response into flashcard questions\r\n    const generatedText = response.data.candidates[0].content.parts[0].text;\r\n    const parsedQuestions = parseFlashcardQuestions(generatedText);\r\n    flashcardQuestions.value = parsedQuestions;\r\n    showQuestions.value = true;\r\n  } catch (err) {\r\n    console.error('Detailed Error:', err.response ? err.response.data : err);\r\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\r\n  } finally {\r\n    isLoading.value = false;\r\n  }\r\n};\r\n\r\nfunction parseFlashcardQuestions(text) {\r\n  // Split by 'Question:' and parse each block\r\n  const blocks = text.split(/\\n?Question:/).map(b => b.trim()).filter(Boolean);\r\n  const questions = blocks.map(block => {\r\n    const lines = block.split('\\n').map(l => l.trim());\r\n    const textLine = lines[0];\r\n    const options = ['A', 'B', 'C', 'D'].map(letter => {\r\n      const optLine = lines.find(l => l.startsWith(letter + ')'));\r\n      return { letter, text: optLine ? optLine.slice(3).trim() : '' };\r\n    });\r\n    const answerLine = lines.find(l => l.startsWith('Answer:'));\r\n    const answer = answerLine ? answerLine.replace('Answer:', '').trim() : '';\r\n    return {\r\n      text: textLine,\r\n      options,\r\n      answer\r\n    };\r\n  }).filter(q => q.text && q.options.every(o => o.text) && q.answer);\r\n  return questions;\r\n}\r\n\r\nfunction resetToMainScreen() {\r\n  showQuestions.value = false;\r\n  flashcardQuestions.value = [];\r\n  generatedQuestions.value = [];\r\n  selectedFiles.value = [];\r\n  questionCount.value = '';\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.app-container {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.upload-container {\r\n  background-color: white;\r\n  padding: 2rem;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  width: 90%;\r\n  max-width: 600px;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n  color: #333;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\nh2 {\r\n  color: #444;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-area {\r\n  border: 2px dashed #ccc;\r\n  border-radius: 4px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  cursor: pointer;\r\n  transition: border-color 0.3s;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-area:hover {\r\n  border-color: #666;\r\n}\r\n\r\n.file-input {\r\n  display: none;\r\n}\r\n\r\n.upload-prompt {\r\n  color: #666;\r\n}\r\n\r\n.selected-files {\r\n  margin-top: 1rem;\r\n}\r\n\r\n.selected-files ul {\r\n  list-style: none;\r\n  padding: 0;\r\n}\r\n\r\n.selected-files li {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  background-color: #f8f8f8;\r\n  margin-bottom: 0.5rem;\r\n  border-radius: 4px;\r\n}\r\n\r\n.remove-btn {\r\n  background: none;\r\n  border: none;\r\n  color: #ff4444;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  padding: 0 0.5rem;\r\n}\r\n\r\n.questions-section {\r\n  margin-top: 2rem;\r\n}\r\n\r\n.question-input input {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.submit-btn {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  margin-top: 2rem;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.submit-btn:disabled {\r\n  background-color: #cccccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.submit-btn:not(:disabled):hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.questions-list {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f8f8f8;\r\n  border-radius: 4px;\r\n}\r\n\r\n.question-item {\r\n  margin-bottom: 1rem;\r\n  padding: 0.5rem;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.error-message {\r\n  color: #ff4444;\r\n  margin-top: 1rem;\r\n  text-align: center;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAkB;;EAFjCC,GAAA;EAKiCD,KAAK,EAAC;;;EALvCC,GAAA;EAsB6CD,KAAK,EAAC;;mBAtBnD;;EAgCaA,KAAK,EAAC;AAAmB;;EAEvBA,KAAK,EAAC;AAAgB;mBAlCrC;;EAAAC,GAAA;EA4DwBD,KAAK,EAAC;;;uBA3D5BE,mBAAA,CA+DM,OA/DNC,UA+DM,GA9DJC,mBAAA,CA6DM,OA7DNC,UA6DM,G,0BA5DJD,mBAAA,CAAkC,YAA9B,2BAAyB,sB,CAEjBE,MAAA,CAAAC,aAAa,I,cAAzBL,mBAAA,CA+CM,OA/CNM,UA+CM,G,0BA9CJJ,mBAAA,CAAqB,YAAjB,cAAY,sBAChBA,mBAAA,CAaM;IAbDJ,KAAK,EAAC,aAAa;IAAES,UAAQ,EAAAC,MAAA,QAAAA,MAAA,MAP1CC,cAAA,CAOiC,QAAiB;IAAEC,MAAI,EAPxDD,cAAA,CAOkEL,MAAA,CAAAO,UAAU;MAClET,mBAAA,CAOE;IANAU,IAAI,EAAC,MAAM;IACXC,QAAQ,EAAR,EAAQ;IACRC,MAAM,EAAC,iCAAiC;IACvCC,QAAM,EAAEX,MAAA,CAAAY,gBAAgB;IACzBC,GAAG,EAAC,WAAW;IACfnB,KAAK,EAAC;4EAERI,mBAAA,CAGM;IAHDJ,KAAK,EAAC;EAAe,IACxBI,mBAAA,CAAkD,WAA/C,6CAA2C,GAC9CA,mBAAA,CAAwD,WAArD,mDAAiD,E,iDAI7CE,MAAA,CAAAc,aAAa,CAACC,MAAM,Q,cAA/BnB,mBAAA,CAQM,OARNoB,UAQM,G,0BAPJlB,mBAAA,CAAwB,YAApB,iBAAe,sBACnBA,mBAAA,CAKK,c,kBAJHF,mBAAA,CAGKqB,SAAA,QA5BjBC,WAAA,CAyBwClB,MAAA,CAAAc,aAAa,EAzBrD,CAyBwBK,IAAI,EAAEC,KAAK;yBAAvBxB,mBAAA,CAGK;MAHuCD,GAAG,EAAEyB;IAAK,IAzBlEC,gBAAA,CAAAC,gBAAA,CA0BiBH,IAAI,CAACI,IAAI,IAAG,GACf,iBAAAzB,mBAAA,CAAgE;MAAvD0B,OAAK,EAAAC,MAAA,IAAEzB,MAAA,CAAA0B,UAAU,CAACN,KAAK;MAAG1B,KAAK,EAAC;OAAa,GAAC,iBA3BrEiC,UAAA,E;wCAAAC,mBAAA,gBAgCQ9B,mBAAA,CAWM,OAXN+B,UAWM,G,0BAVJ/B,mBAAA,CAA4B,YAAxB,qBAAmB,sBACvBA,mBAAA,CAQM,OARNgC,UAQM,G,gBAPJhC,mBAAA,CAME;IALAU,IAAI,EAAC,QAAQ;IApC3B,uBAAAJ,MAAA,QAAAA,MAAA,MAAAqB,MAAA,IAqCuBzB,MAAA,CAAA+B,aAAa,GAAAN,MAAA;IACtBO,GAAG,EAAC,GAAG;IACPC,GAAG,EAAC,IAAI;IACRC,WAAW,EAAC;iDAHHlC,MAAA,CAAA+B,aAAa,E,OAQ5BjC,mBAAA,CAMS;IALPJ,KAAK,EAAC,YAAY;IACjByC,QAAQ,GAAGnC,MAAA,CAAAoC,WAAW,IAAIpC,MAAA,CAAAqC,SAAS;IACnCb,OAAK,EAAExB,MAAA,CAAAsC;sBAELtC,MAAA,CAAAqC,SAAS,+DAlDtBE,UAAA,E,oBAsDMC,YAAA,CAIExC,MAAA;IA1DRL,GAAA;IAwDS8C,SAAS,EAAEzC,MAAA,CAAA0C,kBAAkB;IAC7BC,QAAO,EAAE3C,MAAA,CAAA4C;2CAGD5C,MAAA,CAAA6C,KAAK,I,cAAhBjD,mBAAA,CAEM,OAFNkD,UAEM,EAAAxB,gBAAA,CADDtB,MAAA,CAAA6C,KAAK,oBA7DhBjB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}