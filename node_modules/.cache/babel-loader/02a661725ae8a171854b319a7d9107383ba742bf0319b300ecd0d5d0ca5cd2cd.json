{"ast":null,"code":"import { ref, computed } from 'vue';\nimport axios from 'axios';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\nexport default {\n  __name: 'App',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const selectedFiles = ref([]);\n    const questionCount = ref('');\n    const fileInput = ref(null);\n    const generatedQuestions = ref([]);\n    const isLoading = ref(false);\n    const error = ref('');\n    const showQuestions = ref(false);\n    const flashcardQuestions = ref([]);\n    const quiz = ref(null);\n    const userAnswers = ref([]);\n    const showAnswers = ref(false);\n    const unsupportedFiles = ref([]);\n    const extractionErrors = ref([]);\n    const selectedDifficulty = ref('medium');\n    const isFormValid = computed(() => {\n      return selectedFiles.value.length > 0 && questionCount.value > 0;\n    });\n    const hasFileErrors = computed(() => {\n      return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n    });\n    const triggerFileInput = () => {\n      fileInput.value.click();\n    };\n    const handleFileSelect = event => {\n      const files = Array.from(event.target.files);\n      addFiles(files);\n    };\n    const handleDrop = event => {\n      const files = Array.from(event.dataTransfer.files);\n      addFiles(files);\n    };\n    const addFiles = files => {\n      const validTypes = ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'text/plain', 'application/pdf', 'image/png', 'image/jpeg', 'image/jpg', 'image/tiff', 'image/bmp'];\n      const validFiles = [];\n      const invalidFiles = [];\n      files.forEach(file => {\n        if (validTypes.includes(file.type)) {\n          validFiles.push(file);\n        } else {\n          invalidFiles.push(file);\n        }\n      });\n      selectedFiles.value = [...selectedFiles.value, ...validFiles];\n      unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n    };\n    const removeFile = index => {\n      selectedFiles.value.splice(index, 1);\n    };\n    const readFileContent = async file => {\n      return new Promise(resolve => {\n        if (file.type === \"application/pdf\" || file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" || file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" || file.type.startsWith('image/')) {\n          // PDF, PPTX, DOCX, or Image - send to backend for extraction\n          const formData = new FormData();\n          formData.append('file', file);\n\n          // Use the correct backend URL\n          const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n          fetch(`${backendUrl}/extract-file`, {\n            method: 'POST',\n            body: formData\n          }).then(res => res.json()).then(data => {\n            if (data.text) {\n              resolve(data.text);\n            } else {\n              extractionErrors.value.push({\n                fileName: file.name,\n                message: data.error || 'Failed to extract text from file'\n              });\n              resolve(\"[Could not extract file text]\");\n            }\n          }).catch(() => {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: 'Server error while extracting text'\n            });\n            resolve(\"[Could not extract file text]\");\n          });\n        } else if (file.type === \"text/plain\") {\n          // Plain text\n          const reader = new FileReader();\n          reader.onload = e => resolve(e.target.result);\n          reader.onerror = () => {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: 'Error reading text file'\n            });\n            resolve(\"[Could not read file]\");\n          };\n          reader.readAsText(file);\n        } else {\n          resolve(`[${file.name} is not a supported file type.]`);\n        }\n      });\n    };\n    const handleSubmit = async () => {\n      if (!isFormValid.value) return;\n      isLoading.value = true;\n      error.value = '';\n      generatedQuestions.value = [];\n      flashcardQuestions.value = [];\n      try {\n        // Read all file contents\n        const fileContents = await Promise.all(selectedFiles.value.map(file => readFileContent(file)));\n\n        // Combine all file contents\n        const combinedContent = fileContents.join('\\n\\n');\n        console.log('Extracted file content:', combinedContent);\n\n        // Prepare the prompt for Gemini with difficulty level\n        const prompt = `Create a quiz with ${questionCount.value} ${selectedDifficulty.value} difficulty questions based on this text. Format each question exactly as follows:\n\nFor multiple choice questions:\n1. Start with \"Question: [question text]\"\n2. List options as:\n   A) [option text]\n   B) [option text]\n   C) [option text]\n   D) [option text]\n   (Mark correct answer with * after the option)\n3. Add \"Explanation: [explanation text]\"\n\nFor true/false questions:\n1. Start with \"True/False: [question text]\"\n2. List options as:\n   True*\n   False\n   (or vice versa, with * marking correct answer)\n3. Add \"Explanation: [explanation text]\"\n\nDifficulty Guidelines:\n- Easy: Focus on basic facts, definitions, and straightforward concepts\n- Medium: Include some analysis and application of concepts\n- Hard: Focus on complex analysis, synthesis, and evaluation of concepts\n\nText: ${combinedContent}`;\n        console.log('Sending request to Gemini API...');\n        console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\n\n        // Call Gemini API\n        const response = await axios.post(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`, {\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024\n          }\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('API Response:', response.data);\n\n        // Process the response for both quiz and flashcards\n        const quizText = response.data.candidates[0].content.parts[0].text;\n        console.log('Quiz text from API:', quizText);\n        const processedQuiz = processQuizResponse(quizText);\n        console.log('Processed quiz:', processedQuiz);\n\n        // Convert quiz questions to flashcard format\n        flashcardQuestions.value = processedQuiz.questions.map(q => ({\n          text: q.text,\n          options: q.type === 'multiple-choice' ? Object.entries(q.options).map(([letter, text]) => ({\n            letter,\n            text\n          })) : [{\n            letter: 'T',\n            text: 'True'\n          }, {\n            letter: 'F',\n            text: 'False'\n          }],\n          answer: q.type === 'multiple-choice' ? q.correctAnswer : q.correctAnswer === 'true' ? 'T' : 'F',\n          explanation: q.explanation\n        }));\n        console.log('Flashcard questions:', flashcardQuestions.value);\n        console.log('Number of flashcard questions:', flashcardQuestions.value.length);\n\n        // Show the flashcard quiz\n        showQuestions.value = true;\n        console.log('showQuestions set to:', showQuestions.value);\n        console.log('Current state:', {\n          showQuestions: showQuestions.value,\n          flashcardQuestionsLength: flashcardQuestions.value.length,\n          hasQuestions: flashcardQuestions.value.length > 0\n        });\n        console.log('Prompt sent to Gemini:', prompt);\n        console.log('API Response:', response.data);\n        console.log('Quiz text from API:', quizText);\n        console.log('Combined file content:', combinedContent);\n      } catch (err) {\n        console.error('Detailed Error:', err.response ? err.response.data : err);\n        error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n    const resetToMainScreen = () => {\n      showQuestions.value = false;\n      flashcardQuestions.value = [];\n      generatedQuestions.value = [];\n      selectedFiles.value = [];\n      unsupportedFiles.value = [];\n      extractionErrors.value = [];\n      questionCount.value = '';\n      error.value = '';\n      isLoading.value = false;\n      if (fileInput.value) {\n        fileInput.value.value = '';\n      }\n    };\n    const checkAnswers = () => {\n      showAnswers.value = true;\n    };\n    const allQuestionsAnswered = computed(() => {\n      return userAnswers.value.length === quiz.value.questions.length;\n    });\n    const processQuizResponse = response => {\n      console.log('Processing quiz response:', response);\n      const questions = [];\n      const lines = response.split('\\n');\n      let currentQuestion = null;\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (!line) continue;\n\n        // Accept more question formats, including leading numbers\n        if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n          if (currentQuestion) questions.push(currentQuestion);\n          currentQuestion = {\n            text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n            type: 'multiple-choice',\n            options: {},\n            correctAnswer: '',\n            explanation: ''\n          };\n        } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n          if (currentQuestion) questions.push(currentQuestion);\n          currentQuestion = {\n            text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n            type: 'true-false',\n            options: {\n              true: 'True',\n              false: 'False'\n            },\n            correctAnswer: '',\n            explanation: ''\n          };\n        } else if (currentQuestion) {\n          // Accept more option formats\n          const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n          if (optionMatch) {\n            const letter = optionMatch[1].toUpperCase();\n            let option = optionMatch[2];\n            if (option.includes('*')) {\n              currentQuestion.correctAnswer = letter;\n              option = option.replace('*', '').trim();\n            }\n            currentQuestion.options[letter] = option;\n          } else if (line === 'True*' || line === 'False*') {\n            currentQuestion.correctAnswer = line === 'True*' ? 'true' : 'false';\n          } else if (line.startsWith('Explanation:')) {\n            currentQuestion.explanation = line.replace('Explanation:', '').trim();\n          }\n        }\n      }\n      if (currentQuestion) questions.push(currentQuestion);\n      return {\n        questions\n      };\n    };\n    const __returned__ = {\n      selectedFiles,\n      questionCount,\n      fileInput,\n      generatedQuestions,\n      isLoading,\n      error,\n      showQuestions,\n      flashcardQuestions,\n      quiz,\n      userAnswers,\n      showAnswers,\n      unsupportedFiles,\n      extractionErrors,\n      selectedDifficulty,\n      isFormValid,\n      hasFileErrors,\n      triggerFileInput,\n      handleFileSelect,\n      handleDrop,\n      addFiles,\n      removeFile,\n      readFileContent,\n      handleSubmit,\n      resetToMainScreen,\n      checkAnswers,\n      allQuestionsAnswered,\n      processQuizResponse,\n      ref,\n      computed,\n      get axios() {\n        return axios;\n      },\n      FlashcardQuiz,\n      TrueFalseQuestion,\n      FileErrorDisplay\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","axios","FlashcardQuiz","TrueFalseQuestion","FileErrorDisplay","selectedFiles","questionCount","fileInput","generatedQuestions","isLoading","error","showQuestions","flashcardQuestions","quiz","userAnswers","showAnswers","unsupportedFiles","extractionErrors","selectedDifficulty","isFormValid","value","length","hasFileErrors","triggerFileInput","click","handleFileSelect","event","files","Array","from","target","addFiles","handleDrop","dataTransfer","validTypes","validFiles","invalidFiles","forEach","file","includes","type","push","removeFile","index","splice","readFileContent","Promise","resolve","startsWith","formData","FormData","append","backendUrl","process","env","VUE_APP_BACKEND_URL","fetch","method","body","then","res","json","data","text","fileName","name","message","catch","reader","FileReader","onload","e","result","onerror","readAsText","handleSubmit","fileContents","all","map","combinedContent","join","console","log","prompt","VUE_APP_GEMINI_API_KEY","response","post","contents","parts","generationConfig","temperature","topK","topP","maxOutputTokens","headers","quizText","candidates","content","processedQuiz","processQuizResponse","questions","q","options","Object","entries","letter","answer","correctAnswer","explanation","flashcardQuestionsLength","hasQuestions","err","resetToMainScreen","checkAnswers","allQuestionsAnswered","lines","split","currentQuestion","i","line","trim","test","replace","true","false","optionMatch","match","toUpperCase","option"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"upload-container\">\n      <h1>QUIZZy</h1>\n      \n      <div v-if=\"!showQuestions\" class=\"file-upload-section\">\n        <h2>Upload Files</h2>\n        <div class=\"upload-area\" \n          @dragover.prevent \n          @drop.prevent=\"handleDrop\"\n          @click=\"triggerFileInput\"\n          role=\"button\"\n          tabindex=\"0\"\n          @keydown.enter=\"triggerFileInput\"\n        >\n          <input \n            type=\"file\" \n            @change=\"handleFileSelect\" \n            accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\n            ref=\"fileInput\"\n            class=\"file-input\"\n          >\n          <div class=\"upload-prompt\">\n            <p>Drag and drop files here or click to select</p>\n            <p>Supported formats: PDF, DOCX, PPTX, TXT</p>\n          </div>\n        </div>\n        \n        <FileErrorDisplay\n          :extraction-errors=\"extractionErrors\"\n          :unsupported-files=\"unsupportedFiles\"\n        />\n\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n          <h3>Selected Files:</h3>\n          <ul>\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n              <span class=\"file-name\">{{ file.name }}</span>\n              <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">×</button>\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"questions-section\">\n          <h2>Number of Questions</h2>\n          <div class=\"question-input\">\n            <input\n              type=\"number\"\n              v-model=\"questionCount\"\n              min=\"1\"\n              max=\"20\"\n              placeholder=\"Enter number of questions\"\n            />\n          </div>\n        </div>\n\n        <div class=\"difficulty-section\">\n          <h2>Question Difficulty</h2>\n          <div class=\"difficulty-selector\">\n            <select v-model=\"selectedDifficulty\" class=\"difficulty-dropdown\">\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </div>\n        </div>\n\n        <button \n          class=\"submit-btn\" \n          :disabled=\"!isFormValid || isLoading\"\n          @click=\"handleSubmit\"\n        >\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n        </button>\n      </div>\n\n      <div v-else-if=\"!hasFileErrors && flashcardQuestions.length > 0\">\n        <FlashcardQuiz\n          :questions=\"flashcardQuestions\"\n          @go-back=\"resetToMainScreen\"\n        />\n      </div>\n\n      <div v-else-if=\"hasFileErrors\">\n        <FileErrorDisplay\n          :extraction-errors=\"extractionErrors\"\n          :unsupported-files=\"unsupportedFiles\"\n        />\n      </div>\n\n      <div v-if=\"error\" class=\"error-message\">\n        {{ error }}\n      </div>\n    </div>\n\n    <template v-if=\"quiz\">\n      <div class=\"quiz-container\">\n        <h2>Generated Quiz</h2>\n        <template v-for=\"(question, index) in quiz.questions\" :key=\"index\">\n          <div class=\"question\">\n            <h3>Question {{ index + 1 }}: {{ question.text }}</h3>\n            <div class=\"options\">\n              <template v-if=\"question.type === 'multiple-choice'\">\n                <div v-for=\"(option, letter) in question.options\" :key=\"letter\" class=\"option\">\n                  <input\n                    type=\"radio\"\n                    :id=\"`q${index}-${letter}`\"\n                    :name=\"`question${index}`\"\n                    :value=\"letter\"\n                    v-model=\"userAnswers[index]\"\n                  />\n                  <label :for=\"`q${index}-${letter}`\">{{ letter }}) {{ option }}</label>\n                </div>\n              </template>\n              <template v-else-if=\"question.type === 'true-false'\">\n                <TrueFalseQuestion\n                  :index=\"index\"\n                  :correct-answer=\"question.correctAnswer\"\n                  :explanation=\"question.explanation\"\n                  :show-feedback=\"showAnswers && userAnswers[index]\"\n                  @update:answer=\"userAnswers[index] = $event\"\n                />\n              </template>\n            </div>\n            <div v-if=\"showAnswers && userAnswers[index]\" class=\"feedback\">\n              <p :class=\"{ 'correct': userAnswers[index] === question.correctAnswer, 'incorrect': userAnswers[index] !== question.correctAnswer }\">\n                {{ userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!' }}\n              </p>\n              <p class=\"explanation\">{{ question.explanation }}</p>\n            </div>\n          </div>\n        </template>\n        <button @click=\"checkAnswers\" :disabled=\"!allQuestionsAnswered\">Check Answers</button>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\nimport FlashcardQuiz from './components/FlashcardQuiz.vue';\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\n\nconst selectedFiles = ref([]);\nconst questionCount = ref('');\nconst fileInput = ref(null);\nconst generatedQuestions = ref([]);\nconst isLoading = ref(false);\nconst error = ref('');\nconst showQuestions = ref(false);\nconst flashcardQuestions = ref([]);\nconst quiz = ref(null);\nconst userAnswers = ref([]);\nconst showAnswers = ref(false);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\nconst selectedDifficulty = ref('medium');\n\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\nconst readFileContent = async (file) => {\n  return new Promise((resolve) => {\n    if (\n      file.type === \"application/pdf\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n      file.type.startsWith('image/')\n    ) {\n      // PDF, PPTX, DOCX, or Image - send to backend for extraction\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Use the correct backend URL\n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n            resolve(\"[Could not extract file text]\");\n          }\n        })\n        .catch(() => {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: 'Server error while extracting text'\n          });\n          resolve(\"[Could not extract file text]\");\n        });\n    } else if (file.type === \"text/plain\") {\n      // Plain text\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = () => {\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: 'Error reading text file'\n        });\n        resolve(\"[Could not read file]\");\n      };\n      reader.readAsText(file);\n    } else {\n      resolve(`[${file.name} is not a supported file type.]`);\n    }\n  });\n};\n\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  generatedQuestions.value = [];\n  flashcardQuestions.value = [];\n\n  try {\n    // Read all file contents\n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    // Combine all file contents\n    const combinedContent = fileContents.join('\\n\\n');\n    console.log('Extracted file content:', combinedContent);\n\n    // Prepare the prompt for Gemini with difficulty level\n    const prompt = `Create a quiz with ${questionCount.value} ${selectedDifficulty.value} difficulty questions based on this text. Format each question exactly as follows:\n\nFor multiple choice questions:\n1. Start with \"Question: [question text]\"\n2. List options as:\n   A) [option text]\n   B) [option text]\n   C) [option text]\n   D) [option text]\n   (Mark correct answer with * after the option)\n3. Add \"Explanation: [explanation text]\"\n\nFor true/false questions:\n1. Start with \"True/False: [question text]\"\n2. List options as:\n   True*\n   False\n   (or vice versa, with * marking correct answer)\n3. Add \"Explanation: [explanation text]\"\n\nDifficulty Guidelines:\n- Easy: Focus on basic facts, definitions, and straightforward concepts\n- Medium: Include some analysis and application of concepts\n- Hard: Focus on complex analysis, synthesis, and evaluation of concepts\n\nText: ${combinedContent}`;\n\n    console.log('Sending request to Gemini API...');\n    console.log('API Key:', process.env.VUE_APP_GEMINI_API_KEY ? 'Present' : 'Missing');\n\n    // Call Gemini API\n    const response = await axios.post(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n      {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 1024,\n        }\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    console.log('API Response:', response.data);\n\n    // Process the response for both quiz and flashcards\n    const quizText = response.data.candidates[0].content.parts[0].text;\n    console.log('Quiz text from API:', quizText);\n    \n    const processedQuiz = processQuizResponse(quizText);\n    console.log('Processed quiz:', processedQuiz);\n    \n    // Convert quiz questions to flashcard format\n    flashcardQuestions.value = processedQuiz.questions.map(q => ({\n      text: q.text,\n      options: q.type === 'multiple-choice' \n        ? Object.entries(q.options).map(([letter, text]) => ({ letter, text }))\n        : [\n            { letter: 'T', text: 'True' },\n            { letter: 'F', text: 'False' }\n          ],\n      answer: q.type === 'multiple-choice' ? q.correctAnswer : (q.correctAnswer === 'true' ? 'T' : 'F'),\n      explanation: q.explanation\n    }));\n\n    console.log('Flashcard questions:', flashcardQuestions.value);\n    console.log('Number of flashcard questions:', flashcardQuestions.value.length);\n\n    // Show the flashcard quiz\n    showQuestions.value = true;\n    console.log('showQuestions set to:', showQuestions.value);\n    console.log('Current state:', {\n      showQuestions: showQuestions.value,\n      flashcardQuestionsLength: flashcardQuestions.value.length,\n      hasQuestions: flashcardQuestions.value.length > 0\n    });\n\n    console.log('Prompt sent to Gemini:', prompt);\n    console.log('API Response:', response.data);\n    console.log('Quiz text from API:', quizText);\n    console.log('Combined file content:', combinedContent);\n  } catch (err) {\n    console.error('Detailed Error:', err.response ? err.response.data : err);\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst resetToMainScreen = () => {\n  showQuestions.value = false;\n  flashcardQuestions.value = [];\n  generatedQuestions.value = [];\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\nconst checkAnswers = () => {\n  showAnswers.value = true;\n};\n\nconst allQuestionsAnswered = computed(() => {\n  return userAnswers.value.length === quiz.value.questions.length;\n});\n\nconst processQuizResponse = (response) => {\n  console.log('Processing quiz response:', response);\n  const questions = [];\n  const lines = response.split('\\n');\n  let currentQuestion = null;\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n\n    // Accept more question formats, including leading numbers\n    if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n        type: 'multiple-choice',\n        options: {},\n        correctAnswer: '',\n        explanation: ''\n      };\n    } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n        type: 'true-false',\n        options: { true: 'True', false: 'False' },\n        correctAnswer: '',\n        explanation: ''\n      };\n    } else if (currentQuestion) {\n      // Accept more option formats\n      const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n      if (optionMatch) {\n        const letter = optionMatch[1].toUpperCase();\n        let option = optionMatch[2];\n        if (option.includes('*')) {\n          currentQuestion.correctAnswer = letter;\n          option = option.replace('*', '').trim();\n        }\n        currentQuestion.options[letter] = option;\n      } else if (line === 'True*' || line === 'False*') {\n        currentQuestion.correctAnswer = line === 'True*' ? 'true' : 'false';\n      } else if (line.startsWith('Explanation:')) {\n        currentQuestion.explanation = line.replace('Explanation:', '').trim();\n      }\n    }\n  }\n  if (currentQuestion) questions.push(currentQuestion);\n  return { questions };\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.upload-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 90%;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.option {\n  margin-bottom: 0.5rem;\n}\n\n.feedback {\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.correct {\n  color: #4CAF50;\n}\n\n.incorrect {\n  color: #ff4444;\n}\n\n.explanation {\n  margin-top: 0.5rem;\n  margin-left: 1rem;\n}\n\nbutton {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\nbutton:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.file-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.file-name {\n  flex: 1;\n  margin-right: 0.5rem;\n  word-break: break-word;\n}\n\n.remove-btn {\n  flex-shrink: 0;\n  width: 24px;\n  height: 24px;\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: background-color 0.2s;\n}\n\n.remove-btn:hover {\n  background-color: #ffeeee;\n}\n\n.unsupported-files {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #fff3f3;\n  border-radius: 4px;\n  border: 1px solid #ffdddd;\n}\n\n.unsupported-files h3 {\n  color: #d32f2f;\n  margin-bottom: 0.5rem;\n}\n\n.unsupported-label {\n  color: #d32f2f;\n  font-size: 0.9em;\n  margin-left: 0.5rem;\n}\n\n.unsupported-files .file-item {\n  background-color: #fff;\n  border: 1px solid #ffdddd;\n}\n\n.difficulty-section {\n  margin-top: 2rem;\n}\n\n.difficulty-selector {\n  margin-bottom: 1rem;\n}\n\n.difficulty-dropdown {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n  cursor: pointer;\n}\n\n.difficulty-dropdown:focus {\n  outline: none;\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}