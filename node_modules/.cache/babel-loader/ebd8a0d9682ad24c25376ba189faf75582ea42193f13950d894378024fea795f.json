{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\r\n * Text Analysis Algorithms Module\r\n */\n\n/**\r\n * Analyzes text complexity based on academic terms and patterns\r\n * @param {string} content - The content to analyze\r\n * @returns {number} Complexity score (0-100)\r\n */\nexport function analyzeTextComplexity(content) {\n  var complexityIndicators = ['analyze', 'compare', 'contrast', 'evaluate', 'explain', 'describe', 'discuss', 'examine', 'interpret', 'justify', 'therefore', 'however', 'although', 'furthermore', 'consequently'];\n  var complexityScore = 0;\n  var normalizedContent = content.toLowerCase();\n  complexityIndicators.forEach(function (indicator) {\n    var regex = new RegExp(indicator, 'g');\n    var matches = normalizedContent.match(regex);\n    if (matches) {\n      complexityScore += matches.length;\n    }\n  });\n  return Math.min(complexityScore * 5, 100);\n}\n\n/**\r\n * Analyzes keyword frequency in content\r\n * @param {string} content - The content to analyze\r\n * @param {string[]} keywords - Keywords to look for\r\n * @returns {Object} Frequency analysis results\r\n */\nexport function analyzeKeywordFrequency(content, keywords) {\n  var frequencies = {};\n  var normalizedContent = content.toLowerCase();\n  keywords.forEach(function (keyword) {\n    var regex = new RegExp(keyword, 'g');\n    var matches = normalizedContent.match(regex);\n    frequencies[keyword] = matches ? matches.length : 0;\n  });\n  return frequencies;\n}\n\n/**\r\n * Normalizes text for consistent comparison\r\n * @param {string} text - Text to normalize\r\n * @returns {string} Normalized text\r\n */\nexport function normalizeText(text) {\n  return text.toLowerCase().replace(/[.,?!]/g, '').replace(/\\s+/g, ' ').trim();\n}\n\n/**\r\n * Finds pattern matches in content\r\n * @param {string} content - Content to search in\r\n * @param {string} pattern - Pattern to match\r\n * @returns {Array} Array of matches\r\n */\nexport function findPatternMatches(content, pattern) {\n  var regex = new RegExp(pattern, 'gi');\n  return content.match(regex) || [];\n}","map":{"version":3,"names":["analyzeTextComplexity","content","complexityIndicators","complexityScore","normalizedContent","toLowerCase","forEach","indicator","regex","RegExp","matches","match","length","Math","min","analyzeKeywordFrequency","keywords","frequencies","keyword","normalizeText","text","replace","trim","findPatternMatches","pattern"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/text-analysis/index.js"],"sourcesContent":["/**\r\n * Text Analysis Algorithms Module\r\n */\r\n\r\n/**\r\n * Analyzes text complexity based on academic terms and patterns\r\n * @param {string} content - The content to analyze\r\n * @returns {number} Complexity score (0-100)\r\n */\r\nexport function analyzeTextComplexity(content) {\r\n  const complexityIndicators = [\r\n    'analyze', 'compare', 'contrast', 'evaluate', 'explain',\r\n    'describe', 'discuss', 'examine', 'interpret', 'justify',\r\n    'therefore', 'however', 'although', 'furthermore', 'consequently'\r\n  ];\r\n  \r\n  let complexityScore = 0;\r\n  const normalizedContent = content.toLowerCase();\r\n  \r\n  complexityIndicators.forEach(indicator => {\r\n    const regex = new RegExp(indicator, 'g');\r\n    const matches = normalizedContent.match(regex);\r\n    if (matches) {\r\n      complexityScore += matches.length;\r\n    }\r\n  });\r\n  \r\n  return Math.min(complexityScore * 5, 100);\r\n}\r\n\r\n/**\r\n * Analyzes keyword frequency in content\r\n * @param {string} content - The content to analyze\r\n * @param {string[]} keywords - Keywords to look for\r\n * @returns {Object} Frequency analysis results\r\n */\r\nexport function analyzeKeywordFrequency(content, keywords) {\r\n  const frequencies = {};\r\n  const normalizedContent = content.toLowerCase();\r\n  \r\n  keywords.forEach(keyword => {\r\n    const regex = new RegExp(keyword, 'g');\r\n    const matches = normalizedContent.match(regex);\r\n    frequencies[keyword] = matches ? matches.length : 0;\r\n  });\r\n  \r\n  return frequencies;\r\n}\r\n\r\n/**\r\n * Normalizes text for consistent comparison\r\n * @param {string} text - Text to normalize\r\n * @returns {string} Normalized text\r\n */\r\nexport function normalizeText(text) {\r\n  return text\r\n    .toLowerCase()\r\n    .replace(/[.,?!]/g, '')\r\n    .replace(/\\s+/g, ' ')\r\n    .trim();\r\n}\r\n\r\n/**\r\n * Finds pattern matches in content\r\n * @param {string} content - Content to search in\r\n * @param {string} pattern - Pattern to match\r\n * @returns {Array} Array of matches\r\n */\r\nexport function findPatternMatches(content, pattern) {\r\n  const regex = new RegExp(pattern, 'gi');\r\n  return content.match(regex) || [];\r\n} "],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,qBAAqBA,CAACC,OAAO,EAAE;EAC7C,IAAMC,oBAAoB,GAAG,CAC3B,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EACvD,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EACxD,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,cAAc,CAClE;EAED,IAAIC,eAAe,GAAG,CAAC;EACvB,IAAMC,iBAAiB,GAAGH,OAAO,CAACI,WAAW,CAAC,CAAC;EAE/CH,oBAAoB,CAACI,OAAO,CAAC,UAAAC,SAAS,EAAI;IACxC,IAAMC,KAAK,GAAG,IAAIC,MAAM,CAACF,SAAS,EAAE,GAAG,CAAC;IACxC,IAAMG,OAAO,GAAGN,iBAAiB,CAACO,KAAK,CAACH,KAAK,CAAC;IAC9C,IAAIE,OAAO,EAAE;MACXP,eAAe,IAAIO,OAAO,CAACE,MAAM;IACnC;EACF,CAAC,CAAC;EAEF,OAAOC,IAAI,CAACC,GAAG,CAACX,eAAe,GAAG,CAAC,EAAE,GAAG,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,uBAAuBA,CAACd,OAAO,EAAEe,QAAQ,EAAE;EACzD,IAAMC,WAAW,GAAG,CAAC,CAAC;EACtB,IAAMb,iBAAiB,GAAGH,OAAO,CAACI,WAAW,CAAC,CAAC;EAE/CW,QAAQ,CAACV,OAAO,CAAC,UAAAY,OAAO,EAAI;IAC1B,IAAMV,KAAK,GAAG,IAAIC,MAAM,CAACS,OAAO,EAAE,GAAG,CAAC;IACtC,IAAMR,OAAO,GAAGN,iBAAiB,CAACO,KAAK,CAACH,KAAK,CAAC;IAC9CS,WAAW,CAACC,OAAO,CAAC,GAAGR,OAAO,GAAGA,OAAO,CAACE,MAAM,GAAG,CAAC;EACrD,CAAC,CAAC;EAEF,OAAOK,WAAW;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,aAAaA,CAACC,IAAI,EAAE;EAClC,OAAOA,IAAI,CACRf,WAAW,CAAC,CAAC,CACbgB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CACtBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBC,IAAI,CAAC,CAAC;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACtB,OAAO,EAAEuB,OAAO,EAAE;EACnD,IAAMhB,KAAK,GAAG,IAAIC,MAAM,CAACe,OAAO,EAAE,IAAI,CAAC;EACvC,OAAOvB,OAAO,CAACU,KAAK,CAACH,KAAK,CAAC,IAAI,EAAE;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}