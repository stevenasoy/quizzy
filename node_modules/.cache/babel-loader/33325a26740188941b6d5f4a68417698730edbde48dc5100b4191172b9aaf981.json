{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport { computed } from 'vue';\nimport { formatAnswer } from '../algorithms/answer-formatting';\nexport default {\n  __name: 'QuizResults',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    },\n    userAnswers: {\n      type: Array,\n      required: true\n    },\n    score: {\n      type: Number,\n      required: true\n    },\n    predictedScore: {\n      type: Number,\n      required: false,\n      \"default\": null\n    }\n  },\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var props = __props;\n    var totalQuestions = computed(function () {\n      return props.questions.length;\n    });\n    var scorePercentage = computed(function () {\n      return Math.round(props.score / totalQuestions.value * 100);\n    });\n    var scoreClass = computed(function () {\n      return scorePercentage.value >= 75 ? 'passing' : 'failing';\n    });\n    function rephraseContent(text, isSupporting, question) {\n      // Clean and normalize the text\n      var cleaned = text.trim().replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '').replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '').replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '').replace(/\\d{4}\\s*\\d{4}/g, '').replace(/\\([^)]*\\)/g, '').replace(/\\[[^\\]]*\\]/g, '').trim();\n\n      // For correct answers, use varied positive reinforcement\n      if (isSupporting) {\n        var correctPhrases = [\"That's right! \", \"Excellent work! \", \"Perfect answer! \", \"You got it! \", \"Spot on! \"];\n        var randomPhrase = correctPhrases[Math.floor(Math.random() * correctPhrases.length)];\n        return \"\".concat(randomPhrase).concat(cleaned);\n      }\n\n      // For incorrect answers, provide gentle correction and explanation\n      var correctAnswer = question.type === 'multiple-choice' ? question.options[question.correctAnswer] : question.correctAnswer;\n      var transitionPhrases = [\"Let's look at why \", \"Here's the reasoning: \", \"To understand this better, \", \"Let me explain why: \", \"Think about it this way - \"];\n      var randomTransition = transitionPhrases[Math.floor(Math.random() * transitionPhrases.length)];\n      return \"\".concat(randomTransition).concat(cleaned, \". The correct answer is \\\"\").concat(correctAnswer, \"\\\".\");\n    }\n    function generateExplanation(question, isCorrect) {\n      var explanation = question.explanation || '';\n      if (!explanation) return \"No explanation available.\";\n      if (question.type === 'multiple-choice') {\n        return generateMultipleChoiceExplanation(question, isCorrect);\n      } else {\n        return generateTrueFalseExplanation(question, isCorrect);\n      }\n    }\n    function generateMultipleChoiceExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      var userOption = question.options[question.userAnswer];\n      var correctOption = question.options[question.correctAnswer];\n\n      // Create more natural explanations for incorrect answers\n      var introductions = [\"I see why you chose \\\"\".concat(userOption, \"\\\", but let's think about this differently. \"), \"\\\"\".concat(userOption, \"\\\" seems logical at first, but there's more to consider. \"), \"While \\\"\".concat(userOption, \"\\\" is related, it's not quite the complete answer. \"), \"That's an interesting choice, but let's explore why \\\"\".concat(correctOption, \"\\\" is more accurate. \"), \"I understand your reasoning with \\\"\".concat(userOption, \"\\\", however, \")];\n      var randomIntro = introductions[Math.floor(Math.random() * introductions.length)];\n      return \"\".concat(randomIntro).concat(rephraseContent(question.explanation, false, question));\n    }\n    function generateTrueFalseExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      var userChoice = question.userAnswer ? 'true' : 'false';\n      var correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\n\n      // Create more conversational explanations for true/false questions\n      var clarifications = [\"I can see why you thought this was \".concat(userChoice, \", but let's clarify something. \"), \"This is a tricky one! While it might seem \".concat(userChoice, \", here's what we need to consider. \"), \"That's a common misconception. Let me explain why this is actually \".concat(correctChoice, \". \"), \"Good thinking, but there's a subtle detail that makes this \".concat(correctChoice, \". \"), \"This statement requires careful consideration. \"];\n      var randomClarification = clarifications[Math.floor(Math.random() * clarifications.length)];\n      return \"\".concat(randomClarification).concat(rephraseContent(question.explanation, false, question));\n    }\n    var __returned__ = {\n      props: props,\n      totalQuestions: totalQuestions,\n      scorePercentage: scorePercentage,\n      scoreClass: scoreClass,\n      rephraseContent: rephraseContent,\n      generateExplanation: generateExplanation,\n      generateMultipleChoiceExplanation: generateMultipleChoiceExplanation,\n      generateTrueFalseExplanation: generateTrueFalseExplanation,\n      computed: computed,\n      get formatAnswer() {\n        return formatAnswer;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","formatAnswer","props","__props","totalQuestions","questions","length","scorePercentage","Math","round","score","value","scoreClass","rephraseContent","text","isSupporting","question","cleaned","trim","replace","correctPhrases","randomPhrase","floor","random","concat","correctAnswer","type","options","transitionPhrases","randomTransition","generateExplanation","isCorrect","explanation","generateMultipleChoiceExplanation","generateTrueFalseExplanation","userOption","userAnswer","correctOption","introductions","randomIntro","userChoice","correctChoice","clarifications","randomClarification"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <div class=\"score-display\" :class=\"scoreClass\">\r\n      <div class=\"score-container\">\r\n        <div class=\"score-main\">\r\n          <span class=\"score-value\">{{ score }}</span>\r\n          <span class=\"score-separator\">/</span>\r\n          <span class=\"score-total\">{{ totalQuestions }}</span>\r\n        </div>\r\n        <div class=\"score-percentage\">({{ scorePercentage }}%)</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"score-comparison\" v-if=\"predictedScore\">\r\n      <p>You scored {{ scorePercentage }}%. Predicted score was {{ predictedScore }}%.</p>\r\n      <p v-if=\"scorePercentage > predictedScore + 5\" class=\"comparison-text success\">\r\n        Excellent! You surpassed the prediction!\r\n      </p>\r\n      <p v-else-if=\"Math.abs(scorePercentage - predictedScore) <= 5\" class=\"comparison-text neutral\">\r\n        You were close to the prediction!\r\n      </p>\r\n      <p v-else class=\"comparison-text warning\">\r\n        You scored below the prediction. Review the material for improvement.\r\n      </p>\r\n    </div>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Question {{ index + 1 }}</span>\r\n          <span :class=\"['result-status', question.isCorrect ? 'correct' : 'wrong']\">\r\n            {{ question.isCorrect ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\" :class=\"{ 'incorrect': !question.isCorrect }\">\r\n          <div class=\"answer-row\">\r\n            <div class=\"user-answer\">\r\n              <strong>Your answer:</strong> \r\n              <span :class=\"{ 'incorrect-text': !question.isCorrect }\">\r\n                {{ formatAnswer(question, question.userAnswer) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"correct-answer\">\r\n              <strong>Correct answer:</strong>\r\n              <span class=\"correct-text\">{{ formatAnswer(question, question.correctAnswer) }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"explanation-box\" :class=\"{ 'correct': question.isCorrect, 'incorrect': !question.isCorrect }\">\r\n            <p class=\"explanation-label\">Explanation:</p>\r\n            <p class=\"explanation-text\">{{ generateExplanation(question, question.isCorrect) }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"return-hint\">\r\n      <p>You can retake this quiz anytime from the history panel</p>\r\n      <p>Click \"Create New Quiz\" to start a new quiz with different material</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\nimport { formatAnswer } from '../algorithms/answer-formatting';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  predictedScore: {\r\n    type: Number,\r\n    required: false,\r\n    default: null\r\n  }\r\n});\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\nconst scorePercentage = computed(() => {\r\n  return Math.round((props.score / totalQuestions.value) * 100);\r\n});\r\nconst scoreClass = computed(() => {\r\n  return scorePercentage.value >= 75 ? 'passing' : 'failing';\r\n});\r\n\r\nfunction rephraseContent(text, isSupporting, question) {\r\n  // Clean and normalize the text\r\n  const cleaned = text.trim()\r\n    .replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '')\r\n    .replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '')\r\n    .replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '')\r\n    .replace(/\\d{4}\\s*\\d{4}/g, '')\r\n    .replace(/\\([^)]*\\)/g, '')\r\n    .replace(/\\[[^\\]]*\\]/g, '')\r\n    .trim();\r\n\r\n  // For correct answers, use varied positive reinforcement\r\n  if (isSupporting) {\r\n    const correctPhrases = [\r\n      `That's right! `,\r\n      `Excellent work! `,\r\n      `Perfect answer! `,\r\n      `You got it! `,\r\n      `Spot on! `\r\n    ];\r\n    const randomPhrase = correctPhrases[Math.floor(Math.random() * correctPhrases.length)];\r\n    return `${randomPhrase}${cleaned}`;\r\n  }\r\n\r\n  // For incorrect answers, provide gentle correction and explanation\r\n  const correctAnswer = question.type === 'multiple-choice'\r\n    ? question.options[question.correctAnswer]\r\n    : question.correctAnswer;\r\n\r\n  const transitionPhrases = [\r\n    `Let's look at why `,\r\n    `Here's the reasoning: `,\r\n    `To understand this better, `,\r\n    `Let me explain why: `,\r\n    `Think about it this way - `\r\n  ];\r\n  const randomTransition = transitionPhrases[Math.floor(Math.random() * transitionPhrases.length)];\r\n  \r\n  return `${randomTransition}${cleaned}. The correct answer is \"${correctAnswer}\".`;\r\n}\r\n\r\nfunction generateExplanation(question, isCorrect) {\r\n  const explanation = question.explanation || '';\r\n  if (!explanation) return \"No explanation available.\";\r\n\r\n  if (question.type === 'multiple-choice') {\r\n    return generateMultipleChoiceExplanation(question, isCorrect);\r\n  } else {\r\n    return generateTrueFalseExplanation(question, isCorrect);\r\n  }\r\n}\r\n\r\nfunction generateMultipleChoiceExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userOption = question.options[question.userAnswer];\r\n  const correctOption = question.options[question.correctAnswer];\r\n  \r\n  // Create more natural explanations for incorrect answers\r\n  const introductions = [\r\n    `I see why you chose \"${userOption}\", but let's think about this differently. `,\r\n    `\"${userOption}\" seems logical at first, but there's more to consider. `,\r\n    `While \"${userOption}\" is related, it's not quite the complete answer. `,\r\n    `That's an interesting choice, but let's explore why \"${correctOption}\" is more accurate. `,\r\n    `I understand your reasoning with \"${userOption}\", however, `\r\n  ];\r\n  \r\n  const randomIntro = introductions[Math.floor(Math.random() * introductions.length)];\r\n  return `${randomIntro}${rephraseContent(question.explanation, false, question)}`;\r\n}\r\n\r\nfunction generateTrueFalseExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userChoice = question.userAnswer ? 'true' : 'false';\r\n  const correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\r\n  \r\n  // Create more conversational explanations for true/false questions\r\n  const clarifications = [\r\n    `I can see why you thought this was ${userChoice}, but let's clarify something. `,\r\n    `This is a tricky one! While it might seem ${userChoice}, here's what we need to consider. `,\r\n    `That's a common misconception. Let me explain why this is actually ${correctChoice}. `,\r\n    `Good thinking, but there's a subtle detail that makes this ${correctChoice}. `,\r\n    `This statement requires careful consideration. `\r\n  ];\r\n  \r\n  const randomClarification = clarifications[Math.floor(Math.random() * clarifications.length)];\r\n  return `${randomClarification}${rephraseContent(question.explanation, false, question)}`;\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 800px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.score-display.passing {\r\n  background-color: #e8f5e9;\r\n  border: 3px solid #4CAF50;\r\n}\r\n\r\n.score-display.failing {\r\n  background-color: #ffebee;\r\n  border: 3px solid #f44336;\r\n}\r\n\r\n.score-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-main {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-value {\r\n  font-size: 4rem;\r\n  line-height: 1;\r\n  font-weight: 800;\r\n}\r\n\r\n.score-separator {\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n}\r\n\r\n.score-total {\r\n  font-size: 2.5rem;\r\n  opacity: 0.7;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.8rem;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.score-comparison {\r\n  margin: 1.5rem 0;\r\n  padding: 1.5rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n}\r\n\r\n.comparison-text {\r\n  margin-top: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-text.success {\r\n  color: #4CAF50;\r\n}\r\n\r\n.comparison-text.neutral {\r\n  color: #666;\r\n}\r\n\r\n.comparison-text.warning {\r\n  color: #f44336;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n}\r\n\r\n.result-item {\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.question-number {\r\n  font-weight: 600;\r\n  color: #666;\r\n}\r\n\r\n.result-status {\r\n  padding: 0.4rem 1rem;\r\n  border-radius: 20px;\r\n  font-weight: 600;\r\n}\r\n\r\n.result-status.correct {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.result-status.wrong {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.question-text {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  margin-bottom: 1rem;\r\n  line-height: 1.4;\r\n}\r\n\r\n.answer-details {\r\n  background-color: #fff;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.answer-details.incorrect {\r\n  border-color: #ffcdd2;\r\n  background-color: #fff5f5;\r\n}\r\n\r\n.answer-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-answer, .correct-answer {\r\n  padding: 1rem;\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.user-answer strong, .correct-answer strong {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.incorrect-text {\r\n  color: #d32f2f;\r\n}\r\n\r\n.correct-text {\r\n  color: #2e7d32;\r\n}\r\n\r\n.explanation-box {\r\n  margin-top: 1.5rem;\r\n  padding: 1.5rem;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.explanation-box.correct {\r\n  border-left: 4px solid #4CAF50;\r\n}\r\n\r\n.explanation-box.incorrect {\r\n  border-left: 4px solid #ff9800;\r\n}\r\n\r\n.explanation-label {\r\n  font-weight: 600;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.explanation-label.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.explanation-label.incorrect {\r\n  color: #f57c00;\r\n}\r\n\r\n.explanation-text {\r\n  color: #333;\r\n  line-height: 1.6;\r\n  margin: 0;\r\n}\r\n\r\n.return-hint {\r\n  margin-top: 2rem;\r\n  text-align: center;\r\n  color: #666;\r\n  background: #f5f5f5;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n}\r\n\r\n.return-hint p {\r\n  margin: 0.5rem 0;\r\n  font-size: 0.95rem;\r\n}\r\n\r\n.return-hint p:first-child {\r\n  color: #4CAF50;\r\n  font-weight: 500;\r\n}\r\n\r\n.return-hint p:last-child {\r\n  color: #2196F3;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Remove button styles */\r\n.button-group, .restart-btn, .back-btn {\r\n  display: none;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}