{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"quiz-results\"\n};\nconst _hoisted_2 = {\n  class: \"score-container\"\n};\nconst _hoisted_3 = {\n  class: \"score-main\"\n};\nconst _hoisted_4 = {\n  class: \"score-value\"\n};\nconst _hoisted_5 = {\n  class: \"score-total\"\n};\nconst _hoisted_6 = {\n  class: \"score-percentage\"\n};\nconst _hoisted_7 = {\n  class: \"detailed-results\"\n};\nconst _hoisted_8 = {\n  class: \"question-header\"\n};\nconst _hoisted_9 = {\n  class: \"question-number\"\n};\nconst _hoisted_10 = {\n  class: \"question-text\"\n};\nconst _hoisted_11 = {\n  class: \"answer-details\"\n};\nconst _hoisted_12 = {\n  class: \"explanation\"\n};\nconst _hoisted_13 = {\n  class: \"explanation-text\"\n};\nconst _hoisted_14 = {\n  class: \"button-group\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[4] || (_cache[4] = _createElementVNode(\"h2\", null, \"Quiz Complete!\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"score-display\", $setup.scoreClass])\n  }, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString($props.score), 1 /* TEXT */), _cache[1] || (_cache[1] = _createElementVNode(\"span\", {\n    class: \"score-separator\"\n  }, \"/\", -1 /* HOISTED */)), _createElementVNode(\"span\", _hoisted_5, _toDisplayString($setup.totalQuestions), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_6, \"(\" + _toDisplayString($setup.scorePercentage) + \"%)\", 1 /* TEXT */)])], 2 /* CLASS */), _createElementVNode(\"div\", _hoisted_7, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Detailed Results\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"result-item\"\n    }, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"span\", _hoisted_9, \"Q\" + _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"span\", {\n      class: _normalizeClass(['result-status', $setup.normalizeLetter($props.userAnswers[index]) === $setup.normalizeLetter(question.answer) ? 'correct' : 'wrong'])\n    }, _toDisplayString($setup.normalizeLetter($props.userAnswers[index]) === $setup.normalizeLetter(question.answer) ? '✓' : '✗'), 3 /* TEXT, CLASS */)]), _createElementVNode(\"p\", _hoisted_10, _toDisplayString(question.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"p\", null, \"Your answer: \" + _toDisplayString($props.userAnswers[index] || 'Not answered'), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Correct answer: \" + _toDisplayString(question.answer), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_12, [_cache[2] || (_cache[2] = _createElementVNode(\"p\", {\n      class: \"explanation-label\"\n    }, \"Explanation:\", -1 /* HOISTED */)), _createElementVNode(\"p\", _hoisted_13, _toDisplayString(question.explanation), 1 /* TEXT */)])])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.$emit('restart'))\n  }, \"Redo Quiz\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_normalizeClass","$setup","scoreClass","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$props","score","_hoisted_5","totalQuestions","_hoisted_6","scorePercentage","_hoisted_7","_Fragment","_renderList","questions","question","index","key","_hoisted_8","_hoisted_9","normalizeLetter","userAnswers","answer","_hoisted_10","text","_hoisted_11","_hoisted_12","_hoisted_13","explanation","_hoisted_14","onClick","_cache","$event","_ctx","$emit"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\components\\QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <div class=\"score-display\" :class=\"scoreClass\">\r\n      <div class=\"score-container\">\r\n        <div class=\"score-main\">\r\n          <span class=\"score-value\">{{ score }}</span>\r\n          <span class=\"score-separator\">/</span>\r\n          <span class=\"score-total\">{{ totalQuestions }}</span>\r\n        </div>\r\n        <div class=\"score-percentage\">({{ scorePercentage }}%)</div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Q{{ index + 1 }}</span>\r\n          <span :class=\"['result-status', \r\n            normalizeLetter(userAnswers[index]) === normalizeLetter(question.answer) ? 'correct' : 'wrong']\">\r\n            {{ normalizeLetter(userAnswers[index]) === normalizeLetter(question.answer) ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\">\r\n          <p>Your answer: {{ userAnswers[index] || 'Not answered' }}</p>\r\n          <p>Correct answer: {{ question.answer }}</p>\r\n          <div class=\"explanation\">\r\n            <p class=\"explanation-label\">Explanation:</p>\r\n            <p class=\"explanation-text\">{{ question.explanation }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"button-group\">\r\n      <button @click=\"$emit('restart')\">Redo Quiz</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  }\r\n});\r\n\r\ndefineEmits(['restart']);\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\nconst scorePercentage = computed(() => {\r\n  return Math.round((props.score / totalQuestions.value) * 100);\r\n});\r\nconst scoreClass = computed(() => {\r\n  return scorePercentage.value >= 75 ? 'passing' : 'failing';\r\n});\r\n\r\nfunction normalizeLetter(letter) {\r\n  return String(letter).replace(/[)\\s]/g, '').toUpperCase();\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 500px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.score-display.passing {\r\n  background-color: #e8f5e9;\r\n  border: 3px solid #2e7d32;\r\n}\r\n\r\n.score-display.failing {\r\n  background-color: #ffebee;\r\n  border: 3px solid #c62828;\r\n}\r\n\r\n.score-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-main {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-value {\r\n  font-size: 4rem;\r\n  line-height: 1;\r\n  font-weight: 800;\r\n}\r\n\r\n.score-separator {\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n}\r\n\r\n.score-total {\r\n  font-size: 2.5rem;\r\n  opacity: 0.7;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.8rem;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.score-comparison {\r\n  margin: 1.5rem 0;\r\n  padding: 1rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n  text-align: center;\r\n}\r\n\r\n.comparison-text {\r\n  margin-top: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-text.success {\r\n  color: #2e7d32;\r\n}\r\n\r\n.comparison-text.neutral {\r\n  color: #1976d2;\r\n}\r\n\r\n.comparison-text.warning {\r\n  color: #c62828;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.result-item {\r\n  background: #f8f8f8;\r\n  border-radius: 8px;\r\n  padding: 0.8rem;\r\n  margin-bottom: 0.8rem;\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 0.4rem;\r\n}\r\n\r\n.question-number {\r\n  font-weight: bold;\r\n  color: #333;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.result-status {\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.result-status.correct {\r\n  color: #27ae60;\r\n}\r\n\r\n.result-status.wrong {\r\n  color: #e74c3c;\r\n}\r\n\r\n.question-text {\r\n  font-size: 0.9rem;\r\n  margin-bottom: 0.5rem;\r\n  color: #333;\r\n}\r\n\r\n.answer-details {\r\n  margin-top: 0.4rem;\r\n  padding-top: 0.4rem;\r\n  border-top: 1px solid #ddd;\r\n  font-size: 0.85rem;\r\n}\r\n\r\n.answer-details p {\r\n  margin: 0.2rem 0;\r\n  color: #666;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: center;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.button-group button {\r\n  padding: 0.7rem 2rem;\r\n  background: #4CAF50;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.button-group button:hover {\r\n  background: #388e3c;\r\n}\r\n\r\n.explanation {\r\n  margin-top: 1rem;\r\n  padding: 1rem;\r\n  background-color: #f8f9fa;\r\n  border-left: 3px solid #2196F3;\r\n  border-radius: 4px;\r\n}\r\n\r\n.explanation-label {\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.explanation-text {\r\n  color: #666;\r\n  line-height: 1.4;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAc;;EAGhBA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAY;;EACfA,KAAK,EAAC;AAAa;;EAEnBA,KAAK,EAAC;AAAa;;EAEtBA,KAAK,EAAC;AAAkB;;EAI5BA,KAAK,EAAC;AAAkB;;EAGpBA,KAAK,EAAC;AAAiB;;EACpBA,KAAK,EAAC;AAAiB;;EAM5BA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAgB;;EAGpBA,KAAK,EAAC;AAAa;;EAEnBA,KAAK,EAAC;AAAkB;;EAM9BA,KAAK,EAAC;AAAc;;uBAnC3BC,mBAAA,CAsCM,OAtCNC,UAsCM,G,0BArCJC,mBAAA,CAAuB,YAAnB,gBAAc,sBAClBA,mBAAA,CASM;IATDH,KAAK,EAHdI,eAAA,EAGe,eAAe,EAASC,MAAA,CAAAC,UAAU;MAC3CH,mBAAA,CAOM,OAPNI,UAOM,GANJJ,mBAAA,CAIM,OAJNK,UAIM,GAHJL,mBAAA,CAA4C,QAA5CM,UAA4C,EAAAC,gBAAA,CAAfC,MAAA,CAAAC,KAAK,kB,0BAClCT,mBAAA,CAAsC;IAAhCH,KAAK,EAAC;EAAiB,GAAC,GAAC,sBAC/BG,mBAAA,CAAqD,QAArDU,UAAqD,EAAAH,gBAAA,CAAxBL,MAAA,CAAAS,cAAc,iB,GAE7CX,mBAAA,CAA4D,OAA5DY,UAA4D,EAA9B,GAAC,GAAAL,gBAAA,CAAGL,MAAA,CAAAW,eAAe,IAAG,IAAE,gB,oBAI1Db,mBAAA,CAoBM,OApBNc,UAoBM,G,0BAnBJd,mBAAA,CAAyB,YAArB,kBAAgB,uB,kBACpBF,mBAAA,CAiBMiB,SAAA,QAjCZC,WAAA,CAgBuCR,MAAA,CAAAS,SAAS,EAhBhD,CAgBmBC,QAAQ,EAAEC,KAAK;yBAA5BrB,mBAAA,CAiBM;MAjBuCsB,GAAG,EAAED,KAAK;MAAEtB,KAAK,EAAC;QAC7DG,mBAAA,CAMM,OANNqB,UAMM,GALJrB,mBAAA,CAAqD,QAArDsB,UAAqD,EAAvB,GAAC,GAAAf,gBAAA,CAAGY,KAAK,sBACvCnB,mBAAA,CAGO;MAHAH,KAAK,EAnBtBI,eAAA,mBAmBwDC,MAAA,CAAAqB,eAAe,CAACf,MAAA,CAAAgB,WAAW,CAACL,KAAK,OAAOjB,MAAA,CAAAqB,eAAe,CAACL,QAAQ,CAACO,MAAM;wBAEhHvB,MAAA,CAAAqB,eAAe,CAACf,MAAA,CAAAgB,WAAW,CAACL,KAAK,OAAOjB,MAAA,CAAAqB,eAAe,CAACL,QAAQ,CAACO,MAAM,qC,GAG9EzB,mBAAA,CAAgD,KAAhD0B,WAAgD,EAAAnB,gBAAA,CAApBW,QAAQ,CAACS,IAAI,kBACzC3B,mBAAA,CAOM,OAPN4B,WAOM,GANJ5B,mBAAA,CAA8D,WAA3D,eAAa,GAAAO,gBAAA,CAAGC,MAAA,CAAAgB,WAAW,CAACL,KAAK,qCACpCnB,mBAAA,CAA4C,WAAzC,kBAAgB,GAAAO,gBAAA,CAAGW,QAAQ,CAACO,MAAM,kBACrCzB,mBAAA,CAGM,OAHN6B,WAGM,G,0BAFJ7B,mBAAA,CAA6C;MAA1CH,KAAK,EAAC;IAAmB,GAAC,cAAY,sBACzCG,mBAAA,CAA0D,KAA1D8B,WAA0D,EAAAvB,gBAAA,CAA3BW,QAAQ,CAACa,WAAW,iB;oCAM3D/B,mBAAA,CAEM,OAFNgC,WAEM,GADJhC,mBAAA,CAAoD;IAA3CiC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAC,KAAK;KAAa,WAAS,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}