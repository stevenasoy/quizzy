{"ast":null,"code":"import _slicedToArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { computed } from 'vue';\nimport { rankContentRelevance, findExactPhraseMatches, scoreTermFrequency } from '../algorithms';\nexport default {\n  __name: 'QuizResults',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    },\n    userAnswers: {\n      type: Array,\n      required: true\n    },\n    score: {\n      type: Number,\n      required: true\n    },\n    predictedScore: {\n      type: Number,\n      required: false,\n      \"default\": null\n    }\n  },\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var props = __props;\n    var totalQuestions = computed(function () {\n      return props.questions.length;\n    });\n    var scorePercentage = computed(function () {\n      return Math.round(props.score / totalQuestions.value * 100);\n    });\n    var scoreClass = computed(function () {\n      return scorePercentage.value >= 75 ? 'passing' : 'failing';\n    });\n    function formatAnswer(question, answer) {\n      if (!answer && answer !== false) return 'Not answered';\n      if (question.type === 'multiple-choice') {\n        var optionText = question.options[answer];\n        return optionText ? \"\".concat(answer, \") \").concat(optionText) : answer;\n      } else if (question.type === 'true-false') {\n        // Handle both string and boolean values\n        var value = String(answer).toLowerCase();\n        return value.charAt(0).toUpperCase() + value.slice(1);\n      }\n      return answer;\n    }\n    function rephraseContent(text, isSupporting, question) {\n      // Clean and normalize the text\n      var cleaned = text.trim().replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '').replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '').replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '').replace(/\\d{4}\\s*\\d{4}/g, '').replace(/\\([^)]*\\)/g, '').replace(/\\[[^\\]]*\\]/g, '').trim();\n\n      // Extract keywords from question and answers\n      var keywords = extractKeywords(question);\n\n      // Use content processing algorithms to find relevant content\n      var relevanceScore = rankContentRelevance(cleaned, {\n        phrase: question.text,\n        keywords: keywords\n      });\n\n      // Find exact phrase matches for better context\n      var phraseMatches = findExactPhraseMatches(cleaned, question.text);\n\n      // Score term frequency for keyword analysis\n      var termScores = scoreTermFrequency(cleaned, keywords);\n\n      // Generate explanation based on algorithmic analysis\n      var explanation = '';\n      if (isSupporting) {\n        if (phraseMatches.length > 0) {\n          explanation = \"Correct! \".concat(phraseMatches[0].context);\n        } else if (relevanceScore > 70) {\n          explanation = \"Correct! This aligns well with the course material.\";\n        } else {\n          explanation = \"Correct! The answer demonstrates understanding of the concept.\";\n        }\n      } else {\n        var correctPart = question.type === 'multiple-choice' ? \"The correct answer is \\\"\".concat(question.options[question.correctAnswer], \"\\\". \") : \"The correct answer is \".concat(question.correctAnswer, \". \");\n        if (phraseMatches.length > 0) {\n          explanation = \"\".concat(correctPart, \"Here's why: \").concat(phraseMatches[0].context);\n        } else if (relevanceScore > 50) {\n          explanation = \"\".concat(correctPart, \"The course material supports this because: \").concat(Object.entries(termScores).filter(function (_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2),\n              term = _ref3[0],\n              score = _ref3[1];\n            return score > 0;\n          }).map(function (_ref4) {\n            var _ref5 = _slicedToArray(_ref4, 1),\n              term = _ref5[0];\n            return term;\n          }).slice(0, 3).join(', '), \" are key concepts discussed.\");\n        } else {\n          explanation = \"\".concat(correctPart, \"Please review this topic in the course material.\");\n        }\n      }\n      return explanation;\n    }\n    function extractKeywords(question) {\n      var keywords = new Set();\n\n      // Extract from question text\n      question.text.toLowerCase().split(/\\s+/).filter(function (word) {\n        return word.length > 4;\n      }).forEach(function (word) {\n        return keywords.add(word);\n      });\n\n      // Extract from options if multiple choice\n      if (question.type === 'multiple-choice') {\n        Object.values(question.options).forEach(function (option) {\n          option.toLowerCase().split(/\\s+/).filter(function (word) {\n            return word.length > 4;\n          }).forEach(function (word) {\n            return keywords.add(word);\n          });\n        });\n      }\n      return Array.from(keywords);\n    }\n    function generateExplanation(question, isCorrect) {\n      var explanation = question.explanation || '';\n      if (!explanation) return \"No explanation available.\";\n      if (question.type === 'multiple-choice') {\n        return generateMultipleChoiceExplanation(question, isCorrect);\n      } else {\n        return generateTrueFalseExplanation(question, isCorrect);\n      }\n    }\n    function generateMultipleChoiceExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      var userOption = question.options[question.userAnswer];\n      var correctOption = question.options[question.correctAnswer];\n\n      // Compare the chosen answer with the correct one to explain the difference\n      var explanation = \"While \\\"\".concat(userOption, \"\\\" might seem reasonable, it's not the complete picture. \").concat(rephraseContent(question.explanation, false, question), \" The correct answer, \\\"\").concat(correctOption, \"\\\", better reflects the full scope of the position.\");\n      return explanation;\n    }\n    function generateTrueFalseExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      var userChoice = question.userAnswer ? 'true' : 'false';\n      var correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\n\n      // Explain why their understanding needs adjustment\n      return \"Your understanding needs a slight adjustment. While you marked this as \".concat(userChoice, \", \").concat(rephraseContent(question.explanation, false, question), \" This is why the statement is actually \").concat(correctChoice, \".\");\n    }\n    var __returned__ = {\n      props: props,\n      totalQuestions: totalQuestions,\n      scorePercentage: scorePercentage,\n      scoreClass: scoreClass,\n      formatAnswer: formatAnswer,\n      rephraseContent: rephraseContent,\n      extractKeywords: extractKeywords,\n      generateExplanation: generateExplanation,\n      generateMultipleChoiceExplanation: generateMultipleChoiceExplanation,\n      generateTrueFalseExplanation: generateTrueFalseExplanation,\n      computed: computed,\n      get rankContentRelevance() {\n        return rankContentRelevance;\n      },\n      get findExactPhraseMatches() {\n        return findExactPhraseMatches;\n      },\n      get scoreTermFrequency() {\n        return scoreTermFrequency;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","rankContentRelevance","findExactPhraseMatches","scoreTermFrequency","props","__props","totalQuestions","questions","length","scorePercentage","Math","round","score","value","scoreClass","formatAnswer","question","answer","type","optionText","options","concat","String","toLowerCase","charAt","toUpperCase","slice","rephraseContent","text","isSupporting","cleaned","trim","replace","keywords","extractKeywords","relevanceScore","phrase","phraseMatches","termScores","explanation","context","correctPart","correctAnswer","Object","entries","filter","_ref2","_ref3","_slicedToArray","term","map","_ref4","_ref5","join","Set","split","word","forEach","add","values","option","Array","from","generateExplanation","isCorrect","generateMultipleChoiceExplanation","generateTrueFalseExplanation","userOption","userAnswer","correctOption","userChoice","correctChoice"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <div class=\"score-display\" :class=\"scoreClass\">\r\n      <div class=\"score-container\">\r\n        <div class=\"score-main\">\r\n          <span class=\"score-value\">{{ score }}</span>\r\n          <span class=\"score-separator\">/</span>\r\n          <span class=\"score-total\">{{ totalQuestions }}</span>\r\n        </div>\r\n        <div class=\"score-percentage\">({{ scorePercentage }}%)</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"score-comparison\" v-if=\"predictedScore\">\r\n      <p>You scored {{ scorePercentage }}%. Predicted score was {{ predictedScore }}%.</p>\r\n      <p v-if=\"scorePercentage > predictedScore + 5\" class=\"comparison-text success\">\r\n        Excellent! You surpassed the prediction!\r\n      </p>\r\n      <p v-else-if=\"Math.abs(scorePercentage - predictedScore) <= 5\" class=\"comparison-text neutral\">\r\n        You were close to the prediction!\r\n      </p>\r\n      <p v-else class=\"comparison-text warning\">\r\n        You scored below the prediction. Review the material for improvement.\r\n      </p>\r\n    </div>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Question {{ index + 1 }}</span>\r\n          <span :class=\"['result-status', question.isCorrect ? 'correct' : 'wrong']\">\r\n            {{ question.isCorrect ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\" :class=\"{ 'incorrect': !question.isCorrect }\">\r\n          <div class=\"answer-row\">\r\n            <div class=\"user-answer\">\r\n              <strong>Your answer:</strong> \r\n              <span :class=\"{ 'incorrect-text': !question.isCorrect }\">\r\n                {{ formatAnswer(question, question.userAnswer) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"correct-answer\">\r\n              <strong>Correct answer:</strong>\r\n              <span class=\"correct-text\">{{ formatAnswer(question, question.correctAnswer) }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"explanation-box\" :class=\"{ 'correct': question.isCorrect, 'incorrect': !question.isCorrect }\">\r\n            <p class=\"explanation-label\">Explanation:</p>\r\n            <p class=\"explanation-text\">{{ generateExplanation(question, question.isCorrect) }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"return-hint\">\r\n      <p>You can retake this quiz anytime from the history panel</p>\r\n      <p>Click \"Create New Quiz\" to start a new quiz with different material</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\nimport { rankContentRelevance, findExactPhraseMatches, scoreTermFrequency } from '../algorithms';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  predictedScore: {\r\n    type: Number,\r\n    required: false,\r\n    default: null\r\n  }\r\n});\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\nconst scorePercentage = computed(() => {\r\n  return Math.round((props.score / totalQuestions.value) * 100);\r\n});\r\nconst scoreClass = computed(() => {\r\n  return scorePercentage.value >= 75 ? 'passing' : 'failing';\r\n});\r\n\r\nfunction formatAnswer(question, answer) {\r\n  if (!answer && answer !== false) return 'Not answered';\r\n  \r\n  if (question.type === 'multiple-choice') {\r\n    const optionText = question.options[answer];\r\n    return optionText ? `${answer}) ${optionText}` : answer;\r\n  } else if (question.type === 'true-false') {\r\n    // Handle both string and boolean values\r\n    const value = String(answer).toLowerCase();\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n  }\r\n  return answer;\r\n}\r\n\r\nfunction rephraseContent(text, isSupporting, question) {\r\n  // Clean and normalize the text\r\n  const cleaned = text.trim()\r\n    .replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '')\r\n    .replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '')\r\n    .replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '')\r\n    .replace(/\\d{4}\\s*\\d{4}/g, '')\r\n    .replace(/\\([^)]*\\)/g, '')\r\n    .replace(/\\[[^\\]]*\\]/g, '')\r\n    .trim();\r\n\r\n  // Extract keywords from question and answers\r\n  const keywords = extractKeywords(question);\r\n  \r\n  // Use content processing algorithms to find relevant content\r\n  const relevanceScore = rankContentRelevance(cleaned, {\r\n    phrase: question.text,\r\n    keywords: keywords\r\n  });\r\n  \r\n  // Find exact phrase matches for better context\r\n  const phraseMatches = findExactPhraseMatches(cleaned, question.text);\r\n  \r\n  // Score term frequency for keyword analysis\r\n  const termScores = scoreTermFrequency(cleaned, keywords);\r\n  \r\n  // Generate explanation based on algorithmic analysis\r\n  let explanation = '';\r\n  \r\n  if (isSupporting) {\r\n    if (phraseMatches.length > 0) {\r\n      explanation = `Correct! ${phraseMatches[0].context}`;\r\n    } else if (relevanceScore > 70) {\r\n      explanation = `Correct! This aligns well with the course material.`;\r\n    } else {\r\n      explanation = `Correct! The answer demonstrates understanding of the concept.`;\r\n    }\r\n  } else {\r\n    const correctPart = question.type === 'multiple-choice'\r\n      ? `The correct answer is \"${question.options[question.correctAnswer]}\". `\r\n      : `The correct answer is ${question.correctAnswer}. `;\r\n      \r\n    if (phraseMatches.length > 0) {\r\n      explanation = `${correctPart}Here's why: ${phraseMatches[0].context}`;\r\n    } else if (relevanceScore > 50) {\r\n      explanation = `${correctPart}The course material supports this because: ${Object.entries(termScores)\r\n        .filter(([term, score]) => score > 0)\r\n        .map(([term]) => term)\r\n        .slice(0, 3)\r\n        .join(', ')} are key concepts discussed.`;\r\n    } else {\r\n      explanation = `${correctPart}Please review this topic in the course material.`;\r\n    }\r\n  }\r\n  \r\n  return explanation;\r\n}\r\n\r\nfunction extractKeywords(question) {\r\n  const keywords = new Set();\r\n  \r\n  // Extract from question text\r\n  question.text.toLowerCase()\r\n    .split(/\\s+/)\r\n    .filter(word => word.length > 4)\r\n    .forEach(word => keywords.add(word));\r\n    \r\n  // Extract from options if multiple choice\r\n  if (question.type === 'multiple-choice') {\r\n    Object.values(question.options).forEach(option => {\r\n      option.toLowerCase()\r\n        .split(/\\s+/)\r\n        .filter(word => word.length > 4)\r\n        .forEach(word => keywords.add(word));\r\n    });\r\n  }\r\n  \r\n  return Array.from(keywords);\r\n}\r\n\r\nfunction generateExplanation(question, isCorrect) {\r\n  const explanation = question.explanation || '';\r\n  if (!explanation) return \"No explanation available.\";\r\n\r\n  if (question.type === 'multiple-choice') {\r\n    return generateMultipleChoiceExplanation(question, isCorrect);\r\n  } else {\r\n    return generateTrueFalseExplanation(question, isCorrect);\r\n  }\r\n}\r\n\r\nfunction generateMultipleChoiceExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userOption = question.options[question.userAnswer];\r\n  const correctOption = question.options[question.correctAnswer];\r\n  \r\n  // Compare the chosen answer with the correct one to explain the difference\r\n  const explanation = `While \"${userOption}\" might seem reasonable, it's not the complete picture. ${rephraseContent(question.explanation, false, question)} The correct answer, \"${correctOption}\", better reflects the full scope of the position.`;\r\n  \r\n  return explanation;\r\n}\r\n\r\nfunction generateTrueFalseExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userChoice = question.userAnswer ? 'true' : 'false';\r\n  const correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\r\n  \r\n  // Explain why their understanding needs adjustment\r\n  return `Your understanding needs a slight adjustment. While you marked this as ${userChoice}, ${rephraseContent(question.explanation, false, question)} This is why the statement is actually ${correctChoice}.`;\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 800px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.score-display.passing {\r\n  background-color: #e8f5e9;\r\n  border: 3px solid #4CAF50;\r\n}\r\n\r\n.score-display.failing {\r\n  background-color: #ffebee;\r\n  border: 3px solid #f44336;\r\n}\r\n\r\n.score-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-main {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-value {\r\n  font-size: 4rem;\r\n  line-height: 1;\r\n  font-weight: 800;\r\n}\r\n\r\n.score-separator {\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n}\r\n\r\n.score-total {\r\n  font-size: 2.5rem;\r\n  opacity: 0.7;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.8rem;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.score-comparison {\r\n  margin: 1.5rem 0;\r\n  padding: 1.5rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n}\r\n\r\n.comparison-text {\r\n  margin-top: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-text.success {\r\n  color: #4CAF50;\r\n}\r\n\r\n.comparison-text.neutral {\r\n  color: #666;\r\n}\r\n\r\n.comparison-text.warning {\r\n  color: #f44336;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n}\r\n\r\n.result-item {\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.question-number {\r\n  font-weight: 600;\r\n  color: #666;\r\n}\r\n\r\n.result-status {\r\n  padding: 0.4rem 1rem;\r\n  border-radius: 20px;\r\n  font-weight: 600;\r\n}\r\n\r\n.result-status.correct {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.result-status.wrong {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.question-text {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  margin-bottom: 1rem;\r\n  line-height: 1.4;\r\n}\r\n\r\n.answer-details {\r\n  background-color: #fff;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.answer-details.incorrect {\r\n  border-color: #ffcdd2;\r\n  background-color: #fff5f5;\r\n}\r\n\r\n.answer-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-answer, .correct-answer {\r\n  padding: 1rem;\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.user-answer strong, .correct-answer strong {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.incorrect-text {\r\n  color: #d32f2f;\r\n}\r\n\r\n.correct-text {\r\n  color: #2e7d32;\r\n}\r\n\r\n.explanation-box {\r\n  margin-top: 1.5rem;\r\n  padding: 1.5rem;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.explanation-box.correct {\r\n  border-left: 4px solid #4CAF50;\r\n}\r\n\r\n.explanation-box.incorrect {\r\n  border-left: 4px solid #ff9800;\r\n}\r\n\r\n.explanation-label {\r\n  font-weight: 600;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.explanation-label.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.explanation-label.incorrect {\r\n  color: #f57c00;\r\n}\r\n\r\n.explanation-text {\r\n  color: #333;\r\n  line-height: 1.6;\r\n  margin: 0;\r\n}\r\n\r\n.return-hint {\r\n  margin-top: 2rem;\r\n  text-align: center;\r\n  color: #666;\r\n  background: #f5f5f5;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n}\r\n\r\n.return-hint p {\r\n  margin: 0.5rem 0;\r\n  font-size: 0.95rem;\r\n}\r\n\r\n.return-hint p:first-child {\r\n  color: #4CAF50;\r\n  font-weight: 500;\r\n}\r\n\r\n.return-hint p:last-child {\r\n  color: #2196F3;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Remove button styles */\r\n.button-group, .restart-btn, .back-btn {\r\n  display: none;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}