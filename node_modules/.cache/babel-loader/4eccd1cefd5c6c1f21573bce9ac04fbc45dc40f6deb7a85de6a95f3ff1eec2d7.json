{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"study-stats\"\n};\nvar _hoisted_2 = {\n  \"class\": \"stats-grid\"\n};\nvar _hoisted_3 = {\n  \"class\": \"stat-card\"\n};\nvar _hoisted_4 = {\n  \"class\": \"stat-value\"\n};\nvar _hoisted_5 = {\n  \"class\": \"stat-card\"\n};\nvar _hoisted_6 = {\n  \"class\": \"stat-value\"\n};\nvar _hoisted_7 = {\n  \"class\": \"stat-card\"\n};\nvar _hoisted_8 = {\n  \"class\": \"stat-value\"\n};\nvar _hoisted_9 = {\n  \"class\": \"stat-card\"\n};\nvar _hoisted_10 = {\n  \"class\": \"stat-value\"\n};\nvar _hoisted_11 = {\n  \"class\": \"activity-calendar\"\n};\nvar _hoisted_12 = {\n  \"class\": \"calendar-grid\"\n};\nvar _hoisted_13 = {\n  \"class\": \"calendar-row\"\n};\nvar _hoisted_14 = [\"title\"];\nvar _hoisted_15 = {\n  \"class\": \"day-label\"\n};\nvar _hoisted_16 = {\n  \"class\": \"calendar-row\"\n};\nvar _hoisted_17 = [\"title\"];\nvar _hoisted_18 = {\n  \"class\": \"day-label\"\n};\nvar _hoisted_19 = {\n  key: 0,\n  \"class\": \"performance-chart\"\n};\nvar _hoisted_20 = {\n  \"class\": \"score-bars\"\n};\nvar _hoisted_21 = {\n  \"class\": \"score-label\"\n};\nvar _hoisted_22 = {\n  \"class\": \"quiz-date\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Study Statistics\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[0] || (_cache[0] = _createElementVNode(\"h3\", null, \"Total Quizzes\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_4, _toDisplayString($props.quizHistory.length), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_5, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", null, \"Average Score\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_6, _toDisplayString($setup.averageScore) + \"%\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_7, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"Best Score\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_8, _toDisplayString($setup.bestScore) + \"%\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_9, [_cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"Total Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_10, _toDisplayString($setup.totalQuestions), 1 /* TEXT */)])]), _createElementVNode(\"div\", _hoisted_11, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Activity Calendar (Last 12 Days)\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.activityCalendar.slice(0, 6), function (day) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      \"class\": _normalizeClass([\"calendar-day\", [day.activity ? \"activity-\".concat(day.activityLevel) : '', {\n        'has-activity': day.activity\n      }]]),\n      title: day.tooltip\n    }, [_createElementVNode(\"span\", _hoisted_15, _toDisplayString($setup.formatDayLabel(day.date)), 1 /* TEXT */)], 10 /* CLASS, PROPS */, _hoisted_14);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_16, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.activityCalendar.slice(6, 12), function (day) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: day.date,\n      \"class\": _normalizeClass([\"calendar-day\", [day.activity ? \"activity-\".concat(day.activityLevel) : '', {\n        'has-activity': day.activity\n      }]]),\n      title: day.tooltip\n    }, [_createElementVNode(\"span\", _hoisted_18, _toDisplayString($setup.formatDayLabel(day.date)), 1 /* TEXT */)], 10 /* CLASS, PROPS */, _hoisted_17);\n  }), 128 /* KEYED_FRAGMENT */))])]), _cache[5] || (_cache[5] = _createStaticVNode(\"<div class=\\\"calendar-legend\\\" data-v-5f4bfb86><div class=\\\"legend-item\\\" data-v-5f4bfb86>No Sessions</div><div class=\\\"legend-squares\\\" data-v-5f4bfb86><div class=\\\"legend-square\\\" data-v-5f4bfb86></div><div class=\\\"legend-square activity-1\\\" data-v-5f4bfb86>1</div><div class=\\\"legend-square activity-2\\\" data-v-5f4bfb86>2</div><div class=\\\"legend-square activity-3\\\" data-v-5f4bfb86>3</div><div class=\\\"legend-square activity-4\\\" data-v-5f4bfb86>4+</div></div><div class=\\\"legend-item\\\" data-v-5f4bfb86>4+ Sessions</div></div>\", 1))]), $props.quizHistory.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [_cache[6] || (_cache[6] = _createElementVNode(\"h3\", null, \"Recent Performance\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_20, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.recentQuizzes, function (quiz, index) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      \"class\": \"score-bar-container\"\n    }, [_createElementVNode(\"div\", {\n      \"class\": _normalizeClass([\"score-bar\", $setup.getScoreClass(quiz.actualScore * 100)]),\n      style: _normalizeStyle({\n        height: \"\".concat(quiz.actualScore * 100, \"%\")\n      })\n    }, [_createElementVNode(\"span\", _hoisted_21, _toDisplayString(Math.round(quiz.actualScore * 100)) + \"%\", 1 /* TEXT */)], 6 /* CLASS, STYLE */), _createElementVNode(\"div\", _hoisted_22, _toDisplayString($setup.formatDate(quiz.date)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$props","quizHistory","length","_hoisted_5","_hoisted_6","$setup","averageScore","_hoisted_7","_hoisted_8","bestScore","_hoisted_9","_hoisted_10","totalQuestions","_hoisted_11","_hoisted_12","_hoisted_13","_Fragment","_renderList","activityCalendar","slice","day","key","date","_normalizeClass","activity","concat","activityLevel","title","tooltip","_hoisted_15","formatDayLabel","_hoisted_16","_hoisted_18","_hoisted_19","_hoisted_20","recentQuizzes","quiz","index","getScoreClass","actualScore","style","_normalizeStyle","height","_hoisted_21","Math","round","_hoisted_22","formatDate"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\components\\StudyStats.vue"],"sourcesContent":["<template>\n  <div class=\"study-stats\">\n    <h2>Study Statistics</h2>\n    \n    <div class=\"stats-grid\">\n      <div class=\"stat-card\">\n        <h3>Total Quizzes</h3>\n        <div class=\"stat-value\">{{ quizHistory.length }}</div>\n      </div>\n      \n      <div class=\"stat-card\">\n        <h3>Average Score</h3>\n        <div class=\"stat-value\">{{ averageScore }}%</div>\n      </div>\n      \n      <div class=\"stat-card\">\n        <h3>Best Score</h3>\n        <div class=\"stat-value\">{{ bestScore }}%</div>\n      </div>\n      \n      <div class=\"stat-card\">\n        <h3>Total Questions</h3>\n        <div class=\"stat-value\">{{ totalQuestions }}</div>\n      </div>\n    </div>\n\n    <div class=\"activity-calendar\">\n      <h3>Activity Calendar (Last 12 Days)</h3>\n      <div class=\"calendar-grid\">\n        <div class=\"calendar-row\">\n          <div v-for=\"day in activityCalendar.slice(0, 6)\" \n               :key=\"day.date\"\n               class=\"calendar-day\"\n               :class=\"[\n                 day.activity ? `activity-${day.activityLevel}` : '',\n                 { 'has-activity': day.activity }\n               ]\"\n               :title=\"day.tooltip\">\n            <span class=\"day-label\">{{ formatDayLabel(day.date) }}</span>\n          </div>\n        </div>\n        <div class=\"calendar-row\">\n          <div v-for=\"day in activityCalendar.slice(6, 12)\" \n               :key=\"day.date\"\n               class=\"calendar-day\"\n               :class=\"[\n                 day.activity ? `activity-${day.activityLevel}` : '',\n                 { 'has-activity': day.activity }\n               ]\"\n               :title=\"day.tooltip\">\n            <span class=\"day-label\">{{ formatDayLabel(day.date) }}</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"calendar-legend\">\n        <div class=\"legend-item\">No Sessions</div>\n        <div class=\"legend-squares\">\n          <div class=\"legend-square\"></div>\n          <div class=\"legend-square activity-1\">1</div>\n          <div class=\"legend-square activity-2\">2</div>\n          <div class=\"legend-square activity-3\">3</div>\n          <div class=\"legend-square activity-4\">4+</div>\n        </div>\n        <div class=\"legend-item\">4+ Sessions</div>\n      </div>\n    </div>\n\n    <div class=\"performance-chart\" v-if=\"quizHistory.length > 0\">\n      <h3>Recent Performance</h3>\n      <div class=\"score-bars\">\n        <div v-for=\"(quiz, index) in recentQuizzes\" \n             :key=\"index\" \n             class=\"score-bar-container\">\n          <div class=\"score-bar\" \n               :style=\"{ height: `${quiz.actualScore * 100}%` }\"\n               :class=\"getScoreClass(quiz.actualScore * 100)\">\n            <span class=\"score-label\">{{ Math.round(quiz.actualScore * 100) }}%</span>\n          </div>\n          <div class=\"quiz-date\">{{ formatDate(quiz.date) }}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue';\nimport { getScoreClass } from '../algorithms/score-classification';\n\nconst props = defineProps({\n  quizHistory: {\n    type: Array,\n    required: true\n  }\n});\n\n// Computed statistics\nconst averageScore = computed(() => {\n  if (props.quizHistory.length === 0) return 0;\n  const total = props.quizHistory.reduce((sum, quiz) => sum + quiz.actualScore * 100, 0);\n  return Math.round(total / props.quizHistory.length);\n});\n\nconst bestScore = computed(() => {\n  if (props.quizHistory.length === 0) return 0;\n  const best = Math.max(...props.quizHistory.map(quiz => quiz.actualScore * 100));\n  return Math.round(best);\n});\n\nconst totalQuestions = computed(() => {\n  return props.quizHistory.reduce((sum, quiz) => sum + quiz.questionCount, 0);\n});\n\nconst recentQuizzes = computed(() => {\n  return [...props.quizHistory]\n    .sort((a, b) => new Date(b.date) - new Date(a.date))\n    .slice(0, 5);\n});\n\n// Activity calendar computation\nconst activityCalendar = computed(() => {\n  const days = 12; // Show last 12 days\n  const calendar = [];\n  const now = new Date();\n  const sessionMap = new Map();\n  \n  // Group quizzes by date to count sessions\n  props.quizHistory.forEach(quiz => {\n    const date = new Date(quiz.date);\n    const dateKey = date.toISOString().split('T')[0];\n    // Count unique sessions (timestamps) per day\n    const sessions = sessionMap.get(dateKey) || new Set();\n    sessions.add(date.getTime());\n    sessionMap.set(dateKey, sessions);\n  });\n\n  // Generate calendar data for last 12 days\n  for (let d = days - 1; d >= 0; d--) {\n    const date = new Date(now);\n    date.setDate(date.getDate() - d);\n    const dateKey = date.toISOString().split('T')[0];\n    const sessions = sessionMap.get(dateKey)?.size || 0;\n    \n    let activityLevel = 0;\n    if (sessions > 0) {\n      // 1-4 scale based on number of sessions\n      activityLevel = Math.min(sessions, 4);\n    }\n\n    calendar.push({\n      date: date,\n      activity: sessions > 0,\n      activityLevel,\n      tooltip: sessions > 0 \n        ? `${sessions} session${sessions > 1 ? 's' : ''} on ${formatDate(date)}`\n        : formatDate(date)\n    });\n  }\n  \n  return calendar;\n});\n\n// Helper function to format dates\nconst formatDate = (date) => {\n  return new Date(date).toLocaleDateString();\n};\n\n// New helper function to format day labels\nconst formatDayLabel = (date) => {\n  return date.getDate();\n};\n</script>\n\n<style scoped>\n.study-stats {\n  padding: 2rem;\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1.5rem;\n  margin: 2rem 0;\n}\n\n.stat-card {\n  background-color: #f8f9fa;\n  padding: 1.5rem;\n  border-radius: 8px;\n  text-align: center;\n  transition: transform 0.2s;\n}\n\n.stat-card:hover {\n  transform: translateY(-2px);\n}\n\n.stat-card h3 {\n  color: #666;\n  font-size: 1rem;\n  margin-bottom: 0.5rem;\n}\n\n.stat-value {\n  font-size: 2rem;\n  font-weight: bold;\n  color: #2196F3;\n}\n\n/* Activity Calendar Styles */\n.activity-calendar {\n  margin: 3rem 0;\n  padding: 1.5rem;\n  background-color: #f8f9fa;\n  border-radius: 12px;\n}\n\n.calendar-grid {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin: 1.5rem 0;\n}\n\n.calendar-row {\n  display: flex;\n  justify-content: space-between;\n  gap: 8px;\n}\n\n.calendar-day {\n  flex: 1;\n  aspect-ratio: 1;\n  min-width: 60px;\n  border-radius: 8px;\n  background-color: #ebedf0;\n  border: 1px solid rgba(27, 31, 35, 0.06);\n  cursor: pointer;\n  transition: transform 0.1s ease;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n\n.calendar-day:hover {\n  transform: scale(1.05);\n}\n\n.day-label {\n  font-size: 0.9rem;\n  color: #666;\n  position: absolute;\n  top: 4px;\n  left: 4px;\n}\n\n.calendar-day.has-activity {\n  border: none;\n}\n\n.activity-1 { background-color: #9be9a8; }\n.activity-2 { background-color: #40c463; }\n.activity-3 { background-color: #30a14e; }\n.activity-4 { background-color: #216e39; }\n\n.calendar-legend {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  margin-top: 1rem;\n  font-size: 0.8rem;\n  color: #666;\n}\n\n.legend-squares {\n  display: flex;\n  gap: 4px;\n}\n\n.legend-square {\n  width: 24px;\n  height: 24px;\n  border-radius: 4px;\n  background-color: #ebedf0;\n  border: 1px solid rgba(27, 31, 35, 0.06);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.8rem;\n  color: #666;\n}\n\n.legend-square.activity-1,\n.legend-square.activity-2,\n.legend-square.activity-3,\n.legend-square.activity-4 {\n  color: white;\n}\n\n/* Performance Chart Styles */\n.performance-chart {\n  margin-top: 3rem;\n}\n\n.score-bars {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n  height: 200px;\n  margin-top: 1.5rem;\n  padding: 1rem 0;\n}\n\n.score-bar-container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 0.5rem;\n}\n\n.score-bar {\n  width: 40px;\n  min-height: 4px;\n  border-radius: 4px;\n  position: relative;\n  transition: height 0.3s ease;\n}\n\n.score-bar.excellent {\n  background-color: #4CAF50;\n}\n\n.score-bar.good {\n  background-color: #2196F3;\n}\n\n.score-bar.average {\n  background-color: #FF9800;\n}\n\n.score-bar.needs-improvement {\n  background-color: #f44336;\n}\n\n.score-label {\n  position: absolute;\n  top: -25px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 0.8rem;\n  color: #666;\n}\n\n.quiz-date {\n  margin-top: 0.5rem;\n  font-size: 0.8rem;\n  color: #666;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}