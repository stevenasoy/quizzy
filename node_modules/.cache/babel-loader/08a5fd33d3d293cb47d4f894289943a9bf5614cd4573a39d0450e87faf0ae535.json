{"ast":null,"code":"import { computed } from 'vue';\nexport default {\n  __name: 'QuizResults',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    },\n    userAnswers: {\n      type: Array,\n      required: true\n    },\n    score: {\n      type: Number,\n      required: true\n    },\n    predictedScore: {\n      type: Number,\n      required: false,\n      default: null\n    }\n  },\n  emits: ['restart', 'go-back'],\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const totalQuestions = computed(() => props.questions.length);\n    const scorePercentage = computed(() => {\n      return Math.round(props.score / totalQuestions.value * 100);\n    });\n    const scoreClass = computed(() => {\n      return scorePercentage.value >= 75 ? 'passing' : 'failing';\n    });\n    function formatAnswer(question, answer) {\n      if (!answer && answer !== false) return 'Not answered';\n      if (question.type === 'multiple-choice') {\n        const optionText = question.options[answer];\n        return optionText ? `${answer}) ${optionText}` : answer;\n      } else if (question.type === 'true-false') {\n        // Handle both string and boolean values\n        const value = String(answer).toLowerCase();\n        return value.charAt(0).toUpperCase() + value.slice(1);\n      }\n      return answer;\n    }\n    function rephraseContent(text, isSupporting, question) {\n      // Clean the text of personal info and formatting\n      let cleaned = text.trim().replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '').replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '').replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '').replace(/\\d{4}\\s*\\d{4}/g, '').replace(/\\([^)]*\\)/g, '').replace(/\\[[^\\]]*\\]/g, '').trim();\n\n      // Extract source material context if available\n      const sourceMaterial = question.sourceMaterial || cleaned;\n      const sourceContext = question.sourceContext || '';\n\n      // Analyze the question content and source material\n      const questionLower = question.text.toLowerCase();\n      const correctAnswer = question.type === 'multiple-choice' ? question.options[question.correctAnswer].toLowerCase() : String(question.correctAnswer).toLowerCase();\n\n      // Get specific keywords from the question and answers\n      const questionKeywords = questionLower.replace(/[.,?!]/g, '').split(/\\s+/).filter(word => word.length > 3).filter(word => !['what', 'which', 'when', 'where', 'why', 'how', 'does', 'did', 'will', 'should', 'could', 'would', 'this', 'that', 'these', 'those', 'have', 'has', 'had'].includes(word));\n      const correctAnswerKeywords = correctAnswer.replace(/[.,?!]/g, '').split(/\\s+/).filter(word => word.length > 3);\n      const userAnswerKeywords = question.type === 'multiple-choice' && question.userAnswer !== undefined ? question.options[question.userAnswer].toLowerCase().replace(/[.,?!]/g, '').split(/\\s+/).filter(word => word.length > 3) : [];\n\n      // Combine all relevant keywords\n      const allKeywords = [...new Set([...questionKeywords, ...correctAnswerKeywords, ...userAnswerKeywords])];\n\n      // Find the most relevant sentence from the source material\n      function findRelevantContext(text, keywords) {\n        if (!text) return '';\n\n        // Split into sentences and clean them\n        const sentences = text.split(/[.!?]+/).map(s => s.trim()).filter(s => s.length > 0);\n\n        // Score each sentence based on keyword matches\n        const scoredSentences = sentences.map(sentence => {\n          const sentenceLower = sentence.toLowerCase();\n          const matchCount = keywords.reduce((count, keyword) => {\n            return count + (sentenceLower.includes(keyword.toLowerCase()) ? 1 : 0);\n          }, 0);\n          return {\n            sentence,\n            score: matchCount\n          };\n        });\n\n        // Sort by score and get the most relevant sentences (max 2)\n        const relevantSentences = scoredSentences.filter(item => item.score > 0).sort((a, b) => b.score - a.score).slice(0, 2).map(item => item.sentence);\n        return relevantSentences.join('. ');\n      }\n\n      // Generate explanation based on the specific question and answer\n      function generateSpecificExplanation() {\n        const relevantContext = findRelevantContext(sourceContext || sourceMaterial, allKeywords);\n        if (isSupporting) {\n          if (relevantContext) {\n            return `Correct! ${relevantContext}`;\n          }\n          return 'Correct! This aligns with the course material.';\n        } else {\n          const correctPart = question.type === 'multiple-choice' ? `The correct answer is \"${question.options[question.correctAnswer]}\". ` : `The correct answer is ${question.correctAnswer}. `;\n          if (relevantContext) {\n            return `${correctPart}Here's why: ${relevantContext}`;\n          }\n          return `${correctPart}Please review this topic in the course material.`;\n        }\n      }\n\n      // Generate the explanation\n      let explanation = generateSpecificExplanation();\n\n      // Add specific feedback for incorrect multiple choice answers\n      if (question.type === 'multiple-choice' && !isSupporting && question.userAnswer !== undefined) {\n        const userChoice = question.options[question.userAnswer];\n        explanation += ` You selected \"${userChoice}\", which is incorrect.`;\n      }\n      return explanation;\n    }\n    function generateExplanation(question, isCorrect) {\n      const explanation = question.explanation || '';\n      if (!explanation) return \"No explanation available.\";\n      if (question.type === 'multiple-choice') {\n        return generateMultipleChoiceExplanation(question, isCorrect);\n      } else {\n        return generateTrueFalseExplanation(question, isCorrect);\n      }\n    }\n    function generateMultipleChoiceExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      const userOption = question.options[question.userAnswer];\n      const correctOption = question.options[question.correctAnswer];\n\n      // Compare the chosen answer with the correct one to explain the difference\n      const explanation = `While \"${userOption}\" might seem reasonable, it's not the complete picture. ${rephraseContent(question.explanation, false, question)} The correct answer, \"${correctOption}\", better reflects the full scope of the position.`;\n      return explanation;\n    }\n    function generateTrueFalseExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      const userChoice = question.userAnswer ? 'true' : 'false';\n      const correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\n\n      // Explain why their understanding needs adjustment\n      return `Your understanding needs a slight adjustment. While you marked this as ${userChoice}, ${rephraseContent(question.explanation, false, question)} This is why the statement is actually ${correctChoice}.`;\n    }\n    const __returned__ = {\n      props,\n      totalQuestions,\n      scorePercentage,\n      scoreClass,\n      formatAnswer,\n      rephraseContent,\n      generateExplanation,\n      generateMultipleChoiceExplanation,\n      generateTrueFalseExplanation,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","props","__props","totalQuestions","questions","length","scorePercentage","Math","round","score","value","scoreClass","formatAnswer","question","answer","type","optionText","options","String","toLowerCase","charAt","toUpperCase","slice","rephraseContent","text","isSupporting","cleaned","trim","replace","sourceMaterial","sourceContext","questionLower","correctAnswer","questionKeywords","split","filter","word","includes","correctAnswerKeywords","userAnswerKeywords","userAnswer","undefined","allKeywords","Set","findRelevantContext","keywords","sentences","map","s","scoredSentences","sentence","sentenceLower","matchCount","reduce","count","keyword","relevantSentences","item","sort","a","b","join","generateSpecificExplanation","relevantContext","correctPart","explanation","userChoice","generateExplanation","isCorrect","generateMultipleChoiceExplanation","generateTrueFalseExplanation","userOption","correctOption","correctChoice"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <div class=\"score-display\" :class=\"scoreClass\">\r\n      <div class=\"score-container\">\r\n        <div class=\"score-main\">\r\n          <span class=\"score-value\">{{ score }}</span>\r\n          <span class=\"score-separator\">/</span>\r\n          <span class=\"score-total\">{{ totalQuestions }}</span>\r\n        </div>\r\n        <div class=\"score-percentage\">({{ scorePercentage }}%)</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"score-comparison\" v-if=\"predictedScore\">\r\n      <p>You scored {{ scorePercentage }}%. Predicted score was {{ predictedScore }}%.</p>\r\n      <p v-if=\"scorePercentage > predictedScore + 5\" class=\"comparison-text success\">\r\n        Excellent! You surpassed the prediction!\r\n      </p>\r\n      <p v-else-if=\"Math.abs(scorePercentage - predictedScore) <= 5\" class=\"comparison-text neutral\">\r\n        You were close to the prediction!\r\n      </p>\r\n      <p v-else class=\"comparison-text warning\">\r\n        You scored below the prediction. Review the material for improvement.\r\n      </p>\r\n    </div>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Question {{ index + 1 }}</span>\r\n          <span :class=\"['result-status', question.isCorrect ? 'correct' : 'wrong']\">\r\n            {{ question.isCorrect ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\" :class=\"{ 'incorrect': !question.isCorrect }\">\r\n          <div class=\"answer-row\">\r\n            <div class=\"user-answer\">\r\n              <strong>Your answer:</strong> \r\n              <span :class=\"{ 'incorrect-text': !question.isCorrect }\">\r\n                {{ formatAnswer(question, question.userAnswer) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"correct-answer\">\r\n              <strong>Correct answer:</strong>\r\n              <span class=\"correct-text\">{{ formatAnswer(question, question.correctAnswer) }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"explanation-box\" :class=\"{ 'correct': question.isCorrect, 'incorrect': !question.isCorrect }\">\r\n            <p class=\"explanation-label\">Explanation:</p>\r\n            <p class=\"explanation-text\">{{ generateExplanation(question, question.isCorrect) }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"button-group\">\r\n      <button @click=\"$emit('restart')\" class=\"restart-btn\">Redo Quiz</button>\r\n      <button @click=\"$emit('go-back')\" class=\"back-btn\">Back to Main</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  predictedScore: {\r\n    type: Number,\r\n    required: false,\r\n    default: null\r\n  }\r\n});\r\n\r\ndefineEmits(['restart', 'go-back']);\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\nconst scorePercentage = computed(() => {\r\n  return Math.round((props.score / totalQuestions.value) * 100);\r\n});\r\nconst scoreClass = computed(() => {\r\n  return scorePercentage.value >= 75 ? 'passing' : 'failing';\r\n});\r\n\r\nfunction formatAnswer(question, answer) {\r\n  if (!answer && answer !== false) return 'Not answered';\r\n  \r\n  if (question.type === 'multiple-choice') {\r\n    const optionText = question.options[answer];\r\n    return optionText ? `${answer}) ${optionText}` : answer;\r\n  } else if (question.type === 'true-false') {\r\n    // Handle both string and boolean values\r\n    const value = String(answer).toLowerCase();\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n  }\r\n  return answer;\r\n}\r\n\r\nfunction rephraseContent(text, isSupporting, question) {\r\n  // Clean the text of personal info and formatting\r\n  let cleaned = text.trim()\r\n    .replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '')\r\n    .replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '')\r\n    .replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '')\r\n    .replace(/\\d{4}\\s*\\d{4}/g, '')\r\n    .replace(/\\([^)]*\\)/g, '')\r\n    .replace(/\\[[^\\]]*\\]/g, '')\r\n    .trim();\r\n\r\n  // Extract source material context if available\r\n  const sourceMaterial = question.sourceMaterial || cleaned;\r\n  const sourceContext = question.sourceContext || '';\r\n  \r\n  // Analyze the question content and source material\r\n  const questionLower = question.text.toLowerCase();\r\n  const correctAnswer = question.type === 'multiple-choice' \r\n    ? question.options[question.correctAnswer].toLowerCase()\r\n    : String(question.correctAnswer).toLowerCase();\r\n\r\n  // Get specific keywords from the question and answers\r\n  const questionKeywords = questionLower\r\n    .replace(/[.,?!]/g, '')\r\n    .split(/\\s+/)\r\n    .filter(word => word.length > 3)\r\n    .filter(word => !['what', 'which', 'when', 'where', 'why', 'how', 'does', 'did', 'will', 'should', 'could', 'would', 'this', 'that', 'these', 'those', 'have', 'has', 'had'].includes(word));\r\n\r\n  const correctAnswerKeywords = correctAnswer\r\n    .replace(/[.,?!]/g, '')\r\n    .split(/\\s+/)\r\n    .filter(word => word.length > 3);\r\n\r\n  const userAnswerKeywords = question.type === 'multiple-choice' && question.userAnswer !== undefined\r\n    ? question.options[question.userAnswer].toLowerCase()\r\n        .replace(/[.,?!]/g, '')\r\n        .split(/\\s+/)\r\n        .filter(word => word.length > 3)\r\n    : [];\r\n\r\n  // Combine all relevant keywords\r\n  const allKeywords = [...new Set([...questionKeywords, ...correctAnswerKeywords, ...userAnswerKeywords])];\r\n\r\n  // Find the most relevant sentence from the source material\r\n  function findRelevantContext(text, keywords) {\r\n    if (!text) return '';\r\n    \r\n    // Split into sentences and clean them\r\n    const sentences = text.split(/[.!?]+/)\r\n      .map(s => s.trim())\r\n      .filter(s => s.length > 0);\r\n\r\n    // Score each sentence based on keyword matches\r\n    const scoredSentences = sentences.map(sentence => {\r\n      const sentenceLower = sentence.toLowerCase();\r\n      const matchCount = keywords.reduce((count, keyword) => {\r\n        return count + (sentenceLower.includes(keyword.toLowerCase()) ? 1 : 0);\r\n      }, 0);\r\n      return { sentence, score: matchCount };\r\n    });\r\n\r\n    // Sort by score and get the most relevant sentences (max 2)\r\n    const relevantSentences = scoredSentences\r\n      .filter(item => item.score > 0)\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 2)\r\n      .map(item => item.sentence);\r\n\r\n    return relevantSentences.join('. ');\r\n  }\r\n\r\n  // Generate explanation based on the specific question and answer\r\n  function generateSpecificExplanation() {\r\n    const relevantContext = findRelevantContext(sourceContext || sourceMaterial, allKeywords);\r\n    \r\n    if (isSupporting) {\r\n      if (relevantContext) {\r\n        return `Correct! ${relevantContext}`;\r\n      }\r\n      return 'Correct! This aligns with the course material.';\r\n    } else {\r\n      const correctPart = question.type === 'multiple-choice'\r\n        ? `The correct answer is \"${question.options[question.correctAnswer]}\". `\r\n        : `The correct answer is ${question.correctAnswer}. `;\r\n        \r\n      if (relevantContext) {\r\n        return `${correctPart}Here's why: ${relevantContext}`;\r\n      }\r\n      return `${correctPart}Please review this topic in the course material.`;\r\n    }\r\n  }\r\n\r\n  // Generate the explanation\r\n  let explanation = generateSpecificExplanation();\r\n\r\n  // Add specific feedback for incorrect multiple choice answers\r\n  if (question.type === 'multiple-choice' && !isSupporting && question.userAnswer !== undefined) {\r\n    const userChoice = question.options[question.userAnswer];\r\n    explanation += ` You selected \"${userChoice}\", which is incorrect.`;\r\n  }\r\n\r\n  return explanation;\r\n}\r\n\r\nfunction generateExplanation(question, isCorrect) {\r\n  const explanation = question.explanation || '';\r\n  if (!explanation) return \"No explanation available.\";\r\n\r\n  if (question.type === 'multiple-choice') {\r\n    return generateMultipleChoiceExplanation(question, isCorrect);\r\n  } else {\r\n    return generateTrueFalseExplanation(question, isCorrect);\r\n  }\r\n}\r\n\r\nfunction generateMultipleChoiceExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userOption = question.options[question.userAnswer];\r\n  const correctOption = question.options[question.correctAnswer];\r\n  \r\n  // Compare the chosen answer with the correct one to explain the difference\r\n  const explanation = `While \"${userOption}\" might seem reasonable, it's not the complete picture. ${rephraseContent(question.explanation, false, question)} The correct answer, \"${correctOption}\", better reflects the full scope of the position.`;\r\n  \r\n  return explanation;\r\n}\r\n\r\nfunction generateTrueFalseExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userChoice = question.userAnswer ? 'true' : 'false';\r\n  const correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\r\n  \r\n  // Explain why their understanding needs adjustment\r\n  return `Your understanding needs a slight adjustment. While you marked this as ${userChoice}, ${rephraseContent(question.explanation, false, question)} This is why the statement is actually ${correctChoice}.`;\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 800px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.score-display.passing {\r\n  background-color: #e8f5e9;\r\n  border: 3px solid #4CAF50;\r\n}\r\n\r\n.score-display.failing {\r\n  background-color: #ffebee;\r\n  border: 3px solid #f44336;\r\n}\r\n\r\n.score-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-main {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-value {\r\n  font-size: 4rem;\r\n  line-height: 1;\r\n  font-weight: 800;\r\n}\r\n\r\n.score-separator {\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n}\r\n\r\n.score-total {\r\n  font-size: 2.5rem;\r\n  opacity: 0.7;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.8rem;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.score-comparison {\r\n  margin: 1.5rem 0;\r\n  padding: 1.5rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n}\r\n\r\n.comparison-text {\r\n  margin-top: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-text.success {\r\n  color: #4CAF50;\r\n}\r\n\r\n.comparison-text.neutral {\r\n  color: #666;\r\n}\r\n\r\n.comparison-text.warning {\r\n  color: #f44336;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n}\r\n\r\n.result-item {\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.question-number {\r\n  font-weight: 600;\r\n  color: #666;\r\n}\r\n\r\n.result-status {\r\n  padding: 0.4rem 1rem;\r\n  border-radius: 20px;\r\n  font-weight: 600;\r\n}\r\n\r\n.result-status.correct {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.result-status.wrong {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.question-text {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  margin-bottom: 1rem;\r\n  line-height: 1.4;\r\n}\r\n\r\n.answer-details {\r\n  background-color: #fff;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.answer-details.incorrect {\r\n  border-color: #ffcdd2;\r\n  background-color: #fff5f5;\r\n}\r\n\r\n.answer-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-answer, .correct-answer {\r\n  padding: 1rem;\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.user-answer strong, .correct-answer strong {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.incorrect-text {\r\n  color: #d32f2f;\r\n}\r\n\r\n.correct-text {\r\n  color: #2e7d32;\r\n}\r\n\r\n.explanation-box {\r\n  margin-top: 1.5rem;\r\n  padding: 1.5rem;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.explanation-box.correct {\r\n  border-left: 4px solid #4CAF50;\r\n}\r\n\r\n.explanation-box.incorrect {\r\n  border-left: 4px solid #ff9800;\r\n}\r\n\r\n.explanation-label {\r\n  font-weight: 600;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.explanation-label.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.explanation-label.incorrect {\r\n  color: #f57c00;\r\n}\r\n\r\n.explanation-text {\r\n  color: #333;\r\n  line-height: 1.6;\r\n  margin: 0;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: center;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.button-group button {\r\n  padding: 0.8rem 2rem;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.restart-btn {\r\n  background: #4CAF50;\r\n}\r\n\r\n.restart-btn:hover {\r\n  background: #388e3c;\r\n}\r\n\r\n.back-btn {\r\n  background: #666;\r\n}\r\n\r\n.back-btn:hover {\r\n  background: #555;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}