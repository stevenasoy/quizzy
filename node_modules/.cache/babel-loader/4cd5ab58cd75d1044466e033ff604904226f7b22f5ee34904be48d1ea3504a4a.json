{"ast":null,"code":"import { computed } from 'vue';\nexport default {\n  __name: 'QuizResults',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    },\n    userAnswers: {\n      type: Array,\n      required: true\n    },\n    score: {\n      type: Number,\n      required: true\n    },\n    predictedScore: {\n      type: Number,\n      required: false,\n      default: null\n    }\n  },\n  emits: ['restart', 'go-back'],\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const totalQuestions = computed(() => props.questions.length);\n    const scorePercentage = computed(() => {\n      return Math.round(props.score / totalQuestions.value * 100);\n    });\n    const scoreClass = computed(() => {\n      return scorePercentage.value >= 75 ? 'passing' : 'failing';\n    });\n    function formatAnswer(question, answer) {\n      if (!answer && answer !== false) return 'Not answered';\n      if (question.type === 'multiple-choice') {\n        const optionText = question.options[answer];\n        return optionText ? `${answer}) ${optionText}` : answer;\n      } else if (question.type === 'true-false') {\n        // Handle both string and boolean values\n        const value = String(answer).toLowerCase();\n        return value.charAt(0).toUpperCase() + value.slice(1);\n      }\n      return answer;\n    }\n    function rephraseContent(text, isSupporting, question) {\n      // Clean the text of personal info and formatting\n      let cleaned = text.trim().replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '').replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '').replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '').replace(/\\d{4}\\s*\\d{4}/g, '').replace(/\\([^)]*\\)/g, '').replace(/\\[[^\\]]*\\]/g, '').trim();\n\n      // Extract source material context if available\n      const sourceMaterial = question.sourceMaterial || cleaned;\n      const sourceContext = question.sourceContext || '';\n\n      // Analyze the question content and source material\n      const questionLower = question.text.toLowerCase();\n      const correctAnswer = question.type === 'multiple-choice' ? question.options[question.correctAnswer].toLowerCase() : String(question.correctAnswer).toLowerCase();\n\n      // Enhanced theme patterns with more comprehensive keywords\n      const themes = {\n        academic: /\\b(academic|education|study|learning|course|curriculum|program|class|lecture|teach|subject|grade|assessment|exam|quiz|test)\\b/i,\n        administrative: /\\b(manage|administration|organize|coordinate|supervise|oversee|direct|lead|conduct|implement|execute|plan|arrange)\\b/i,\n        policy: /\\b(policy|regulation|rule|guideline|requirement|standard|procedure|protocol|process|method|approach|strategy)\\b/i,\n        student: /\\b(student|learner|participant|enrollment|attendance|performance|achievement|development|progress|growth|success)\\b/i,\n        faculty: /\\b(faculty|teacher|instructor|staff|professor|educator|mentor|advisor|specialist|professional|expert)\\b/i,\n        resource: /\\b(resource|facility|equipment|material|tool|technology|system|platform|infrastructure|support|aid|assistance)\\b/i\n      };\n\n      // Get specific keywords from the question and correct answer\n      const questionKeywords = questionLower.match(/\\b\\w+\\b/g) || [];\n      const answerKeywords = correctAnswer.match(/\\b\\w+\\b/g) || [];\n      const allKeywords = [...new Set([...questionKeywords, ...answerKeywords])];\n\n      // Determine themes present in the content\n      const matchedThemes = Object.entries(themes).filter(([, pattern]) => {\n        const inQuestion = pattern.test(questionLower);\n        const inAnswer = pattern.test(correctAnswer);\n        const inSource = pattern.test(sourceMaterial.toLowerCase());\n        return inQuestion || inAnswer || inSource;\n      }).map(([theme]) => theme);\n\n      // If no themes matched, try to extract key concepts\n      if (matchedThemes.length === 0) {\n        const keyConcepts = allKeywords.filter(word => word.length > 3 && !['what', 'which', 'when', 'where', 'why', 'how', 'does', 'did', 'will', 'should', 'could', 'would'].includes(word));\n        if (keyConcepts.length > 0) {\n          matchedThemes.push('concept');\n          themes.concept = new RegExp(`\\\\b(${keyConcepts.join('|')})\\\\b`, 'i');\n        }\n      }\n\n      // Extract relevant source material sentences with improved context\n      function getRelevantSourceContext(text) {\n        if (!text) return '';\n\n        // Split into sentences and clean them\n        const sentences = text.split(/[.!?]+/).map(s => s.trim()).filter(s => s.length > 0);\n\n        // Find sentences that match themes or contain question/answer keywords\n        const relevantSentences = sentences.filter(sentence => {\n          const sentenceLower = sentence.toLowerCase();\n          return matchedThemes.some(theme => themes[theme].test(sentenceLower)) || allKeywords.some(keyword => sentenceLower.includes(keyword.toLowerCase()));\n        });\n        return relevantSentences.join('. ');\n      }\n\n      // Generate theme-specific explanations using source material\n      function getThemeExplanation() {\n        const relevantContext = getRelevantSourceContext(sourceContext || sourceMaterial);\n\n        // If we have relevant context, use it\n        if (relevantContext) {\n          if (isSupporting) {\n            return `This is correct. ${relevantContext}`;\n          } else {\n            const correctPart = question.type === 'multiple-choice' ? `The correct answer is \"${question.options[question.correctAnswer]}\". ` : `The correct answer is ${question.correctAnswer}. `;\n            return `${correctPart}${relevantContext}`;\n          }\n        }\n\n        // If no relevant context, generate based on themes\n        const themeExplanations = matchedThemes.map(theme => {\n          switch (theme) {\n            case 'academic':\n              return isSupporting ? 'This demonstrates understanding of the academic concepts covered.' : 'Review the academic concepts in the course material.';\n            case 'administrative':\n              return isSupporting ? 'This shows knowledge of administrative procedures.' : 'Consider the administrative aspects discussed.';\n            case 'policy':\n              return isSupporting ? 'This aligns with the policies covered.' : 'Review the policy guidelines provided.';\n            case 'student':\n              return isSupporting ? 'This relates to student development aspects discussed.' : 'Focus on the student-related content covered.';\n            case 'faculty':\n              return isSupporting ? 'This shows understanding of faculty roles.' : 'Review the faculty responsibilities covered.';\n            case 'resource':\n              return isSupporting ? 'This demonstrates knowledge of resource management.' : 'Consider the resource allocation aspects discussed.';\n            case 'concept':\n              return isSupporting ? `This shows understanding of ${allKeywords.join(', ')}.` : `Review the material covering ${allKeywords.join(', ')}.`;\n            default:\n              return isSupporting ? 'This answer aligns with the course material.' : 'Review the relevant section in the course material.';\n          }\n        });\n        return themeExplanations.join(' ');\n      }\n\n      // Generate the base explanation\n      let explanation = getThemeExplanation();\n\n      // Add specific answer feedback for multiple choice\n      if (question.type === 'multiple-choice' && !isSupporting) {\n        const userChoice = question.options[question.userAnswer];\n        explanation += ` You selected \"${userChoice}\", but this isn't quite right.`;\n      }\n      return explanation;\n    }\n    function generateExplanation(question, isCorrect) {\n      const explanation = question.explanation || '';\n      if (!explanation) return \"No explanation available.\";\n      if (question.type === 'multiple-choice') {\n        return generateMultipleChoiceExplanation(question, isCorrect);\n      } else {\n        return generateTrueFalseExplanation(question, isCorrect);\n      }\n    }\n    function generateMultipleChoiceExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      const userOption = question.options[question.userAnswer];\n      const correctOption = question.options[question.correctAnswer];\n\n      // Compare the chosen answer with the correct one to explain the difference\n      const explanation = `While \"${userOption}\" might seem reasonable, it's not the complete picture. ${rephraseContent(question.explanation, false, question)} The correct answer, \"${correctOption}\", better reflects the full scope of the position.`;\n      return explanation;\n    }\n    function generateTrueFalseExplanation(question, isCorrect) {\n      if (isCorrect) {\n        return rephraseContent(question.explanation, true, question);\n      }\n      const userChoice = question.userAnswer ? 'true' : 'false';\n      const correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\n\n      // Explain why their understanding needs adjustment\n      return `Your understanding needs a slight adjustment. While you marked this as ${userChoice}, ${rephraseContent(question.explanation, false, question)} This is why the statement is actually ${correctChoice}.`;\n    }\n    const __returned__ = {\n      props,\n      totalQuestions,\n      scorePercentage,\n      scoreClass,\n      formatAnswer,\n      rephraseContent,\n      generateExplanation,\n      generateMultipleChoiceExplanation,\n      generateTrueFalseExplanation,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","props","__props","totalQuestions","questions","length","scorePercentage","Math","round","score","value","scoreClass","formatAnswer","question","answer","type","optionText","options","String","toLowerCase","charAt","toUpperCase","slice","rephraseContent","text","isSupporting","cleaned","trim","replace","sourceMaterial","sourceContext","questionLower","correctAnswer","themes","academic","administrative","policy","student","faculty","resource","questionKeywords","match","answerKeywords","allKeywords","Set","matchedThemes","Object","entries","filter","pattern","inQuestion","test","inAnswer","inSource","map","theme","keyConcepts","word","includes","push","concept","RegExp","join","getRelevantSourceContext","sentences","split","s","relevantSentences","sentence","sentenceLower","some","keyword","getThemeExplanation","relevantContext","correctPart","themeExplanations","explanation","userChoice","userAnswer","generateExplanation","isCorrect","generateMultipleChoiceExplanation","generateTrueFalseExplanation","userOption","correctOption","correctChoice"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <div class=\"score-display\" :class=\"scoreClass\">\r\n      <div class=\"score-container\">\r\n        <div class=\"score-main\">\r\n          <span class=\"score-value\">{{ score }}</span>\r\n          <span class=\"score-separator\">/</span>\r\n          <span class=\"score-total\">{{ totalQuestions }}</span>\r\n        </div>\r\n        <div class=\"score-percentage\">({{ scorePercentage }}%)</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"score-comparison\" v-if=\"predictedScore\">\r\n      <p>You scored {{ scorePercentage }}%. Predicted score was {{ predictedScore }}%.</p>\r\n      <p v-if=\"scorePercentage >= predictedScore + 10\" class=\"comparison-text success\">\r\n        You outperformed the prediction! Great job!\r\n      </p>\r\n      <p v-else-if=\"scorePercentage >= predictedScore - 10\" class=\"comparison-text neutral\">\r\n        You were close to the prediction!\r\n      </p>\r\n      <p v-else class=\"comparison-text warning\">\r\n        You scored below the prediction. Review the material for improvement.\r\n      </p>\r\n    </div>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Question {{ index + 1 }}</span>\r\n          <span :class=\"['result-status', question.isCorrect ? 'correct' : 'wrong']\">\r\n            {{ question.isCorrect ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\" :class=\"{ 'incorrect': !question.isCorrect }\">\r\n          <div class=\"answer-row\">\r\n            <div class=\"user-answer\">\r\n              <strong>Your answer:</strong> \r\n              <span :class=\"{ 'incorrect-text': !question.isCorrect }\">\r\n                {{ formatAnswer(question, question.userAnswer) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"correct-answer\">\r\n              <strong>Correct answer:</strong>\r\n              <span class=\"correct-text\">{{ formatAnswer(question, question.correctAnswer) }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"explanation-box\" :class=\"{ 'correct': question.isCorrect, 'incorrect': !question.isCorrect }\">\r\n            <p class=\"explanation-label\">Explanation:</p>\r\n            <p class=\"explanation-text\">{{ generateExplanation(question, question.isCorrect) }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"button-group\">\r\n      <button @click=\"$emit('restart')\" class=\"restart-btn\">Redo Quiz</button>\r\n      <button @click=\"$emit('go-back')\" class=\"back-btn\">Back to Main</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  predictedScore: {\r\n    type: Number,\r\n    required: false,\r\n    default: null\r\n  }\r\n});\r\n\r\ndefineEmits(['restart', 'go-back']);\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\nconst scorePercentage = computed(() => {\r\n  return Math.round((props.score / totalQuestions.value) * 100);\r\n});\r\nconst scoreClass = computed(() => {\r\n  return scorePercentage.value >= 75 ? 'passing' : 'failing';\r\n});\r\n\r\nfunction formatAnswer(question, answer) {\r\n  if (!answer && answer !== false) return 'Not answered';\r\n  \r\n  if (question.type === 'multiple-choice') {\r\n    const optionText = question.options[answer];\r\n    return optionText ? `${answer}) ${optionText}` : answer;\r\n  } else if (question.type === 'true-false') {\r\n    // Handle both string and boolean values\r\n    const value = String(answer).toLowerCase();\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n  }\r\n  return answer;\r\n}\r\n\r\nfunction rephraseContent(text, isSupporting, question) {\r\n  // Clean the text of personal info and formatting\r\n  let cleaned = text.trim()\r\n    .replace(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi, '')\r\n    .replace(/\\+\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{4}/g, '')\r\n    .replace(/\\d{4}\\s*\\+\\d{2}\\s*\\d{3}\\s*\\d{3}/g, '')\r\n    .replace(/\\d{4}\\s*\\d{4}/g, '')\r\n    .replace(/\\([^)]*\\)/g, '')\r\n    .replace(/\\[[^\\]]*\\]/g, '')\r\n    .trim();\r\n\r\n  // Extract source material context if available\r\n  const sourceMaterial = question.sourceMaterial || cleaned;\r\n  const sourceContext = question.sourceContext || '';\r\n  \r\n  // Analyze the question content and source material\r\n  const questionLower = question.text.toLowerCase();\r\n  const correctAnswer = question.type === 'multiple-choice' \r\n    ? question.options[question.correctAnswer].toLowerCase()\r\n    : String(question.correctAnswer).toLowerCase();\r\n\r\n  // Enhanced theme patterns with more comprehensive keywords\r\n  const themes = {\r\n    academic: /\\b(academic|education|study|learning|course|curriculum|program|class|lecture|teach|subject|grade|assessment|exam|quiz|test)\\b/i,\r\n    administrative: /\\b(manage|administration|organize|coordinate|supervise|oversee|direct|lead|conduct|implement|execute|plan|arrange)\\b/i,\r\n    policy: /\\b(policy|regulation|rule|guideline|requirement|standard|procedure|protocol|process|method|approach|strategy)\\b/i,\r\n    student: /\\b(student|learner|participant|enrollment|attendance|performance|achievement|development|progress|growth|success)\\b/i,\r\n    faculty: /\\b(faculty|teacher|instructor|staff|professor|educator|mentor|advisor|specialist|professional|expert)\\b/i,\r\n    resource: /\\b(resource|facility|equipment|material|tool|technology|system|platform|infrastructure|support|aid|assistance)\\b/i\r\n  };\r\n\r\n  // Get specific keywords from the question and correct answer\r\n  const questionKeywords = questionLower.match(/\\b\\w+\\b/g) || [];\r\n  const answerKeywords = correctAnswer.match(/\\b\\w+\\b/g) || [];\r\n  const allKeywords = [...new Set([...questionKeywords, ...answerKeywords])];\r\n\r\n  // Determine themes present in the content\r\n  const matchedThemes = Object.entries(themes)\r\n    .filter(([, pattern]) => {\r\n      const inQuestion = pattern.test(questionLower);\r\n      const inAnswer = pattern.test(correctAnswer);\r\n      const inSource = pattern.test(sourceMaterial.toLowerCase());\r\n      return inQuestion || inAnswer || inSource;\r\n    })\r\n    .map(([theme]) => theme);\r\n\r\n  // If no themes matched, try to extract key concepts\r\n  if (matchedThemes.length === 0) {\r\n    const keyConcepts = allKeywords.filter(word => \r\n      word.length > 3 && \r\n      !['what', 'which', 'when', 'where', 'why', 'how', 'does', 'did', 'will', 'should', 'could', 'would'].includes(word)\r\n    );\r\n    if (keyConcepts.length > 0) {\r\n      matchedThemes.push('concept');\r\n      themes.concept = new RegExp(`\\\\b(${keyConcepts.join('|')})\\\\b`, 'i');\r\n    }\r\n  }\r\n\r\n  // Extract relevant source material sentences with improved context\r\n  function getRelevantSourceContext(text) {\r\n    if (!text) return '';\r\n    \r\n    // Split into sentences and clean them\r\n    const sentences = text.split(/[.!?]+/)\r\n      .map(s => s.trim())\r\n      .filter(s => s.length > 0);\r\n\r\n    // Find sentences that match themes or contain question/answer keywords\r\n    const relevantSentences = sentences.filter(sentence => {\r\n      const sentenceLower = sentence.toLowerCase();\r\n      return matchedThemes.some(theme => themes[theme].test(sentenceLower)) ||\r\n             allKeywords.some(keyword => sentenceLower.includes(keyword.toLowerCase()));\r\n    });\r\n\r\n    return relevantSentences.join('. ');\r\n  }\r\n\r\n  // Generate theme-specific explanations using source material\r\n  function getThemeExplanation() {\r\n    const relevantContext = getRelevantSourceContext(sourceContext || sourceMaterial);\r\n    \r\n    // If we have relevant context, use it\r\n    if (relevantContext) {\r\n      if (isSupporting) {\r\n        return `This is correct. ${relevantContext}`;\r\n      } else {\r\n        const correctPart = question.type === 'multiple-choice'\r\n          ? `The correct answer is \"${question.options[question.correctAnswer]}\". `\r\n          : `The correct answer is ${question.correctAnswer}. `;\r\n        return `${correctPart}${relevantContext}`;\r\n      }\r\n    }\r\n\r\n    // If no relevant context, generate based on themes\r\n    const themeExplanations = matchedThemes.map(theme => {\r\n      switch(theme) {\r\n        case 'academic':\r\n          return isSupporting\r\n            ? 'This demonstrates understanding of the academic concepts covered.'\r\n            : 'Review the academic concepts in the course material.';\r\n        case 'administrative':\r\n          return isSupporting\r\n            ? 'This shows knowledge of administrative procedures.'\r\n            : 'Consider the administrative aspects discussed.';\r\n        case 'policy':\r\n          return isSupporting\r\n            ? 'This aligns with the policies covered.'\r\n            : 'Review the policy guidelines provided.';\r\n        case 'student':\r\n          return isSupporting\r\n            ? 'This relates to student development aspects discussed.'\r\n            : 'Focus on the student-related content covered.';\r\n        case 'faculty':\r\n          return isSupporting\r\n            ? 'This shows understanding of faculty roles.'\r\n            : 'Review the faculty responsibilities covered.';\r\n        case 'resource':\r\n          return isSupporting\r\n            ? 'This demonstrates knowledge of resource management.'\r\n            : 'Consider the resource allocation aspects discussed.';\r\n        case 'concept':\r\n          return isSupporting\r\n            ? `This shows understanding of ${allKeywords.join(', ')}.`\r\n            : `Review the material covering ${allKeywords.join(', ')}.`;\r\n        default:\r\n          return isSupporting\r\n            ? 'This answer aligns with the course material.'\r\n            : 'Review the relevant section in the course material.';\r\n      }\r\n    });\r\n\r\n    return themeExplanations.join(' ');\r\n  }\r\n\r\n  // Generate the base explanation\r\n  let explanation = getThemeExplanation();\r\n\r\n  // Add specific answer feedback for multiple choice\r\n  if (question.type === 'multiple-choice' && !isSupporting) {\r\n    const userChoice = question.options[question.userAnswer];\r\n    explanation += ` You selected \"${userChoice}\", but this isn't quite right.`;\r\n  }\r\n\r\n  return explanation;\r\n}\r\n\r\nfunction generateExplanation(question, isCorrect) {\r\n  const explanation = question.explanation || '';\r\n  if (!explanation) return \"No explanation available.\";\r\n\r\n  if (question.type === 'multiple-choice') {\r\n    return generateMultipleChoiceExplanation(question, isCorrect);\r\n  } else {\r\n    return generateTrueFalseExplanation(question, isCorrect);\r\n  }\r\n}\r\n\r\nfunction generateMultipleChoiceExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userOption = question.options[question.userAnswer];\r\n  const correctOption = question.options[question.correctAnswer];\r\n  \r\n  // Compare the chosen answer with the correct one to explain the difference\r\n  const explanation = `While \"${userOption}\" might seem reasonable, it's not the complete picture. ${rephraseContent(question.explanation, false, question)} The correct answer, \"${correctOption}\", better reflects the full scope of the position.`;\r\n  \r\n  return explanation;\r\n}\r\n\r\nfunction generateTrueFalseExplanation(question, isCorrect) {\r\n  if (isCorrect) {\r\n    return rephraseContent(question.explanation, true, question);\r\n  }\r\n\r\n  const userChoice = question.userAnswer ? 'true' : 'false';\r\n  const correctChoice = question.correctAnswer === 'true' ? 'true' : 'false';\r\n  \r\n  // Explain why their understanding needs adjustment\r\n  return `Your understanding needs a slight adjustment. While you marked this as ${userChoice}, ${rephraseContent(question.explanation, false, question)} This is why the statement is actually ${correctChoice}.`;\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 800px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n}\r\n\r\n.score-display {\r\n  margin: 2rem 0;\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.score-display.passing {\r\n  background-color: #e8f5e9;\r\n  border: 3px solid #4CAF50;\r\n}\r\n\r\n.score-display.failing {\r\n  background-color: #ffebee;\r\n  border: 3px solid #f44336;\r\n}\r\n\r\n.score-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-main {\r\n  display: flex;\r\n  align-items: baseline;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.score-value {\r\n  font-size: 4rem;\r\n  line-height: 1;\r\n  font-weight: 800;\r\n}\r\n\r\n.score-separator {\r\n  font-size: 3rem;\r\n  opacity: 0.5;\r\n}\r\n\r\n.score-total {\r\n  font-size: 2.5rem;\r\n  opacity: 0.7;\r\n}\r\n\r\n.score-percentage {\r\n  font-size: 1.8rem;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.score-comparison {\r\n  margin: 1.5rem 0;\r\n  padding: 1.5rem;\r\n  background-color: #f5f5f5;\r\n  border-radius: 8px;\r\n}\r\n\r\n.comparison-text {\r\n  margin-top: 0.5rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.comparison-text.success {\r\n  color: #4CAF50;\r\n}\r\n\r\n.comparison-text.neutral {\r\n  color: #666;\r\n}\r\n\r\n.comparison-text.warning {\r\n  color: #f44336;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n}\r\n\r\n.result-item {\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 1.5rem;\r\n  margin-bottom: 1.5rem;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.05);\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.question-number {\r\n  font-weight: 600;\r\n  color: #666;\r\n}\r\n\r\n.result-status {\r\n  padding: 0.4rem 1rem;\r\n  border-radius: 20px;\r\n  font-weight: 600;\r\n}\r\n\r\n.result-status.correct {\r\n  background-color: #e8f5e9;\r\n  color: #2e7d32;\r\n}\r\n\r\n.result-status.wrong {\r\n  background-color: #ffebee;\r\n  color: #c62828;\r\n}\r\n\r\n.question-text {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  margin-bottom: 1rem;\r\n  line-height: 1.4;\r\n}\r\n\r\n.answer-details {\r\n  background-color: #fff;\r\n  padding: 1.5rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.answer-details.incorrect {\r\n  border-color: #ffcdd2;\r\n  background-color: #fff5f5;\r\n}\r\n\r\n.answer-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-answer, .correct-answer {\r\n  padding: 1rem;\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.user-answer strong, .correct-answer strong {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.incorrect-text {\r\n  color: #d32f2f;\r\n}\r\n\r\n.correct-text {\r\n  color: #2e7d32;\r\n}\r\n\r\n.explanation-box {\r\n  margin-top: 1.5rem;\r\n  padding: 1.5rem;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.explanation-box.correct {\r\n  border-left: 4px solid #4CAF50;\r\n}\r\n\r\n.explanation-box.incorrect {\r\n  border-left: 4px solid #ff9800;\r\n}\r\n\r\n.explanation-label {\r\n  font-weight: 600;\r\n  margin-bottom: 0.75rem;\r\n  font-size: 0.9rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.explanation-label.correct {\r\n  color: #4CAF50;\r\n}\r\n\r\n.explanation-label.incorrect {\r\n  color: #f57c00;\r\n}\r\n\r\n.explanation-text {\r\n  color: #333;\r\n  line-height: 1.6;\r\n  margin: 0;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: center;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.button-group button {\r\n  padding: 0.8rem 2rem;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.restart-btn {\r\n  background: #4CAF50;\r\n}\r\n\r\n.restart-btn:hover {\r\n  background: #388e3c;\r\n}\r\n\r\n.back-btn {\r\n  background: #666;\r\n}\r\n\r\n.back-btn:hover {\r\n  background: #555;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}