{"ast":null,"code":"import _toConsumableArray from \"C:/Users/StevenJakeASOY/Documents/cursor-projects/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport { ref, computed } from 'vue';\nimport FlashcardQuiz from './FlashcardQuiz.vue';\nimport { getDueQuestions, getReviewForecast } from '../algorithms/spaced-repetition';\nexport default {\n  __name: 'SpacedReviewSession',\n  props: {\n    questions: {\n      type: Array,\n      required: true\n    }\n  },\n  emits: ['close', 'update-questions'],\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose,\n      __emit = _ref.emit;\n    __expose();\n    var props = __props;\n    var emit = __emit;\n\n    // Session state\n    var started = ref(false);\n    var completed = ref(false);\n    var startTime = ref(null);\n    var sessionStats = ref({\n      accuracy: 0,\n      timeSpent: '0:00',\n      cardsReviewed: 0\n    });\n\n    // Get due questions\n    var dueQuestions = computed(function () {\n      return getDueQuestions(props.questions);\n    });\n\n    // Estimate review time (30 seconds per question)\n    var estimatedTime = computed(function () {\n      var minutes = Math.ceil(dueQuestions.value.length * 30 / 60);\n      return \"\".concat(minutes, \" min\").concat(minutes !== 1 ? 's' : '');\n    });\n\n    // Start the review session\n    var startSession = function startSession() {\n      started.value = true;\n      startTime.value = new Date();\n    };\n\n    // Handle question updates during the quiz\n    var handleQuestionUpdate = function handleQuestionUpdate(updatedQuestion) {\n      var questions = _toConsumableArray(props.questions);\n      var index = questions.findIndex(function (q) {\n        return q.id === updatedQuestion.id;\n      });\n      if (index !== -1) {\n        questions[index] = updatedQuestion;\n        emit('update-questions', questions);\n      }\n    };\n\n    // Calculate next review dates\n    var nextReviews = computed(function () {\n      var forecast = getReviewForecast(props.questions);\n      var days = ['Today', 'Tomorrow'].concat(_toConsumableArray(Array(5).fill().map(function (_, i) {\n        var date = new Date();\n        date.setDate(date.getDate() + i + 2);\n        return date.toLocaleDateString('en-US', {\n          weekday: 'short'\n        });\n      })));\n      return days.reduce(function (acc, day, index) {\n        if (forecast[index] > 0) {\n          acc[day] = forecast[index];\n        }\n        return acc;\n      }, {});\n    });\n\n    // Handle session completion\n    var handleComplete = function handleComplete(results) {\n      completed.value = true;\n\n      // Calculate time spent\n      var endTime = new Date();\n      var timeSpent = Math.floor((endTime - startTime.value) / 1000); // in seconds\n      var minutes = Math.floor(timeSpent / 60);\n      var seconds = timeSpent % 60;\n      sessionStats.value = {\n        accuracy: Math.round(results.score / results.total * 100),\n        timeSpent: \"\".concat(minutes, \":\").concat(seconds.toString().padStart(2, '0')),\n        cardsReviewed: results.total\n      };\n    };\n    var __returned__ = {\n      props: props,\n      emit: emit,\n      started: started,\n      completed: completed,\n      startTime: startTime,\n      sessionStats: sessionStats,\n      dueQuestions: dueQuestions,\n      estimatedTime: estimatedTime,\n      startSession: startSession,\n      handleQuestionUpdate: handleQuestionUpdate,\n      nextReviews: nextReviews,\n      handleComplete: handleComplete,\n      ref: ref,\n      computed: computed,\n      FlashcardQuiz: FlashcardQuiz,\n      get getDueQuestions() {\n        return getDueQuestions;\n      },\n      get getReviewForecast() {\n        return getReviewForecast;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","FlashcardQuiz","getDueQuestions","getReviewForecast","props","__props","emit","__emit","started","completed","startTime","sessionStats","accuracy","timeSpent","cardsReviewed","dueQuestions","questions","estimatedTime","minutes","Math","ceil","value","length","concat","startSession","Date","handleQuestionUpdate","updatedQuestion","_toConsumableArray","index","findIndex","q","id","nextReviews","forecast","days","Array","fill","map","_","i","date","setDate","getDate","toLocaleDateString","weekday","reduce","acc","day","handleComplete","results","endTime","floor","seconds","round","score","total","toString","padStart"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/components/SpacedReviewSession.vue"],"sourcesContent":["<template>\r\n  <div class=\"spaced-review-session\">\r\n    <div v-if=\"!started\" class=\"session-intro\">\r\n      <h2>Review Session</h2>\r\n      <div class=\"stats\">\r\n        <div class=\"stat\">\r\n          <div class=\"stat-value\">{{ dueQuestions.length }}</div>\r\n          <div class=\"stat-label\">Questions Due</div>\r\n        </div>\r\n        <div class=\"stat\">\r\n          <div class=\"stat-value\">{{ estimatedTime }}</div>\r\n          <div class=\"stat-label\">Est. Time</div>\r\n        </div>\r\n      </div>\r\n      <button @click=\"startSession\" class=\"start-btn\">Start Review</button>\r\n    </div>\r\n\r\n    <FlashcardQuiz\r\n      v-else\r\n      :questions=\"dueQuestions\"\r\n      @complete=\"handleComplete\"\r\n      @update-question=\"handleQuestionUpdate\"\r\n    />\r\n\r\n    <div v-if=\"completed\" class=\"session-complete\">\r\n      <h2>Session Complete!</h2>\r\n      <div class=\"completion-stats\">\r\n        <div class=\"stat\">\r\n          <div class=\"stat-value\">{{ sessionStats.accuracy }}%</div>\r\n          <div class=\"stat-label\">Accuracy</div>\r\n        </div>\r\n        <div class=\"stat\">\r\n          <div class=\"stat-value\">{{ sessionStats.timeSpent }}</div>\r\n          <div class=\"stat-label\">Time Spent</div>\r\n        </div>\r\n        <div class=\"stat\">\r\n          <div class=\"stat-value\">{{ sessionStats.cardsReviewed }}</div>\r\n          <div class=\"stat-label\">Cards Reviewed</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"next-review-info\">\r\n        <h3>Next Reviews</h3>\r\n        <div class=\"next-review-grid\">\r\n          <div v-for=\"(count, day) in nextReviews\" :key=\"day\" class=\"next-review-day\">\r\n            <div class=\"day\">{{ day }}</div>\r\n            <div class=\"count\">{{ count }} cards</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button @click=\"$emit('close')\" class=\"close-btn\">Close</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport FlashcardQuiz from './FlashcardQuiz.vue';\r\nimport { getDueQuestions, getReviewForecast } from '../algorithms/spaced-repetition';\r\n\r\nconst props = defineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  }\r\n});\r\n\r\nconst emit = defineEmits(['close', 'update-questions']);\r\n\r\n// Session state\r\nconst started = ref(false);\r\nconst completed = ref(false);\r\nconst startTime = ref(null);\r\nconst sessionStats = ref({\r\n  accuracy: 0,\r\n  timeSpent: '0:00',\r\n  cardsReviewed: 0\r\n});\r\n\r\n// Get due questions\r\nconst dueQuestions = computed(() => getDueQuestions(props.questions));\r\n\r\n// Estimate review time (30 seconds per question)\r\nconst estimatedTime = computed(() => {\r\n  const minutes = Math.ceil((dueQuestions.value.length * 30) / 60);\r\n  return `${minutes} min${minutes !== 1 ? 's' : ''}`;\r\n});\r\n\r\n// Start the review session\r\nconst startSession = () => {\r\n  started.value = true;\r\n  startTime.value = new Date();\r\n};\r\n\r\n// Handle question updates during the quiz\r\nconst handleQuestionUpdate = (updatedQuestion) => {\r\n  const questions = [...props.questions];\r\n  const index = questions.findIndex(q => q.id === updatedQuestion.id);\r\n  if (index !== -1) {\r\n    questions[index] = updatedQuestion;\r\n    emit('update-questions', questions);\r\n  }\r\n};\r\n\r\n// Calculate next review dates\r\nconst nextReviews = computed(() => {\r\n  const forecast = getReviewForecast(props.questions);\r\n  const days = ['Today', 'Tomorrow', ...Array(5).fill().map((_, i) => {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() + i + 2);\r\n    return date.toLocaleDateString('en-US', { weekday: 'short' });\r\n  })];\r\n  \r\n  return days.reduce((acc, day, index) => {\r\n    if (forecast[index] > 0) {\r\n      acc[day] = forecast[index];\r\n    }\r\n    return acc;\r\n  }, {});\r\n});\r\n\r\n// Handle session completion\r\nconst handleComplete = (results) => {\r\n  completed.value = true;\r\n  \r\n  // Calculate time spent\r\n  const endTime = new Date();\r\n  const timeSpent = Math.floor((endTime - startTime.value) / 1000); // in seconds\r\n  const minutes = Math.floor(timeSpent / 60);\r\n  const seconds = timeSpent % 60;\r\n  \r\n  sessionStats.value = {\r\n    accuracy: Math.round((results.score / results.total) * 100),\r\n    timeSpent: `${minutes}:${seconds.toString().padStart(2, '0')}`,\r\n    cardsReviewed: results.total\r\n  };\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.spaced-review-session {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n}\r\n\r\n.session-intro {\r\n  text-align: center;\r\n}\r\n\r\n.stats {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 3rem;\r\n  margin: 2rem 0;\r\n}\r\n\r\n.stat {\r\n  text-align: center;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  color: #2196F3;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.stat-label {\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.start-btn, .close-btn {\r\n  background: #2196F3;\r\n  color: white;\r\n  border: none;\r\n  padding: 1rem 2rem;\r\n  border-radius: 8px;\r\n  font-size: 1.1rem;\r\n  cursor: pointer;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.start-btn:hover, .close-btn:hover {\r\n  background: #1976D2;\r\n}\r\n\r\n.session-complete {\r\n  text-align: center;\r\n}\r\n\r\n.completion-stats {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 3rem;\r\n  margin: 2rem 0;\r\n}\r\n\r\n.next-review-info {\r\n  margin: 2rem 0;\r\n}\r\n\r\n.next-review-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\r\n  gap: 1rem;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.next-review-day {\r\n  background: #f5f5f5;\r\n  padding: 1rem;\r\n  border-radius: 8px;\r\n}\r\n\r\n.next-review-day .day {\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.next-review-day .count {\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.close-btn {\r\n  margin-top: 2rem;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}