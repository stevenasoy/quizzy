{"ast":null,"code":"import { createElementVNode as _createElementVNode, withModifiers as _withModifiers, withKeys as _withKeys, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, normalizeClass as _normalizeClass, vModelRadio as _vModelRadio, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"upload-container\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"file-upload-section\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"error-section\"\n};\nconst _hoisted_5 = {\n  key: 1,\n  class: \"selected-files\"\n};\nconst _hoisted_6 = {\n  class: \"file-name\"\n};\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = {\n  class: \"questions-section\"\n};\nconst _hoisted_9 = {\n  class: \"question-input\"\n};\nconst _hoisted_10 = {\n  class: \"difficulty-section\"\n};\nconst _hoisted_11 = {\n  class: \"difficulty-selector\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = {\n  key: 1\n};\nconst _hoisted_14 = {\n  key: 2\n};\nconst _hoisted_15 = {\n  key: 0\n};\nconst _hoisted_16 = {\n  class: \"question-item\"\n};\nconst _hoisted_17 = {\n  key: 0,\n  class: \"options\"\n};\nconst _hoisted_18 = [\"onClick\", \"disabled\"];\nconst _hoisted_19 = {\n  key: 1,\n  class: \"options\"\n};\nconst _hoisted_20 = [\"onClick\", \"disabled\"];\nconst _hoisted_21 = {\n  key: 2,\n  class: \"feedback\"\n};\nconst _hoisted_22 = {\n  class: \"explanation\"\n};\nconst _hoisted_23 = {\n  key: 3\n};\nconst _hoisted_24 = {\n  key: 0\n};\nconst _hoisted_25 = {\n  key: 1\n};\nconst _hoisted_26 = {\n  key: 0\n};\nconst _hoisted_27 = {\n  key: 1\n};\nconst _hoisted_28 = {\n  key: 2\n};\nconst _hoisted_29 = {\n  key: 4,\n  class: \"error-message\"\n};\nconst _hoisted_30 = {\n  key: 0,\n  class: \"quiz-container\"\n};\nconst _hoisted_31 = {\n  class: \"options\"\n};\nconst _hoisted_32 = [\"id\", \"name\", \"value\", \"onUpdate:modelValue\"];\nconst _hoisted_33 = [\"for\"];\nconst _hoisted_34 = {\n  key: 0,\n  class: \"feedback\"\n};\nconst _hoisted_35 = {\n  class: \"explanation\"\n};\nconst _hoisted_36 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[10] || (_cache[10] = _createElementVNode(\"h1\", null, \"QUIZZy\", -1 /* HOISTED */)), !$setup.showQuestions && !$setup.quizStarted && $setup.predictedScore === null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Upload Files\", -1 /* HOISTED */)), _createElementVNode(\"div\", {\n    class: \"upload-area\",\n    onDragover: _cache[0] || (_cache[0] = _withModifiers(() => {}, [\"prevent\"])),\n    onDrop: _withModifiers($setup.handleDrop, [\"prevent\"]),\n    onClick: $setup.triggerFileInput,\n    role: \"button\",\n    tabindex: \"0\",\n    onKeydown: _withKeys($setup.triggerFileInput, [\"enter\"])\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: $setup.handleFileSelect,\n    accept: \".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\",\n    ref: \"fileInput\",\n    class: \"file-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), _cache[3] || (_cache[3] = _createElementVNode(\"div\", {\n    class: \"upload-prompt\"\n  }, [_createElementVNode(\"p\", null, \"Drag and drop files here or click to select\"), _createElementVNode(\"p\", null, \"Supported formats: PDF, DOCX, PPTX, TXT\")], -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), $setup.hasFileErrors ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode($setup[\"FileErrorDisplay\"], {\n    \"extraction-errors\": $setup.extractionErrors,\n    \"unsupported-files\": $setup.unsupportedFiles\n  }, null, 8 /* PROPS */, [\"extraction-errors\", \"unsupported-files\"])])) : _createCommentVNode(\"v-if\", true), $setup.selectedFiles.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Selected Files:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.selectedFiles, (file, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"file-item\"\n    }, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString(file.name), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.removeFile(index),\n      class: \"remove-btn\",\n      title: \"Remove file\"\n    }, \"Ã—\", 8 /* PROPS */, _hoisted_7)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_8, [_cache[5] || (_cache[5] = _createElementVNode(\"h2\", null, \"Number of Questions\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_9, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.questionCount = $event),\n    min: \"1\",\n    max: \"20\",\n    placeholder: \"Enter number of questions\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.questionCount]])])]), _createElementVNode(\"div\", _hoisted_10, [_cache[7] || (_cache[7] = _createElementVNode(\"h2\", null, \"Question Difficulty\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_11, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.selectedDifficulty = $event),\n    class: \"difficulty-dropdown\"\n  }, _cache[6] || (_cache[6] = [_createElementVNode(\"option\", {\n    value: \"easy\"\n  }, \"Easy\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"medium\"\n  }, \"Medium\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"hard\"\n  }, \"Hard\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.selectedDifficulty]])])]), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    disabled: !$setup.isFormValid || $setup.isLoading,\n    onClick: $setup.handleSubmit\n  }, _toDisplayString($setup.isLoading ? 'Generating Questions...' : 'Submit'), 9 /* TEXT, PROPS */, _hoisted_12)])) : _createCommentVNode(\"v-if\", true), $setup.predictedScore !== null && !$setup.quizStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, [_createElementVNode(\"h2\", null, \"Predicted Score: \" + _toDisplayString($setup.predictedScore) + \"% based on your study material and question difficulty.\", 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    onClick: $setup.startAdaptiveQuiz\n  }, \"Start Quiz\")])) : _createCommentVNode(\"v-if\", true), $setup.quizStarted ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [$setup.getCurrentAdaptiveQuestion ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_createElementVNode(\"h2\", null, \"Question \" + _toDisplayString($setup.userResponses.length + 1) + \" of \" + _toDisplayString($setup.questionCount), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"h3\", null, _toDisplayString($setup.getCurrentAdaptiveQuestion.text), 1 /* TEXT */), $setup.getCurrentAdaptiveQuestion.type === 'multiple-choice' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_17, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.getCurrentAdaptiveQuestion.options, (option, letter) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: letter,\n      class: _normalizeClass([\"option-btn\", {\n        'selected': $setup.currentAnswer === letter,\n        'correct': $setup.showCurrentAnswer && letter === $setup.getCurrentAdaptiveQuestion.correctAnswer,\n        'incorrect': $setup.showCurrentAnswer && $setup.currentAnswer === letter && letter !== $setup.getCurrentAdaptiveQuestion.correctAnswer\n      }]),\n      onClick: $event => $setup.submitAdaptiveAnswer(letter),\n      disabled: $setup.showCurrentAnswer\n    }, _toDisplayString(letter) + \") \" + _toDisplayString(option), 11 /* TEXT, CLASS, PROPS */, _hoisted_18);\n  }), 128 /* KEYED_FRAGMENT */))])) : $setup.getCurrentAdaptiveQuestion.type === 'true-false' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(['true', 'false'], option => {\n    return _createElementVNode(\"button\", {\n      key: option,\n      class: _normalizeClass([\"option-btn\", {\n        'selected': $setup.currentAnswer === option,\n        'correct': $setup.showCurrentAnswer && option === $setup.getCurrentAdaptiveQuestion.correctAnswer,\n        'incorrect': $setup.showCurrentAnswer && $setup.currentAnswer === option && option !== $setup.getCurrentAdaptiveQuestion.correctAnswer\n      }]),\n      onClick: $event => $setup.submitAdaptiveAnswer(option),\n      disabled: $setup.showCurrentAnswer\n    }, _toDisplayString(option.charAt(0).toUpperCase() + option.slice(1)), 11 /* TEXT, CLASS, PROPS */, _hoisted_20);\n  }), 64 /* STABLE_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), $setup.showCurrentAnswer ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_createElementVNode(\"p\", {\n    class: _normalizeClass({\n      'correct': $setup.isCurrentAnswerCorrect,\n      'incorrect': !$setup.isCurrentAnswerCorrect\n    })\n  }, _toDisplayString($setup.isCurrentAnswerCorrect ? 'Correct!' : 'Incorrect!'), 3 /* TEXT, CLASS */), _createElementVNode(\"p\", _hoisted_22, _toDisplayString($setup.getCurrentAdaptiveQuestion.explanation), 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"next-btn\",\n    onClick: $setup.moveToNextQuestion\n  }, _toDisplayString($setup.userResponses.length + 1 >= Number($setup.questionCount) ? 'Finish Quiz' : 'Next Question'), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), $setup.actualScore !== null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, [_createElementVNode(\"h2\", null, \"You scored \" + _toDisplayString($setup.actualScore) + \"%. Predicted score was \" + _toDisplayString($setup.predictedScore) + \"%.\", 1 /* TEXT */), $setup.actualScore === 100 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_24, _cache[9] || (_cache[9] = [_createElementVNode(\"h3\", null, \"Perfect score! You've mastered the material!\", -1 /* HOISTED */)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_25, [$setup.actualScore >= $setup.predictedScore - 10 && $setup.actualScore <= $setup.predictedScore + 10 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_26, \"You were close!\")) : _createCommentVNode(\"v-if\", true), $setup.actualScore > $setup.predictedScore + 10 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_27, \"You outperformed the prediction! Great job!\")) : _createCommentVNode(\"v-if\", true), $setup.actualScore < $setup.predictedScore - 10 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_28, \"You scored below the prediction. Review the material for improvement.\")) : _createCommentVNode(\"v-if\", true)])), _createElementVNode(\"pre\", null, _toDisplayString($setup.quizSummary), 1 /* TEXT */), _createElementVNode(\"button\", {\n    class: \"submit-btn\",\n    onClick: $setup.resetToMainScreen\n  }, \"Back to Main\")])) : _createCommentVNode(\"v-if\", true), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_29, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $setup.quiz ? (_openBlock(), _createElementBlock(\"div\", _hoisted_30, [_cache[11] || (_cache[11] = _createElementVNode(\"h2\", null, \"Generated Quiz\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.quiz.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"question\"\n    }, [_createElementVNode(\"h3\", null, \"Question \" + _toDisplayString(index + 1) + \": \" + _toDisplayString(question.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_31, [question.type === 'multiple-choice' ? (_openBlock(true), _createElementBlock(_Fragment, {\n      key: 0\n    }, _renderList(question.options, (option, letter) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: letter,\n        class: \"option\"\n      }, [_withDirectives(_createElementVNode(\"input\", {\n        type: \"radio\",\n        id: `q${index}-${letter}`,\n        name: `question${index}`,\n        value: letter,\n        \"onUpdate:modelValue\": $event => $setup.userAnswers[index] = $event\n      }, null, 8 /* PROPS */, _hoisted_32), [[_vModelRadio, $setup.userAnswers[index]]]), _createElementVNode(\"label\", {\n        for: `q${index}-${letter}`\n      }, _toDisplayString(letter) + \") \" + _toDisplayString(option), 9 /* TEXT, PROPS */, _hoisted_33)]);\n    }), 128 /* KEYED_FRAGMENT */)) : question.type === 'true-false' ? (_openBlock(), _createBlock($setup[\"TrueFalseQuestion\"], {\n      key: 1,\n      index: index,\n      \"correct-answer\": question.correctAnswer,\n      explanation: question.explanation,\n      \"show-feedback\": $setup.showAnswers && $setup.userAnswers[index],\n      \"onUpdate:answer\": $event => $setup.userAnswers[index] = $event\n    }, null, 8 /* PROPS */, [\"index\", \"correct-answer\", \"explanation\", \"show-feedback\", \"onUpdate:answer\"])) : _createCommentVNode(\"v-if\", true)]), $setup.showAnswers && $setup.userAnswers[index] ? (_openBlock(), _createElementBlock(\"div\", _hoisted_34, [_createElementVNode(\"p\", {\n      class: _normalizeClass({\n        'correct': $setup.userAnswers[index] === question.correctAnswer,\n        'incorrect': $setup.userAnswers[index] !== question.correctAnswer\n      })\n    }, _toDisplayString($setup.userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!'), 3 /* TEXT, CLASS */), _createElementVNode(\"p\", _hoisted_35, _toDisplayString(question.explanation), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: $setup.checkAnswers,\n    disabled: !$setup.allQuestionsAnswered\n  }, \"Check Answers\", 8 /* PROPS */, _hoisted_36)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","$setup","showQuestions","quizStarted","predictedScore","_hoisted_3","onDragover","_cache","_withModifiers","onDrop","handleDrop","onClick","triggerFileInput","role","tabindex","onKeydown","_withKeys","type","onChange","handleFileSelect","accept","ref","hasFileErrors","_hoisted_4","_createVNode","extractionErrors","unsupportedFiles","_createCommentVNode","selectedFiles","length","_hoisted_5","_Fragment","_renderList","file","index","_hoisted_6","_toDisplayString","name","$event","removeFile","title","_hoisted_7","_hoisted_8","_hoisted_9","questionCount","min","max","placeholder","_hoisted_10","_hoisted_11","selectedDifficulty","value","disabled","isFormValid","isLoading","handleSubmit","_hoisted_12","_hoisted_13","startAdaptiveQuiz","_hoisted_14","getCurrentAdaptiveQuestion","_hoisted_15","userResponses","_hoisted_16","text","_hoisted_17","options","option","letter","_normalizeClass","currentAnswer","showCurrentAnswer","correctAnswer","submitAdaptiveAnswer","_hoisted_18","_hoisted_19","charAt","toUpperCase","slice","_hoisted_20","_hoisted_21","isCurrentAnswerCorrect","_hoisted_22","explanation","moveToNextQuestion","Number","actualScore","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","quizSummary","resetToMainScreen","error","_hoisted_29","quiz","_hoisted_30","questions","question","_hoisted_31","id","userAnswers","_hoisted_32","for","_hoisted_33","_createBlock","showAnswers","_hoisted_34","_hoisted_35","checkAnswers","allQuestionsAnswered","_hoisted_36"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"upload-container\">\n      <h1>QUIZZy</h1>\n      \n      <div v-if=\"!showQuestions && !quizStarted && predictedScore === null\" class=\"file-upload-section\">\n        <h2>Upload Files</h2>\n        <div class=\"upload-area\" \n          @dragover.prevent \n          @drop.prevent=\"handleDrop\"\n          @click=\"triggerFileInput\"\n          role=\"button\"\n          tabindex=\"0\"\n          @keydown.enter=\"triggerFileInput\"\n        >\n          <input \n            type=\"file\" \n            @change=\"handleFileSelect\" \n            accept=\".pdf,.docx,.pptx,.txt,.png,.jpg,.jpeg,.tiff,.bmp\"\n            ref=\"fileInput\"\n            class=\"file-input\"\n          >\n          <div class=\"upload-prompt\">\n            <p>Drag and drop files here or click to select</p>\n            <p>Supported formats: PDF, DOCX, PPTX, TXT</p>\n          </div>\n        </div>\n        \n        <div v-if=\"hasFileErrors\" class=\"error-section\">\n          <FileErrorDisplay\n            :extraction-errors=\"extractionErrors\"\n            :unsupported-files=\"unsupportedFiles\"\n          />\n        </div>\n\n        <div v-if=\"selectedFiles.length > 0\" class=\"selected-files\">\n          <h3>Selected Files:</h3>\n          <ul>\n            <li v-for=\"(file, index) in selectedFiles\" :key=\"index\" class=\"file-item\">\n              <span class=\"file-name\">{{ file.name }}</span>\n              <button @click=\"removeFile(index)\" class=\"remove-btn\" title=\"Remove file\">Ã—</button>\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"questions-section\">\n          <h2>Number of Questions</h2>\n          <div class=\"question-input\">\n            <input\n              type=\"number\"\n              v-model=\"questionCount\"\n              min=\"1\"\n              max=\"20\"\n              placeholder=\"Enter number of questions\"\n            />\n          </div>\n        </div>\n\n        <div class=\"difficulty-section\">\n          <h2>Question Difficulty</h2>\n          <div class=\"difficulty-selector\">\n            <select v-model=\"selectedDifficulty\" class=\"difficulty-dropdown\">\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </div>\n        </div>\n\n        <button \n          class=\"submit-btn\" \n          :disabled=\"!isFormValid || isLoading\"\n          @click=\"handleSubmit\"\n        >\n          {{ isLoading ? 'Generating Questions...' : 'Submit' }}\n        </button>\n      </div>\n\n      <div v-if=\"predictedScore !== null && !quizStarted\">\n        <h2>Predicted Score: {{ predictedScore }}% based on your study material and question difficulty.</h2>\n        <button class=\"submit-btn\" @click=\"startAdaptiveQuiz\">Start Quiz</button>\n      </div>\n\n      <div v-if=\"quizStarted\">\n        <div v-if=\"getCurrentAdaptiveQuestion\">\n          <h2>Question {{ userResponses.length + 1 }} of {{ questionCount }}</h2>\n          <div class=\"question-item\">\n            <h3>{{ getCurrentAdaptiveQuestion.text }}</h3>\n            <div v-if=\"getCurrentAdaptiveQuestion.type === 'multiple-choice'\" class=\"options\">\n              <button \n                v-for=\"(option, letter) in getCurrentAdaptiveQuestion.options\" \n                :key=\"letter\"\n                class=\"option-btn\"\n                :class=\"{\n                  'selected': currentAnswer === letter,\n                  'correct': showCurrentAnswer && letter === getCurrentAdaptiveQuestion.correctAnswer,\n                  'incorrect': showCurrentAnswer && currentAnswer === letter && letter !== getCurrentAdaptiveQuestion.correctAnswer\n                }\"\n                @click=\"submitAdaptiveAnswer(letter)\"\n                :disabled=\"showCurrentAnswer\"\n              >\n                {{ letter }}) {{ option }}\n              </button>\n            </div>\n            <div v-else-if=\"getCurrentAdaptiveQuestion.type === 'true-false'\" class=\"options\">\n              <button \n                v-for=\"option in ['true', 'false']\" \n                :key=\"option\"\n                class=\"option-btn\"\n                :class=\"{\n                  'selected': currentAnswer === option,\n                  'correct': showCurrentAnswer && option === getCurrentAdaptiveQuestion.correctAnswer,\n                  'incorrect': showCurrentAnswer && currentAnswer === option && option !== getCurrentAdaptiveQuestion.correctAnswer\n                }\"\n                @click=\"submitAdaptiveAnswer(option)\"\n                :disabled=\"showCurrentAnswer\"\n              >\n                {{ option.charAt(0).toUpperCase() + option.slice(1) }}\n              </button>\n            </div>\n            \n            <div v-if=\"showCurrentAnswer\" class=\"feedback\">\n              <p :class=\"{ 'correct': isCurrentAnswerCorrect, 'incorrect': !isCurrentAnswerCorrect }\">\n                {{ isCurrentAnswerCorrect ? 'Correct!' : 'Incorrect!' }}\n              </p>\n              <p class=\"explanation\">{{ getCurrentAdaptiveQuestion.explanation }}</p>\n              <button \n                class=\"next-btn\" \n                @click=\"moveToNextQuestion\"\n              >\n                {{ userResponses.length + 1 >= Number(questionCount) ? 'Finish Quiz' : 'Next Question' }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div v-if=\"actualScore !== null\">\n        <h2>You scored {{ actualScore }}%. Predicted score was {{ predictedScore }}%.</h2>\n        <div v-if=\"actualScore === 100\">\n          <h3>Perfect score! You've mastered the material!</h3>\n        </div>\n        <div v-else>\n          <p v-if=\"actualScore >= predictedScore - 10 && actualScore <= predictedScore + 10\">You were close!</p>\n          <p v-if=\"actualScore > predictedScore + 10\">You outperformed the prediction! Great job!</p>\n          <p v-if=\"actualScore < predictedScore - 10\">You scored below the prediction. Review the material for improvement.</p>\n        </div>\n        <pre>{{ quizSummary }}</pre>\n        <button class=\"submit-btn\" @click=\"resetToMainScreen\">Back to Main</button>\n      </div>\n\n      <div v-if=\"error\" class=\"error-message\">\n        {{ error }}\n      </div>\n    </div>\n\n    <template v-if=\"quiz\">\n      <div class=\"quiz-container\">\n        <h2>Generated Quiz</h2>\n        <template v-for=\"(question, index) in quiz.questions\" :key=\"index\">\n          <div class=\"question\">\n            <h3>Question {{ index + 1 }}: {{ question.text }}</h3>\n            <div class=\"options\">\n              <template v-if=\"question.type === 'multiple-choice'\">\n                <div v-for=\"(option, letter) in question.options\" :key=\"letter\" class=\"option\">\n                  <input\n                    type=\"radio\"\n                    :id=\"`q${index}-${letter}`\"\n                    :name=\"`question${index}`\"\n                    :value=\"letter\"\n                    v-model=\"userAnswers[index]\"\n                  />\n                  <label :for=\"`q${index}-${letter}`\">{{ letter }}) {{ option }}</label>\n                </div>\n              </template>\n              <template v-else-if=\"question.type === 'true-false'\">\n                <TrueFalseQuestion\n                  :index=\"index\"\n                  :correct-answer=\"question.correctAnswer\"\n                  :explanation=\"question.explanation\"\n                  :show-feedback=\"showAnswers && userAnswers[index]\"\n                  @update:answer=\"userAnswers[index] = $event\"\n                />\n              </template>\n            </div>\n            <div v-if=\"showAnswers && userAnswers[index]\" class=\"feedback\">\n              <p :class=\"{ 'correct': userAnswers[index] === question.correctAnswer, 'incorrect': userAnswers[index] !== question.correctAnswer }\">\n                {{ userAnswers[index] === question.correctAnswer ? 'Correct!' : 'Incorrect!' }}\n              </p>\n              <p class=\"explanation\">{{ question.explanation }}</p>\n            </div>\n          </div>\n        </template>\n        <button @click=\"checkAnswers\" :disabled=\"!allQuestionsAnswered\">Check Answers</button>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport axios from 'axios';\nimport TrueFalseQuestion from './components/TrueFalseQuestion.vue';\nimport FileErrorDisplay from './components/FileErrorDisplay.vue';\n\nconst selectedFiles = ref([]);\nconst questionCount = ref('');\nconst fileInput = ref(null);\nconst generatedQuestions = ref([]);\nconst isLoading = ref(false);\nconst error = ref('');\nconst showQuestions = ref(false);\nconst quiz = ref(null);\nconst userAnswers = ref([]);\nconst showAnswers = ref(false);\nconst unsupportedFiles = ref([]);\nconst extractionErrors = ref([]);\nconst selectedDifficulty = ref('medium');\n\n// Adaptive quiz state\nconst predictedScore = ref(null);\nconst quizStarted = ref(false);\nconst currentQuestionIndex = ref(0);\nconst userResponses = ref([]); // {question, userAnswer, correct, difficulty}\nconst adaptiveQuestions = ref([]); // pool of questions for adaptive flow\nconst adaptiveDifficulty = ref('medium');\nconst actualScore = ref(null);\nconst quizSummary = ref('');\n\n// Add these new refs for answer handling\nconst currentAnswer = ref(null);\nconst showCurrentAnswer = ref(false);\nconst isCurrentAnswerCorrect = ref(false);\n\nconst isFormValid = computed(() => {\n  return selectedFiles.value.length > 0 && questionCount.value > 0;\n});\n\n// Used in template for error display conditions\nconst hasFileErrors = computed(() => {\n  return extractionErrors.value.length > 0 || unsupportedFiles.value.length > 0;\n});\n\nconst triggerFileInput = () => {\n  fileInput.value.click();\n};\n\nconst handleFileSelect = (event) => {\n  const files = Array.from(event.target.files);\n  addFiles(files);\n};\n\nconst handleDrop = (event) => {\n  const files = Array.from(event.dataTransfer.files);\n  addFiles(files);\n};\n\nconst addFiles = (files) => {\n  const validTypes = [\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'text/plain',\n    'application/pdf',\n    'image/png',\n    'image/jpeg',\n    'image/jpg',\n    'image/tiff',\n    'image/bmp'\n  ];\n  \n  const validFiles = [];\n  const invalidFiles = [];\n  \n  files.forEach(file => {\n    if (validTypes.includes(file.type)) {\n      validFiles.push(file);\n    } else {\n      invalidFiles.push(file);\n    }\n  });\n  \n  selectedFiles.value = [...selectedFiles.value, ...validFiles];\n  unsupportedFiles.value = [...unsupportedFiles.value, ...invalidFiles];\n};\n\nconst removeFile = (index) => {\n  selectedFiles.value.splice(index, 1);\n};\n\nconst readFileContent = async (file) => {\n  return new Promise((resolve) => {\n    if (\n      file.type === \"application/pdf\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\n      file.type === \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n      file.type.startsWith('image/')\n    ) {\n      // PDF, PPTX, DOCX, or Image - send to backend for extraction\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Use the correct backend URL\n      const backendUrl = process.env.VUE_APP_BACKEND_URL || 'http://localhost:5001';\n      fetch(`${backendUrl}/extract-file`, {\n        method: 'POST',\n        body: formData\n      })\n        .then(res => res.json())\n        .then(data => {\n          if (data.text) {\n            resolve(data.text);\n          } else {\n            extractionErrors.value.push({\n              fileName: file.name,\n              message: data.error || 'Failed to extract text from file'\n            });\n            resolve(\"[Could not extract file text]\");\n          }\n        })\n        .catch(() => {\n          extractionErrors.value.push({\n            fileName: file.name,\n            message: 'Server error while extracting text'\n          });\n          resolve(\"[Could not extract file text]\");\n        });\n    } else if (file.type === \"text/plain\") {\n      // Plain text\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = () => {\n        extractionErrors.value.push({\n          fileName: file.name,\n          message: 'Error reading text file'\n        });\n        resolve(\"[Could not read file]\");\n      };\n      reader.readAsText(file);\n    } else {\n      resolve(`[${file.name} is not a supported file type.]`);\n    }\n  });\n};\n\nfunction predictScore(contentCoverage, difficultyLevel) {\n  // Example coefficients for linear regression\n  const a = 0.5;\n  const b = -10;\n  const c = 90;\n  return Math.max(0, Math.min(100, Math.round(a * contentCoverage + b * difficultyLevel + c)));\n}\n\nfunction getDifficultyLevelValue(diff) {\n  if (diff === 'easy') return 1;\n  if (diff === 'medium') return 2;\n  if (diff === 'hard') return 3;\n  return 2;\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction analyzeContentForCoverage(content) {\n  // For now, just return 100 (simulate full coverage)\n  // Later: implement keyword/topic extraction and compare to questions\n  return 100;\n}\n\nconst handleSubmit = async () => {\n  if (!isFormValid.value) return;\n\n  isLoading.value = true;\n  error.value = '';\n  generatedQuestions.value = [];\n  predictedScore.value = null;\n  quizStarted.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveQuestions.value = [];\n  actualScore.value = null;\n  quizSummary.value = '';\n\n  try {\n    // Read all file contents\n    const fileContents = await Promise.all(\n      selectedFiles.value.map(file => readFileContent(file))\n    );\n\n    // Combine all file contents\n    const combinedContent = fileContents.join('\\n\\n');\n    console.log('Extracted file content:', combinedContent);\n\n    // Prepare the prompt for Gemini with difficulty level\n    const prompt = `Create a quiz with ${questionCount.value} easy, medium, and hard questions based on this text. Format each question exactly as follows:\n\nFor multiple choice questions:\n1. Start with \"Question: [question text]\"\n2. List options as:\n   A) [option text]\n   B) [option text]\n   C) [option text]\n   D) [option text]\n   (Mark correct answer with * after the option)\n3. Add \"Explanation: [explanation text]\"\n4. Add \"Difficulty: [easy|medium|hard]\"\n\nFor true/false questions:\n1. Start with \"True/False: [question text]\"\n2. List options as:\n   True*\n   False\n   (or vice versa, with * marking correct answer)\n3. Add \"Explanation: [explanation text]\"\n4. Add \"Difficulty: [easy|medium|hard]\"\n\nText: ${combinedContent}`;\n\n    // Call Gemini API\n    const response = await axios.post(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.VUE_APP_GEMINI_API_KEY}`,\n      {\n        contents: [{\n          parts: [{\n            text: prompt\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 2048,\n        }\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n\n    const quizText = response.data.candidates[0].content.parts[0].text;\n    const processedQuiz = processQuizResponse(quizText);\n    // Store all questions for adaptive flow\n    adaptiveQuestions.value = processedQuiz.questions;\n\n    // Predict score using linear regression\n    const contentCoverage = analyzeContentForCoverage(combinedContent);\n    const diffValue = getDifficultyLevelValue(selectedDifficulty.value);\n    predictedScore.value = predictScore(contentCoverage, diffValue);\n\n    // Show predicted score and Start Quiz button\n    showQuestions.value = false;\n    quizStarted.value = false;\n  } catch (err) {\n    error.value = `Error generating questions: ${err.response ? err.response.data.error?.message || 'Unknown error' : err.message}`;\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst startAdaptiveQuiz = () => {\n  quizStarted.value = true;\n  showQuestions.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveDifficulty.value = selectedDifficulty.value;\n};\n\nconst getCurrentAdaptiveQuestion = computed(() => {\n  const pool = adaptiveQuestions.value.filter(q => q.difficulty === adaptiveDifficulty.value);\n  let question;\n  \n  if (pool.length === 0) {\n    question = adaptiveQuestions.value[currentQuestionIndex.value];\n  } else {\n    // Find one not yet answered\n    question = pool.find(q => !userResponses.value.find(r => r.text === q.text)) \n            || adaptiveQuestions.value[currentQuestionIndex.value];\n  }\n  \n  return question;\n});\n\nconst submitAdaptiveAnswer = (answer) => {\n  if (showCurrentAnswer.value) return;\n  \n  const question = getCurrentAdaptiveQuestion.value;\n  currentAnswer.value = answer;\n  showCurrentAnswer.value = true;\n  \n  // Check if answer is correct based on question type\n  const isCorrect = question.type === 'multiple-choice' \n    ? answer === question.correctAnswer\n    : answer === question.correctAnswer.toString();\n  \n  isCurrentAnswerCorrect.value = isCorrect;\n  \n  // Store response\n  userResponses.value.push({\n    text: question.text,\n    userAnswer: answer,\n    correct: isCorrect,\n    difficulty: question.difficulty\n  });\n};\n\nconst moveToNextQuestion = () => {\n  // Adapt difficulty based on current answer\n  if (isCurrentAnswerCorrect.value && adaptiveDifficulty.value !== 'hard') {\n    adaptiveDifficulty.value = adaptiveDifficulty.value === 'easy' ? 'medium' : 'hard';\n  } else if (!isCurrentAnswerCorrect.value && adaptiveDifficulty.value !== 'easy') {\n    adaptiveDifficulty.value = adaptiveDifficulty.value === 'hard' ? 'medium' : 'easy';\n  }\n  \n  // Reset answer state\n  currentAnswer.value = null;\n  showCurrentAnswer.value = false;\n  isCurrentAnswerCorrect.value = false;\n  \n  // Check if quiz is finished\n  if (userResponses.value.length >= Number(questionCount.value)) {\n    finishAdaptiveQuiz();\n  } else {\n    currentQuestionIndex.value++;\n  }\n};\n\nconst finishAdaptiveQuiz = () => {\n  quizStarted.value = false;\n  showQuestions.value = false;\n  // Calculate actual score\n  const correctCount = userResponses.value.filter(r => r.correct).length;\n  actualScore.value = Math.round((correctCount / userResponses.value.length) * 100);\n  // Generate summary\n  let strong = [], weak = [];\n  for (const diff of ['easy', 'medium', 'hard']) {\n    const total = userResponses.value.filter(r => r.difficulty === diff).length;\n    const correct = userResponses.value.filter(r => r.difficulty === diff && r.correct).length;\n    if (total > 0) {\n      if (correct / total >= 0.8) strong.push(diff);\n      else if (correct / total < 0.5) weak.push(diff);\n    }\n  }\n  let summary = '';\n  if (actualScore.value === 100) {\n    summary = \"Perfect score! You've mastered the material!\";\n  } else {\n    summary = `You did well on: ${strong.join(', ') || 'none'}\\nAreas to improve: ${weak.join(', ') || 'none'}`;\n  }\n  quizSummary.value = summary;\n};\n\nconst resetToMainScreen = () => {\n  showQuestions.value = false;\n  selectedFiles.value = [];\n  unsupportedFiles.value = [];\n  extractionErrors.value = [];\n  questionCount.value = '';\n  error.value = '';\n  isLoading.value = false;\n  predictedScore.value = null;\n  quizStarted.value = false;\n  currentQuestionIndex.value = 0;\n  userResponses.value = [];\n  adaptiveQuestions.value = [];\n  actualScore.value = null;\n  quizSummary.value = '';\n  if (fileInput.value) {\n    fileInput.value.value = '';\n  }\n};\n\nconst checkAnswers = () => {\n  showAnswers.value = true;\n};\n\nconst allQuestionsAnswered = computed(() => {\n  return userAnswers.value.length === quiz.value.questions.length;\n});\n\nconst processQuizResponse = (response) => {\n  const questions = [];\n  const lines = response.split('\\n');\n  let currentQuestion = null;\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    if (/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(Question:|Q:|Easy Question:|Hard Question:|Medium Question:)/i, '').trim(),\n        type: 'multiple-choice',\n        options: {},\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n    } else if (/^\\d*\\.?\\s*(True\\/False:|True or False:)/i.test(line)) {\n      if (currentQuestion) questions.push(currentQuestion);\n      currentQuestion = {\n        text: line.replace(/^\\d*\\.?\\s*(True\\/False:|True or False:)/i, '').trim(),\n        type: 'true-false',\n        options: { true: 'True', false: 'False' },\n        correctAnswer: '',\n        explanation: '',\n        difficulty: 'medium'\n      };\n    } else if (currentQuestion) {\n      const optionMatch = line.match(/^([A-Da-d])[).]\\s*(.*)/);\n      if (optionMatch) {\n        const letter = optionMatch[1].toUpperCase();\n        let option = optionMatch[2];\n        if (option.includes('*')) {\n          currentQuestion.correctAnswer = letter;\n          option = option.replace('*', '').trim();\n        }\n        currentQuestion.options[letter] = option;\n      } else if (line === 'True*' || line === 'False*') {\n        currentQuestion.correctAnswer = line === 'True*' ? 'true' : 'false';\n      } else if (line.startsWith('Explanation:')) {\n        currentQuestion.explanation = line.replace('Explanation:', '').trim();\n      } else if (line.startsWith('Difficulty:')) {\n        const diff = line.replace('Difficulty:', '').trim().toLowerCase();\n        if (['easy', 'medium', 'hard'].includes(diff)) {\n          currentQuestion.difficulty = diff;\n        }\n      }\n    }\n  }\n  if (currentQuestion) questions.push(currentQuestion);\n  return { questions };\n};\n</script>\n\n<style scoped>\n.app-container {\n  min-height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f5f5f5;\n  font-family: \"Helvetica\", \"Arial\", sans-serif;\n}\n\n.upload-container {\n  background-color: white;\n  padding: 2rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  width: 90%;\n  max-width: 600px;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 2rem;\n}\n\nh2 {\n  color: #444;\n  margin-bottom: 1rem;\n}\n\n.file-upload-section {\n  margin-bottom: 2rem;\n}\n\n.upload-area {\n  border: 2px dashed #ccc;\n  border-radius: 8px;\n  padding: 2rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n  outline: none;\n}\n\n.upload-area:hover {\n  border-color: #666;\n  background-color: #f8f8f8;\n}\n\n.upload-area:focus {\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.file-input {\n  display: none;\n}\n\n.upload-prompt {\n  color: #666;\n}\n\n.upload-prompt p {\n  margin: 0.5rem 0;\n}\n\n.selected-files {\n  margin-top: 1rem;\n}\n\n.selected-files ul {\n  list-style: none;\n  padding: 0;\n}\n\n.selected-files li {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.remove-btn {\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0 0.5rem;\n}\n\n.questions-section {\n  margin-top: 2rem;\n}\n\n.question-input input {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.submit-btn {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\n.submit-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.submit-btn:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.questions-list {\n  margin-top: 2rem;\n  padding: 1rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.question-item {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: white;\n  border-radius: 4px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.error-message {\n  color: #ff4444;\n  margin-top: 1rem;\n  text-align: center;\n}\n\n.quiz-container {\n  margin-top: 2rem;\n  padding: 2rem;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.question {\n  margin-bottom: 1rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.options {\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.option {\n  margin-bottom: 0.5rem;\n}\n\n.feedback {\n  margin-top: 0.5rem;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-radius: 4px;\n}\n\n.correct {\n  color: #4CAF50;\n}\n\n.incorrect {\n  color: #ff4444;\n}\n\n.explanation {\n  margin-top: 0.5rem;\n  margin-left: 1rem;\n}\n\nbutton {\n  width: 100%;\n  padding: 1rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 2rem;\n  transition: background-color 0.3s;\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\nbutton:not(:disabled):hover {\n  background-color: #45a049;\n}\n\n.file-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  margin-bottom: 0.5rem;\n  border-radius: 4px;\n}\n\n.file-name {\n  flex: 1;\n  margin-right: 0.5rem;\n  word-break: break-word;\n}\n\n.remove-btn {\n  flex-shrink: 0;\n  width: 24px;\n  height: 24px;\n  background: none;\n  border: none;\n  color: #ff4444;\n  cursor: pointer;\n  font-size: 1.2rem;\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: background-color 0.2s;\n}\n\n.remove-btn:hover {\n  background-color: #ffeeee;\n}\n\n.unsupported-files {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: #fff3f3;\n  border-radius: 4px;\n  border: 1px solid #ffdddd;\n}\n\n.unsupported-files h3 {\n  color: #d32f2f;\n  margin-bottom: 0.5rem;\n}\n\n.unsupported-label {\n  color: #d32f2f;\n  font-size: 0.9em;\n  margin-left: 0.5rem;\n}\n\n.unsupported-files .file-item {\n  background-color: #fff;\n  border: 1px solid #ffdddd;\n}\n\n.difficulty-section {\n  margin-top: 2rem;\n}\n\n.difficulty-selector {\n  margin-bottom: 1rem;\n}\n\n.difficulty-dropdown {\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n  background-color: white;\n  cursor: pointer;\n}\n\n.difficulty-dropdown:focus {\n  outline: none;\n  border-color: #4CAF50;\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\n}\n\n.option-btn {\n  width: 100%;\n  padding: 1rem;\n  margin: 0.5rem 0;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n  background-color: white;\n  cursor: pointer;\n  font-size: 1rem;\n  text-align: left;\n  transition: all 0.3s ease;\n}\n\n.option-btn:hover:not(:disabled) {\n  border-color: #4CAF50;\n  background-color: #f5f5f5;\n}\n\n.option-btn.selected {\n  border-color: #2196F3;\n  background-color: #E3F2FD;\n}\n\n.option-btn.correct {\n  border-color: #4CAF50;\n  background-color: #E8F5E9;\n}\n\n.option-btn.incorrect {\n  border-color: #f44336;\n  background-color: #FFEBEE;\n}\n\n.option-btn:disabled {\n  opacity: 0.7;\n  cursor: not-allowed;\n}\n\n.feedback {\n  margin-top: 1rem;\n  padding: 1rem;\n  border-radius: 4px;\n  background-color: #f5f5f5;\n}\n\n.feedback p {\n  margin: 0.5rem 0;\n}\n\n.feedback .correct {\n  color: #4CAF50;\n  font-weight: bold;\n}\n\n.feedback .incorrect {\n  color: #f44336;\n  font-weight: bold;\n}\n\n.explanation {\n  margin-top: 1rem;\n  padding: 1rem;\n  background-color: white;\n  border-left: 3px solid #2196F3;\n  border-radius: 4px;\n}\n\n.next-btn {\n  margin-top: 1rem;\n  padding: 0.8rem 1.5rem;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  transition: background-color 0.3s;\n}\n\n.next-btn:hover {\n  background-color: #45a049;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}