{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/**\n * Score Calculation Module\n */\n\n/**\n * Calculates predicted score based on question difficulty distribution\n * @param {Array} questions - Array of questions\n * @returns {number|null} Predicted score percentage\n */\nexport function calculatePredictedScore(questions) {\n  if (!questions.length) return null;\n\n  // Calculate difficulty distribution\n  var difficultyCount = questions.reduce(function (acc, q) {\n    acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;\n    return acc;\n  }, {});\n  var totalQuestions = questions.length;\n\n  // Base difficulty weights\n  var baseWeights = {\n    easy: 0.90,\n    // Expect 90% correct for easy\n    medium: 0.75,\n    // Expect 75% correct for medium\n    hard: 0.60 // Expect 60% correct for hard\n  };\n\n  // Calculate base score from difficulty distribution\n  var baseScore = ((difficultyCount.easy || 0) * baseWeights.easy + (difficultyCount.medium || 0) * baseWeights.medium + (difficultyCount.hard || 0) * baseWeights.hard) / totalQuestions * 100;\n\n  // Question count adjustment\n  var adjustment = 0;\n  if (totalQuestions <= 5) adjustment = 5; // Fewer questions = slightly higher chance\n  else if (totalQuestions >= 15) adjustment = -5; // More questions = slightly lower chance\n\n  var finalScore = Math.min(100, Math.max(0, baseScore + adjustment));\n  return Math.round(finalScore);\n}\n\n/**\n * Calculates actual quiz score\n * @param {Array} responses - Array of user responses\n * @returns {number} Score percentage\n */\nexport function calculateScore(responses) {\n  if (!responses.length) return 0;\n  var correctAnswers = responses.filter(function (r) {\n    return r.correct;\n  }).length;\n  return Math.round(correctAnswers / responses.length * 100);\n}\n\n/**\n * Calculates weighted score based on difficulty\n * @param {Object} response - User response data\n * @param {Object} weights - Weight factors\n * @returns {number} Weighted score\n */\nexport function calculateWeightedScore(response, weights) {\n  return response.score * weights.score;\n}","map":{"version":3,"names":["calculatePredictedScore","questions","length","difficultyCount","reduce","acc","q","difficulty","totalQuestions","baseWeights","easy","medium","hard","baseScore","adjustment","finalScore","Math","min","max","round","calculateScore","responses","correctAnswers","filter","r","correct","calculateWeightedScore","response","weights","score"],"sources":["C:/Users/StevenJakeASOY/Documents/cursor-projects/src/algorithms/score-calculation/index.js"],"sourcesContent":["/**\n * Score Calculation Module\n */\n\n/**\n * Calculates predicted score based on question difficulty distribution\n * @param {Array} questions - Array of questions\n * @returns {number|null} Predicted score percentage\n */\nexport function calculatePredictedScore(questions) {\n  if (!questions.length) return null;\n\n  // Calculate difficulty distribution\n  const difficultyCount = questions.reduce((acc, q) => {\n    acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;\n    return acc;\n  }, {});\n\n  const totalQuestions = questions.length;\n  \n  // Base difficulty weights\n  const baseWeights = {\n    easy: 0.90,    // Expect 90% correct for easy\n    medium: 0.75,  // Expect 75% correct for medium\n    hard: 0.60     // Expect 60% correct for hard\n  };\n\n  // Calculate base score from difficulty distribution\n  const baseScore = (\n    ((difficultyCount.easy || 0) * baseWeights.easy +\n     (difficultyCount.medium || 0) * baseWeights.medium +\n     (difficultyCount.hard || 0) * baseWeights.hard) /\n    totalQuestions * 100\n  );\n\n  // Question count adjustment\n  let adjustment = 0;\n  if (totalQuestions <= 5) adjustment = 5;        // Fewer questions = slightly higher chance\n  else if (totalQuestions >= 15) adjustment = -5; // More questions = slightly lower chance\n\n  const finalScore = Math.min(100, Math.max(0, baseScore + adjustment));\n  return Math.round(finalScore);\n}\n\n/**\n * Calculates actual quiz score\n * @param {Array} responses - Array of user responses\n * @returns {number} Score percentage\n */\nexport function calculateScore(responses) {\n  if (!responses.length) return 0;\n  const correctAnswers = responses.filter(r => r.correct).length;\n  return Math.round((correctAnswers / responses.length) * 100);\n}\n\n/**\n * Calculates weighted score based on difficulty\n * @param {Object} response - User response data\n * @param {Object} weights - Weight factors\n * @returns {number} Weighted score\n */\nexport function calculateWeightedScore(response, weights) {\n  return response.score * weights.score;\n} "],"mappings":";;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,uBAAuBA,CAACC,SAAS,EAAE;EACjD,IAAI,CAACA,SAAS,CAACC,MAAM,EAAE,OAAO,IAAI;;EAElC;EACA,IAAMC,eAAe,GAAGF,SAAS,CAACG,MAAM,CAAC,UAACC,GAAG,EAAEC,CAAC,EAAK;IACnDD,GAAG,CAACC,CAAC,CAACC,UAAU,CAAC,GAAG,CAACF,GAAG,CAACC,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;IAChD,OAAOF,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,IAAMG,cAAc,GAAGP,SAAS,CAACC,MAAM;;EAEvC;EACA,IAAMO,WAAW,GAAG;IAClBC,IAAI,EAAE,IAAI;IAAK;IACfC,MAAM,EAAE,IAAI;IAAG;IACfC,IAAI,EAAE,IAAI,CAAK;EACjB,CAAC;;EAED;EACA,IAAMC,SAAS,GACb,CAAC,CAACV,eAAe,CAACO,IAAI,IAAI,CAAC,IAAID,WAAW,CAACC,IAAI,GAC9C,CAACP,eAAe,CAACQ,MAAM,IAAI,CAAC,IAAIF,WAAW,CAACE,MAAM,GAClD,CAACR,eAAe,CAACS,IAAI,IAAI,CAAC,IAAIH,WAAW,CAACG,IAAI,IAC/CJ,cAAc,GAAG,GAClB;;EAED;EACA,IAAIM,UAAU,GAAG,CAAC;EAClB,IAAIN,cAAc,IAAI,CAAC,EAAEM,UAAU,GAAG,CAAC,CAAC,CAAQ;EAAA,KAC3C,IAAIN,cAAc,IAAI,EAAE,EAAEM,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEhD,IAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAG,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEL,SAAS,GAAGC,UAAU,CAAC,CAAC;EACrE,OAAOE,IAAI,CAACG,KAAK,CAACJ,UAAU,CAAC;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,cAAcA,CAACC,SAAS,EAAE;EACxC,IAAI,CAACA,SAAS,CAACnB,MAAM,EAAE,OAAO,CAAC;EAC/B,IAAMoB,cAAc,GAAGD,SAAS,CAACE,MAAM,CAAC,UAAAC,CAAC;IAAA,OAAIA,CAAC,CAACC,OAAO;EAAA,EAAC,CAACvB,MAAM;EAC9D,OAAOc,IAAI,CAACG,KAAK,CAAEG,cAAc,GAAGD,SAAS,CAACnB,MAAM,GAAI,GAAG,CAAC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASwB,sBAAsBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EACxD,OAAOD,QAAQ,CAACE,KAAK,GAAGD,OAAO,CAACC,KAAK;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}