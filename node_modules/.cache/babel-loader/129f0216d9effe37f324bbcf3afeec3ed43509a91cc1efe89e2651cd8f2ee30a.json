{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"quiz-results\"\n};\nconst _hoisted_2 = {\n  class: \"detailed-results\"\n};\nconst _hoisted_3 = {\n  class: \"question-header\"\n};\nconst _hoisted_4 = {\n  class: \"question-number\"\n};\nconst _hoisted_5 = {\n  class: \"question-text\"\n};\nconst _hoisted_6 = {\n  class: \"answer-details\"\n};\nconst _hoisted_7 = {\n  class: \"button-group\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"Quiz Complete!\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, \"Your score: \" + _toDisplayString($props.score) + \" / \" + _toDisplayString($setup.totalQuestions), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"Detailed Results\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.questions, (question, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"result-item\"\n    }, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, \"Question \" + _toDisplayString(index + 1), 1 /* TEXT */), _createElementVNode(\"span\", {\n      class: _normalizeClass(['result-status', $setup.normalizeLetter($props.userAnswers[index]) === $setup.normalizeLetter(question.answer) ? 'correct' : 'wrong'])\n    }, _toDisplayString($setup.normalizeLetter($props.userAnswers[index]) === $setup.normalizeLetter(question.answer) ? '✓' : '✗'), 3 /* TEXT, CLASS */)]), _createElementVNode(\"p\", _hoisted_5, _toDisplayString(question.text), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"p\", null, \"Your answer: \" + _toDisplayString($props.userAnswers[index] || 'Not answered'), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Correct answer: \" + _toDisplayString(question.answer), 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.$emit('restart'))\n  }, \"Redo Quiz\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.$emit('go-back'))\n  }, \"Go Back to Main Screen\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$props","score","$setup","totalQuestions","_hoisted_2","_Fragment","_renderList","questions","question","index","key","_hoisted_3","_hoisted_4","_normalizeClass","normalizeLetter","userAnswers","answer","_hoisted_5","text","_hoisted_6","_hoisted_7","onClick","_cache","$event","_ctx","$emit"],"sources":["C:\\Users\\StevenJakeASOY\\Documents\\cursor-projects\\src\\components\\QuizResults.vue"],"sourcesContent":["<template>\r\n  <div class=\"quiz-results\">\r\n    <h2>Quiz Complete!</h2>\r\n    <p>Your score: {{ score }} / {{ totalQuestions }}</p>\r\n    \r\n    <div class=\"detailed-results\">\r\n      <h3>Detailed Results</h3>\r\n      <div v-for=\"(question, index) in questions\" :key=\"index\" class=\"result-item\">\r\n        <div class=\"question-header\">\r\n          <span class=\"question-number\">Question {{ index + 1 }}</span>\r\n          <span :class=\"['result-status', \r\n            normalizeLetter(userAnswers[index]) === normalizeLetter(question.answer) ? 'correct' : 'wrong']\">\r\n            {{ normalizeLetter(userAnswers[index]) === normalizeLetter(question.answer) ? '✓' : '✗' }}\r\n          </span>\r\n        </div>\r\n        <p class=\"question-text\">{{ question.text }}</p>\r\n        <div class=\"answer-details\">\r\n          <p>Your answer: {{ userAnswers[index] || 'Not answered' }}</p>\r\n          <p>Correct answer: {{ question.answer }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"button-group\">\r\n      <button @click=\"$emit('restart')\">Redo Quiz</button>\r\n      <button @click=\"$emit('go-back')\">Go Back to Main Screen</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\ndefineProps({\r\n  questions: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  userAnswers: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  score: {\r\n    type: Number,\r\n    required: true\r\n  }\r\n});\r\n\r\ndefineEmits(['restart', 'go-back']);\r\n\r\nconst totalQuestions = computed(() => props.questions.length);\r\n\r\nfunction normalizeLetter(letter) {\r\n  return String(letter).replace(/[)\\s]/g, '').toUpperCase();\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quiz-results {\r\n  max-width: 500px;\r\n  margin: 2rem auto;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  padding: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.detailed-results {\r\n  margin: 2rem 0;\r\n  text-align: left;\r\n}\r\n\r\n.result-item {\r\n  background: #f8f8f8;\r\n  border-radius: 8px;\r\n  padding: 1rem;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.question-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.question-number {\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.result-status {\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.result-status.correct {\r\n  color: #27ae60;\r\n}\r\n\r\n.result-status.wrong {\r\n  color: #e74c3c;\r\n}\r\n\r\n.answer-details {\r\n  margin-top: 0.5rem;\r\n  padding-top: 0.5rem;\r\n  border-top: 1px solid #ddd;\r\n}\r\n\r\n.answer-details p {\r\n  margin: 0.25rem 0;\r\n  color: #666;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: center;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.button-group button {\r\n  padding: 0.7rem 2rem;\r\n  background: #4CAF50;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n}\r\n\r\n.button-group button:hover {\r\n  background: #388e3c;\r\n}\r\n</style> "],"mappings":";;EACOA,KAAK,EAAC;AAAc;;EAIlBA,KAAK,EAAC;AAAkB;;EAGpBA,KAAK,EAAC;AAAiB;;EACpBA,KAAK,EAAC;AAAiB;;EAM5BA,KAAK,EAAC;AAAe;;EACnBA,KAAK,EAAC;AAAgB;;EAO1BA,KAAK,EAAC;AAAc;;uBAtB3BC,mBAAA,CA0BM,OA1BNC,UA0BM,G,0BAzBJC,mBAAA,CAAuB,YAAnB,gBAAc,sBAClBA,mBAAA,CAAqD,WAAlD,cAAY,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,KAAK,IAAG,KAAG,GAAAF,gBAAA,CAAGG,MAAA,CAAAC,cAAc,kBAE9CL,mBAAA,CAgBM,OAhBNM,UAgBM,G,0BAfJN,mBAAA,CAAyB,YAArB,kBAAgB,uB,kBACpBF,mBAAA,CAaMS,SAAA,QApBZC,WAAA,CAOuCN,MAAA,CAAAO,SAAS,EAPhD,CAOmBC,QAAQ,EAAEC,KAAK;yBAA5Bb,mBAAA,CAaM;MAbuCc,GAAG,EAAED,KAAK;MAAEd,KAAK,EAAC;QAC7DG,mBAAA,CAMM,OANNa,UAMM,GALJb,mBAAA,CAA6D,QAA7Dc,UAA6D,EAA/B,WAAS,GAAAb,gBAAA,CAAGU,KAAK,sBAC/CX,mBAAA,CAGO;MAHAH,KAAK,EAVtBkB,eAAA,mBAUwDX,MAAA,CAAAY,eAAe,CAACd,MAAA,CAAAe,WAAW,CAACN,KAAK,OAAOP,MAAA,CAAAY,eAAe,CAACN,QAAQ,CAACQ,MAAM;wBAEhHd,MAAA,CAAAY,eAAe,CAACd,MAAA,CAAAe,WAAW,CAACN,KAAK,OAAOP,MAAA,CAAAY,eAAe,CAACN,QAAQ,CAACQ,MAAM,qC,GAG9ElB,mBAAA,CAAgD,KAAhDmB,UAAgD,EAAAlB,gBAAA,CAApBS,QAAQ,CAACU,IAAI,kBACzCpB,mBAAA,CAGM,OAHNqB,UAGM,GAFJrB,mBAAA,CAA8D,WAA3D,eAAa,GAAAC,gBAAA,CAAGC,MAAA,CAAAe,WAAW,CAACN,KAAK,qCACpCX,mBAAA,CAA4C,WAAzC,kBAAgB,GAAAC,gBAAA,CAAGS,QAAQ,CAACQ,MAAM,iB;oCAK3ClB,mBAAA,CAGM,OAHNsB,UAGM,GAFJtB,mBAAA,CAAoD;IAA3CuB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAC,KAAK;KAAa,WAAS,GAC3C3B,mBAAA,CAAiE;IAAxDuB,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAC,KAAK;KAAa,wBAAsB,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}